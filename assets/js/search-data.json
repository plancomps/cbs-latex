{"0": {
    "doc": "Funcon specifications",
    "title": "Funcon specifications",
    "content": "This page is using MathJax-3. See the same page using MathJax-2.7. Links to non-local declarations are disabled on this sample page. OUTLINE . | Binding . | Environments | Current bindings | Scope | Recurse | . | . Binding . \\[\\begin{align*} [ \\ \\KEY{Type} \\quad &amp; \\FUNREF{environments} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{envs} \\\\ \\KEY{Datatype} \\quad &amp; \\FUNREF{identifiers} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{ids} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{identifier-tagged} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{id-tagged} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{fresh-identifier} \\\\ \\KEY{Entity} \\quad &amp; \\FUNREF{environment} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{env} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{initialise-binding} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{bind-value} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{bind} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{unbind} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{bound-directly} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{bound-value} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{bound} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{closed} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{scope} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{accumulate} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{collateral} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{bind-recursively} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{recursive} \\ ] \\end{align*}\\] \\[\\begin{align*} \\KEY{Meta-variables} \\quad &amp; \\VAR{T} &lt;: \\FUNHYP{../../../Values}{Value-Types}{values} \\end{align*}\\] Environments . \\[\\begin{align*} \\KEY{Type} \\quad &amp; \\FUNDEC{environments} \\leadsto \\FUNHYP{../../../Values/Composite}{Maps}{maps} ( \\FUNREF{identifiers}, \\FUNHYP{../../../Values}{Value-Types}{values}\\QUERY ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{envs} = \\FUNREF{environments} \\end{align*}\\] An environment represents bindings of identifiers to values. Mapping an identifier to \\(( \\ )\\) represents that its binding is hidden. Circularity in environments (due to recursive bindings) is represented using bindings to cut-points called \\(\\FUNHYP{../.}{Linking}{links}\\). Funcons are provided for making declarations recursive and for referring to bound values without explicit mention of links, so their existence can generally be ignored. \\[\\begin{align*} \\KEY{Datatype} \\quad \\FUNDEC{identifiers} \\ ::= \\ &amp; \\{ \\_ : \\FUNHYP{../../../Values/Composite}{Strings}{strings} \\} \\mid \\FUNDEC{identifier-tagged}( \\_ : \\FUNREF{identifiers}, \\_ : \\FUNHYP{../../../Values}{Value-Types}{values}) \\end{align*}\\] \\[\\begin{align*} \\KEY{Alias} \\quad &amp; \\FUNDEC{ids} = \\FUNREF{identifiers} \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{id-tagged} = \\FUNREF{identifier-tagged} \\end{align*}\\] An identifier is either a string of characters, or an identifier tagged with some value (e.g., with the identifier of a namespace). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{fresh-identifier} : \\TO \\FUNREF{identifiers} \\end{align*}\\] \\(\\FUNREF{fresh-identifier}\\) computes an identifier distinct from all previously computed identifiers. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUNREF{fresh-identifier} \\leadsto \\FUNREF{identifier-tagged} ( \\STRING{generated}, \\FUNHYP{../.}{Generating}{fresh-atom} ) \\end{align*}\\] Current bindings . \\[\\begin{align*} \\KEY{Entity} \\quad &amp; \\FUNDEC{environment}(\\_ : \\FUNREF{environments}) \\vdash \\_ \\TRANS \\_ \\end{align*}\\] \\[\\begin{align*} \\KEY{Alias} \\quad &amp; \\FUNDEC{env} = \\FUNREF{environment} \\end{align*}\\] The environment entity allows a computation to refer to the current bindings of identifiers to values. \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{initialise-binding}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\\\&amp;\\quad \\leadsto \\FUNHYP{../.}{Linking}{initialise-linking} ( \\FUNHYP{../.}{Generating}{initialise-generating} ( \\FUNREF{closed} ( \\VAR{X} ) ) ) \\end{align*}\\] \\(\\FUNREF{initialise-binding} ( \\VAR{X} )\\) ensures that \\(\\VAR{X}\\) does not depend on non-local bindings. It also ensures that the linking entity (used to represent potentially cyclic bindings) and the generating entity (for creating fresh identifiers) are initialised. \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-value}( \\VAR{I} : \\FUNREF{identifiers}, \\VAR{V} : \\FUNHYP{../../../Values}{Value-Types}{values}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto \\VAR{V} \\} \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bind} = \\FUNREF{bind-value} \\end{align*}\\] \\(\\FUNREF{bind-value} ( \\VAR{I}, \\VAR{X} )\\) computes the environment that binds only \\(\\VAR{I}\\) to the value computed by \\(\\VAR{X}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{unbind}( \\VAR{I} : \\FUNREF{identifiers}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto ( \\ ) \\} \\end{align*}\\] \\(\\FUNREF{unbind} ( \\VAR{I} )\\) computes the environment that hides the binding of \\(\\VAR{I}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-directly}( \\_ : \\FUNREF{identifiers}) : \\TO \\FUNHYP{../../../Values}{Value-Types}{values} \\end{align*}\\] \\(\\FUNREF{bound-directly} ( \\VAR{I} )\\) returns the value to which \\(\\VAR{I}\\) is currently bound, if any, and otherwise fails. \\(\\FUNREF{bound-directly} ( \\VAR{I} )\\) does not follow links. It is used only in connection with recursively-bound values when references are not encapsulated in abstractions. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUNHYP{../../../Values/Composite}{Maps}{lookup} ( \\VAR{\\rho}, \\VAR{I} ) \\leadsto ( \\VAR{V} : \\FUNHYP{../../../Values}{Value-Types}{values} ) }{ \\FUNREF{environment} ( \\VAR{\\rho} ) \\vdash \\FUNREF{bound-directly} ( \\VAR{I} : \\FUNREF{identifiers} ) \\TRANS \\VAR{V} } \\\\ \\KEY{Rule} \\quad &amp; \\RULE{ \\FUNHYP{../../../Values/Composite}{Maps}{lookup} ( \\VAR{\\rho}, \\VAR{I} ) \\leadsto ( \\ ) }{ \\FUNREF{environment} ( \\VAR{\\rho} ) \\vdash \\FUNREF{bound-directly} ( \\VAR{I} : \\FUNREF{identifiers} ) \\TRANS \\FUNHYP{../../Abnormal}{Failing}{fail} } \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-value}( \\VAR{I} : \\FUNREF{identifiers}) : \\TO \\FUNHYP{../../../Values}{Value-Types}{values} \\\\&amp;\\quad \\leadsto \\FUNHYP{../.}{Linking}{follow-if-link} ( \\FUNREF{bound-directly} ( \\VAR{I} ) ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bound} = \\FUNREF{bound-value} \\end{align*}\\] \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) inspects the value to which \\(\\VAR{I}\\) is currently bound, if any, and otherwise fails. If the value is a link, \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) returns the value obtained by following the link, if any, and otherwise fails. If the inspected value is not a link, \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) returns it. \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) is used for references to non-recursive bindings and to recursively-bound values when references are encapsulated in abstractions. Scope . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{closed}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*}\\] \\(\\FUNREF{closed} ( \\VAR{X} )\\) ensures that \\(\\VAR{X}\\) does not depend on non-local bindings. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUNREF{environment} ( \\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUNREF{environment} ( \\_ ) \\vdash \\FUNREF{closed} ( \\VAR{X} ) \\TRANS \\FUNREF{closed} ( \\VAR{X}' ) } \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{closed} ( \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{scope}( \\_ : \\FUNREF{environments}, \\_ : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*}\\] \\(\\FUNREF{scope} ( \\VAR{D}, \\VAR{X} )\\) executes \\(\\VAR{D}\\) with the current bindings, to compute an environment \\(\\VAR{\\rho}\\) representing local bindings. It then executes \\(\\VAR{X}\\) to compute the result, with the current bindings extended by \\(\\VAR{\\rho}\\), which may shadow or hide previous bindings. \\(\\FUNREF{closed} ( \\FUNREF{scope} ( \\VAR{\\rho}, \\VAR{X} ) )\\) ensures that \\(\\VAR{X}\\) can reference only the bindings provided by \\(\\VAR{\\rho}\\). \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUNREF{environment} ( \\FUNHYP{../../../Values/Composite}{Maps}{map-override} ( \\VAR{\\rho}\\SUB{1}, \\VAR{\\rho}\\SUB{0} ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUNREF{environment} ( \\VAR{\\rho}\\SUB{0} ) \\vdash \\FUNREF{scope} ( \\VAR{\\rho}\\SUB{1} : \\FUNREF{environments}, \\VAR{X} ) \\TRANS \\FUNREF{scope} ( \\VAR{\\rho}\\SUB{1}, \\VAR{X}' ) } \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{scope} ( \\_ : \\FUNREF{environments}, \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{accumulate}( \\_ : ( \\TO \\FUNREF{environments} )\\STAR) : \\TO \\FUNREF{environments} \\end{align*}\\] \\(\\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )\\) executes \\(\\VAR{D}\\SUB{1}\\) with the current bindings, to compute an environment \\(\\VAR{\\rho}\\SUB{1}\\) representing some local bindings. It then executes \\(\\VAR{D}\\SUB{2}\\) to compute an environment \\(\\VAR{\\rho}\\SUB{2}\\) representing further local bindings, with the current bindings extended by \\(\\VAR{\\rho}\\SUB{1}\\), which may shadow or hide previous current bindings. The result is \\(\\VAR{\\rho}\\SUB{1}\\) extended by \\(\\VAR{\\rho}\\SUB{2}\\), which may shadow or hide the bindings of \\(\\VAR{\\rho}\\SUB{1}\\). \\(\\FUNREF{accumulate} ( \\_, \\_ )\\) is associative, with \\(\\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ )\\) as unit, and extends to any number of arguments. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\VAR{D}\\SUB{1} \\TRANS \\VAR{D}\\SUB{1}' }{ \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} ) \\TRANS \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}', \\VAR{D}\\SUB{2} ) } \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{accumulate} ( \\VAR{\\rho}\\SUB{1} : \\FUNREF{environments}, \\VAR{D}\\SUB{2} ) \\leadsto \\FUNREF{scope} ( \\VAR{\\rho}\\SUB{1}, \\FUNHYP{../../../Values/Composite}{Maps}{map-override} ( \\VAR{D}\\SUB{2}, \\VAR{\\rho}\\SUB{1} ) ) \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{accumulate} ( \\ ) \\leadsto \\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ ) \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1} ) \\leadsto \\VAR{D}\\SUB{1} \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) \\leadsto \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}, \\FUNREF{accumulate} ( \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{collateral}( \\VAR{\\rho}\\STAR : \\FUNREF{environments}\\STAR) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\FUNHYP{../../Abnormal}{Failing}{checked} \\ \\FUNHYP{../../../Values/Composite}{Maps}{map-unite} ( \\VAR{\\rho}\\STAR ) \\end{align*}\\] \\(\\FUNREF{collateral} ( \\VAR{D}\\SUB{1}, \\cdots )\\) pre-evaluates its arguments with the current bindings, and unites the resulting maps, which fails if the domains are not pairwise disjoint. \\(\\FUNREF{collateral} ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )\\) is associative and commutative with \\(\\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ )\\) as unit, and extends to any number of arguments. Recurse . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-recursively}( \\VAR{I} : \\FUNREF{identifiers}, \\VAR{E} : \\TO \\FUNHYP{../../../Values}{Value-Types}{values}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\FUNREF{recursive} ( \\{ \\VAR{I} \\}, \\FUNREF{bind-value} ( \\VAR{I}, \\VAR{E} ) ) \\end{align*}\\] \\(\\FUNREF{bind-recursively} ( \\VAR{I}, \\VAR{E} )\\) binds \\(\\VAR{I}\\) to a link that refers to the value of \\(\\VAR{E}\\), representing a recursive binding of \\(\\VAR{I}\\) to the value of \\(\\VAR{E}\\). Since \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) follows links, it should not be executed during the evaluation of \\(\\VAR{E}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{recursive}( \\VAR{SI} : \\FUNHYP{../../../Values/Composite}{Sets}{sets} ( \\FUNREF{identifiers} ), \\VAR{D} : \\TO \\FUNREF{environments}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\FUNREF{re-close} ( \\FUNREF{bind-to-forward-links} ( \\VAR{SI} ), \\VAR{D} ) \\end{align*}\\] \\(\\FUNREF{recursive} ( \\VAR{SI}, \\VAR{D} )\\) executes \\(\\VAR{D}\\) with potential recursion on the bindings of the identifiers in the set \\(\\VAR{SI}\\) (which need not be the same as the set of identifiers bound by \\(\\VAR{D}\\)). \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{re-close}( \\VAR{M} : \\FUNHYP{../../../Values/Composite}{Maps}{maps} ( \\FUNREF{identifiers}, \\FUNHYP{../.}{Linking}{links} ), \\VAR{D} : \\TO \\FUNREF{environments}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\FUNREF{accumulate} ( \\FUNREF{scope} ( \\VAR{M}, \\VAR{D} ), \\FUNHYP{../.}{Flowing}{sequential} ( \\FUNREF{set-forward-links} ( \\VAR{M} ), \\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ ) ) ) \\end{align*}\\] \\(\\FUNREF{re-close} ( \\VAR{M}, \\VAR{D} )\\) first executes \\(\\VAR{D}\\) in the scope \\(\\VAR{M}\\), which maps identifiers to freshly allocated links. This computes an environment \\(\\VAR{\\rho}\\) where the bound values may contain links, or implicit references to links in abstraction values. It then sets the link for each identifier in the domain of \\(\\VAR{M}\\) to refer to its bound value in \\(\\VAR{\\rho}\\), and returns \\(\\VAR{\\rho}\\) as the result. \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{bind-to-forward-links}( \\VAR{SI} : \\FUNHYP{../../../Values/Composite}{Sets}{sets} ( \\FUNREF{identifiers} )) : \\TO \\FUNHYP{../../../Values/Composite}{Maps}{maps} ( \\FUNREF{identifiers}, \\FUNHYP{../.}{Linking}{links} ) \\\\&amp;\\quad \\leadsto \\FUNHYP{../../../Values/Composite}{Maps}{map-unite} ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUNHYP{../.}{Giving}{interleave-map} ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUNREF{bind-value} ( \\FUNHYP{../.}{Giving}{given}, \\FUNHYP{../.}{Linking}{fresh-link} ( \\FUNHYP{../../../Values}{Value-Types}{values} ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUNHYP{../../../Values/Composite}{Sets}{set-elements} ( \\VAR{SI} ) ) ) \\end{align*}\\] \\(\\FUNREF{bind-to-forward-links} ( \\VAR{SI} )\\) binds each identifier in the set \\(\\VAR{SI}\\) to a freshly allocated link. \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{set-forward-links}( \\VAR{M} : \\FUNHYP{../../../Values/Composite}{Maps}{maps} ( \\FUNREF{identifiers}, \\FUNHYP{../.}{Linking}{links} )) : \\TO \\FUNHYP{../../../Values/Primitive}{Null}{null-type} \\\\&amp;\\quad \\leadsto \\FUNHYP{../.}{Flowing}{effect} ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUNHYP{../.}{Giving}{interleave-map} ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUNHYP{../.}{Linking}{set-link} ( \\FUNHYP{../../../Values/Composite}{Maps}{map-lookup} ( \\VAR{M}, \\FUNHYP{../.}{Giving}{given} ), \\FUNREF{bound-value} ( \\FUNHYP{../.}{Giving}{given} ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUNHYP{../../../Values/Composite}{Sets}{set-elements} ( \\FUNHYP{../../../Values/Composite}{Maps}{map-domain} ( \\VAR{M} ) ) ) ) \\end{align*}\\] For each identifier \\(\\VAR{I}\\) in the domain of \\(\\VAR{M}\\), \\(\\FUNREF{set-forward-links} ( \\VAR{M} )\\) sets the link to which \\(\\VAR{I}\\) is mapped by \\(\\VAR{M}\\) to the current bound value of \\(\\VAR{I}\\). ",
    "url": "/cbs-latex/docs/mathjax-3/Binding.html",
    "relUrl": "/docs/mathjax-3/Binding.html"
  },"1": {
    "doc": "Funcon specifications",
    "title": "Funcon specifications",
    "content": "This page is using MathJax-2.7. See the same page using MathJax-3. Links to non-local declarations are disabled on this sample page. OUTLINE . | Binding . | Environments | Current bindings | Scope | Recurse | . | . Binding . \\[\\begin{align*} [ \\ \\KEY{Type} \\quad &amp; \\FUNREF{environments} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{envs} \\\\ \\KEY{Datatype} \\quad &amp; \\FUNREF{identifiers} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{ids} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{identifier-tagged} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{id-tagged} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{fresh-identifier} \\\\ \\KEY{Entity} \\quad &amp; \\FUNREF{environment} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{env} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{initialise-binding} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{bind-value} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{bind} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{unbind} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{bound-directly} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{bound-value} \\\\ \\KEY{Alias} \\quad &amp; \\FUNREF{bound} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{closed} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{scope} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{accumulate} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{collateral} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{bind-recursively} \\\\ \\KEY{Funcon} \\quad &amp; \\FUNREF{recursive} \\ ] \\end{align*}\\] \\[\\begin{align*} \\KEY{Meta-variables} \\quad &amp; \\VAR{T} &lt;: \\FUNHYP{../../../Values}{Value-Types}{values} \\end{align*}\\] Environments . \\[\\begin{align*} \\KEY{Type} \\quad &amp; \\FUNDEC{environments} \\leadsto \\FUNHYP{../../../Values/Composite}{Maps}{maps} ( \\FUNREF{identifiers}, \\FUNHYP{../../../Values}{Value-Types}{values}\\QUERY ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{envs} = \\FUNREF{environments} \\end{align*}\\] An environment represents bindings of identifiers to values. Mapping an identifier to \\(( \\ )\\) represents that its binding is hidden. Circularity in environments (due to recursive bindings) is represented using bindings to cut-points called \\(\\FUNHYP{../.}{Linking}{links}\\). Funcons are provided for making declarations recursive and for referring to bound values without explicit mention of links, so their existence can generally be ignored. \\[\\begin{align*} \\KEY{Datatype} \\quad \\FUNDEC{identifiers} \\ ::= \\ &amp; \\{ \\_ : \\FUNHYP{../../../Values/Composite}{Strings}{strings} \\} \\mid \\FUNDEC{identifier-tagged}( \\_ : \\FUNREF{identifiers}, \\_ : \\FUNHYP{../../../Values}{Value-Types}{values}) \\end{align*}\\] \\[\\begin{align*} \\KEY{Alias} \\quad &amp; \\FUNDEC{ids} = \\FUNREF{identifiers} \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{id-tagged} = \\FUNREF{identifier-tagged} \\end{align*}\\] An identifier is either a string of characters, or an identifier tagged with some value (e.g., with the identifier of a namespace). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{fresh-identifier} : \\TO \\FUNREF{identifiers} \\end{align*}\\] \\(\\FUNREF{fresh-identifier}\\) computes an identifier distinct from all previously computed identifiers. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUNREF{fresh-identifier} \\leadsto \\FUNREF{identifier-tagged} ( \\STRING{generated}, \\FUNHYP{../.}{Generating}{fresh-atom} ) \\end{align*}\\] Current bindings . \\[\\begin{align*} \\KEY{Entity} \\quad &amp; \\FUNDEC{environment}(\\_ : \\FUNREF{environments}) \\vdash \\_ \\TRANS \\_ \\end{align*}\\] \\[\\begin{align*} \\KEY{Alias} \\quad &amp; \\FUNDEC{env} = \\FUNREF{environment} \\end{align*}\\] The environment entity allows a computation to refer to the current bindings of identifiers to values. \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{initialise-binding}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\\\&amp;\\quad \\leadsto \\FUNHYP{../.}{Linking}{initialise-linking} ( \\FUNHYP{../.}{Generating}{initialise-generating} ( \\FUNREF{closed} ( \\VAR{X} ) ) ) \\end{align*}\\] \\(\\FUNREF{initialise-binding} ( \\VAR{X} )\\) ensures that \\(\\VAR{X}\\) does not depend on non-local bindings. It also ensures that the linking entity (used to represent potentially cyclic bindings) and the generating entity (for creating fresh identifiers) are initialised. \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-value}( \\VAR{I} : \\FUNREF{identifiers}, \\VAR{V} : \\FUNHYP{../../../Values}{Value-Types}{values}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto \\VAR{V} \\} \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bind} = \\FUNREF{bind-value} \\end{align*}\\] \\(\\FUNREF{bind-value} ( \\VAR{I}, \\VAR{X} )\\) computes the environment that binds only \\(\\VAR{I}\\) to the value computed by \\(\\VAR{X}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{unbind}( \\VAR{I} : \\FUNREF{identifiers}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto ( \\ ) \\} \\end{align*}\\] \\(\\FUNREF{unbind} ( \\VAR{I} )\\) computes the environment that hides the binding of \\(\\VAR{I}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-directly}( \\_ : \\FUNREF{identifiers}) : \\TO \\FUNHYP{../../../Values}{Value-Types}{values} \\end{align*}\\] \\(\\FUNREF{bound-directly} ( \\VAR{I} )\\) returns the value to which \\(\\VAR{I}\\) is currently bound, if any, and otherwise fails. \\(\\FUNREF{bound-directly} ( \\VAR{I} )\\) does not follow links. It is used only in connection with recursively-bound values when references are not encapsulated in abstractions. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUNHYP{../../../Values/Composite}{Maps}{lookup} ( \\VAR{\\rho}, \\VAR{I} ) \\leadsto ( \\VAR{V} : \\FUNHYP{../../../Values}{Value-Types}{values} ) }{ \\FUNREF{environment} ( \\VAR{\\rho} ) \\vdash \\FUNREF{bound-directly} ( \\VAR{I} : \\FUNREF{identifiers} ) \\TRANS \\VAR{V} } \\\\ \\KEY{Rule} \\quad &amp; \\RULE{ \\FUNHYP{../../../Values/Composite}{Maps}{lookup} ( \\VAR{\\rho}, \\VAR{I} ) \\leadsto ( \\ ) }{ \\FUNREF{environment} ( \\VAR{\\rho} ) \\vdash \\FUNREF{bound-directly} ( \\VAR{I} : \\FUNREF{identifiers} ) \\TRANS \\FUNHYP{../../Abnormal}{Failing}{fail} } \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-value}( \\VAR{I} : \\FUNREF{identifiers}) : \\TO \\FUNHYP{../../../Values}{Value-Types}{values} \\\\&amp;\\quad \\leadsto \\FUNHYP{../.}{Linking}{follow-if-link} ( \\FUNREF{bound-directly} ( \\VAR{I} ) ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bound} = \\FUNREF{bound-value} \\end{align*}\\] \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) inspects the value to which \\(\\VAR{I}\\) is currently bound, if any, and otherwise fails. If the value is a link, \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) returns the value obtained by following the link, if any, and otherwise fails. If the inspected value is not a link, \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) returns it. \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) is used for references to non-recursive bindings and to recursively-bound values when references are encapsulated in abstractions. Scope . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{closed}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*}\\] \\(\\FUNREF{closed} ( \\VAR{X} )\\) ensures that \\(\\VAR{X}\\) does not depend on non-local bindings. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUNREF{environment} ( \\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUNREF{environment} ( \\_ ) \\vdash \\FUNREF{closed} ( \\VAR{X} ) \\TRANS \\FUNREF{closed} ( \\VAR{X}' ) } \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{closed} ( \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{scope}( \\_ : \\FUNREF{environments}, \\_ : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*}\\] \\(\\FUNREF{scope} ( \\VAR{D}, \\VAR{X} )\\) executes \\(\\VAR{D}\\) with the current bindings, to compute an environment \\(\\VAR{\\rho}\\) representing local bindings. It then executes \\(\\VAR{X}\\) to compute the result, with the current bindings extended by \\(\\VAR{\\rho}\\), which may shadow or hide previous bindings. \\(\\FUNREF{closed} ( \\FUNREF{scope} ( \\VAR{\\rho}, \\VAR{X} ) )\\) ensures that \\(\\VAR{X}\\) can reference only the bindings provided by \\(\\VAR{\\rho}\\). \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUNREF{environment} ( \\FUNHYP{../../../Values/Composite}{Maps}{map-override} ( \\VAR{\\rho}\\SUB{1}, \\VAR{\\rho}\\SUB{0} ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUNREF{environment} ( \\VAR{\\rho}\\SUB{0} ) \\vdash \\FUNREF{scope} ( \\VAR{\\rho}\\SUB{1} : \\FUNREF{environments}, \\VAR{X} ) \\TRANS \\FUNREF{scope} ( \\VAR{\\rho}\\SUB{1}, \\VAR{X}' ) } \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{scope} ( \\_ : \\FUNREF{environments}, \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{accumulate}( \\_ : ( \\TO \\FUNREF{environments} )\\STAR) : \\TO \\FUNREF{environments} \\end{align*}\\] \\(\\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )\\) executes \\(\\VAR{D}\\SUB{1}\\) with the current bindings, to compute an environment \\(\\VAR{\\rho}\\SUB{1}\\) representing some local bindings. It then executes \\(\\VAR{D}\\SUB{2}\\) to compute an environment \\(\\VAR{\\rho}\\SUB{2}\\) representing further local bindings, with the current bindings extended by \\(\\VAR{\\rho}\\SUB{1}\\), which may shadow or hide previous current bindings. The result is \\(\\VAR{\\rho}\\SUB{1}\\) extended by \\(\\VAR{\\rho}\\SUB{2}\\), which may shadow or hide the bindings of \\(\\VAR{\\rho}\\SUB{1}\\). \\(\\FUNREF{accumulate} ( \\_, \\_ )\\) is associative, with \\(\\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ )\\) as unit, and extends to any number of arguments. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\VAR{D}\\SUB{1} \\TRANS \\VAR{D}\\SUB{1}' }{ \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} ) \\TRANS \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}', \\VAR{D}\\SUB{2} ) } \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{accumulate} ( \\VAR{\\rho}\\SUB{1} : \\FUNREF{environments}, \\VAR{D}\\SUB{2} ) \\leadsto \\FUNREF{scope} ( \\VAR{\\rho}\\SUB{1}, \\FUNHYP{../../../Values/Composite}{Maps}{map-override} ( \\VAR{D}\\SUB{2}, \\VAR{\\rho}\\SUB{1} ) ) \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{accumulate} ( \\ ) \\leadsto \\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ ) \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1} ) \\leadsto \\VAR{D}\\SUB{1} \\\\ \\KEY{Rule} \\quad &amp; \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) \\leadsto \\FUNREF{accumulate} ( \\VAR{D}\\SUB{1}, \\FUNREF{accumulate} ( \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{collateral}( \\VAR{\\rho}\\STAR : \\FUNREF{environments}\\STAR) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\FUNHYP{../../Abnormal}{Failing}{checked} \\ \\FUNHYP{../../../Values/Composite}{Maps}{map-unite} ( \\VAR{\\rho}\\STAR ) \\end{align*}\\] \\(\\FUNREF{collateral} ( \\VAR{D}\\SUB{1}, \\cdots )\\) pre-evaluates its arguments with the current bindings, and unites the resulting maps, which fails if the domains are not pairwise disjoint. \\(\\FUNREF{collateral} ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )\\) is associative and commutative with \\(\\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ )\\) as unit, and extends to any number of arguments. Recurse . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-recursively}( \\VAR{I} : \\FUNREF{identifiers}, \\VAR{E} : \\TO \\FUNHYP{../../../Values}{Value-Types}{values}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\FUNREF{recursive} ( \\{ \\VAR{I} \\}, \\FUNREF{bind-value} ( \\VAR{I}, \\VAR{E} ) ) \\end{align*}\\] \\(\\FUNREF{bind-recursively} ( \\VAR{I}, \\VAR{E} )\\) binds \\(\\VAR{I}\\) to a link that refers to the value of \\(\\VAR{E}\\), representing a recursive binding of \\(\\VAR{I}\\) to the value of \\(\\VAR{E}\\). Since \\(\\FUNREF{bound-value} ( \\VAR{I} )\\) follows links, it should not be executed during the evaluation of \\(\\VAR{E}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{recursive}( \\VAR{SI} : \\FUNHYP{../../../Values/Composite}{Sets}{sets} ( \\FUNREF{identifiers} ), \\VAR{D} : \\TO \\FUNREF{environments}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\FUNREF{re-close} ( \\FUNREF{bind-to-forward-links} ( \\VAR{SI} ), \\VAR{D} ) \\end{align*}\\] \\(\\FUNREF{recursive} ( \\VAR{SI}, \\VAR{D} )\\) executes \\(\\VAR{D}\\) with potential recursion on the bindings of the identifiers in the set \\(\\VAR{SI}\\) (which need not be the same as the set of identifiers bound by \\(\\VAR{D}\\)). \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{re-close}( \\VAR{M} : \\FUNHYP{../../../Values/Composite}{Maps}{maps} ( \\FUNREF{identifiers}, \\FUNHYP{../.}{Linking}{links} ), \\VAR{D} : \\TO \\FUNREF{environments}) : \\TO \\FUNREF{environments} \\\\&amp;\\quad \\leadsto \\FUNREF{accumulate} ( \\FUNREF{scope} ( \\VAR{M}, \\VAR{D} ), \\FUNHYP{../.}{Flowing}{sequential} ( \\FUNREF{set-forward-links} ( \\VAR{M} ), \\FUNHYP{../../../Values/Composite}{Maps}{map} ( \\ ) ) ) \\end{align*}\\] \\(\\FUNREF{re-close} ( \\VAR{M}, \\VAR{D} )\\) first executes \\(\\VAR{D}\\) in the scope \\(\\VAR{M}\\), which maps identifiers to freshly allocated links. This computes an environment \\(\\VAR{\\rho}\\) where the bound values may contain links, or implicit references to links in abstraction values. It then sets the link for each identifier in the domain of \\(\\VAR{M}\\) to refer to its bound value in \\(\\VAR{\\rho}\\), and returns \\(\\VAR{\\rho}\\) as the result. \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{bind-to-forward-links}( \\VAR{SI} : \\FUNHYP{../../../Values/Composite}{Sets}{sets} ( \\FUNREF{identifiers} )) : \\TO \\FUNHYP{../../../Values/Composite}{Maps}{maps} ( \\FUNREF{identifiers}, \\FUNHYP{../.}{Linking}{links} ) \\\\&amp;\\quad \\leadsto \\FUNHYP{../../../Values/Composite}{Maps}{map-unite} ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUNHYP{../.}{Giving}{interleave-map} ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUNREF{bind-value} ( \\FUNHYP{../.}{Giving}{given}, \\FUNHYP{../.}{Linking}{fresh-link} ( \\FUNHYP{../../../Values}{Value-Types}{values} ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUNHYP{../../../Values/Composite}{Sets}{set-elements} ( \\VAR{SI} ) ) ) \\end{align*}\\] \\(\\FUNREF{bind-to-forward-links} ( \\VAR{SI} )\\) binds each identifier in the set \\(\\VAR{SI}\\) to a freshly allocated link. \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{set-forward-links}( \\VAR{M} : \\FUNHYP{../../../Values/Composite}{Maps}{maps} ( \\FUNREF{identifiers}, \\FUNHYP{../.}{Linking}{links} )) : \\TO \\FUNHYP{../../../Values/Primitive}{Null}{null-type} \\\\&amp;\\quad \\leadsto \\FUNHYP{../.}{Flowing}{effect} ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUNHYP{../.}{Giving}{interleave-map} ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUNHYP{../.}{Linking}{set-link} ( \\FUNHYP{../../../Values/Composite}{Maps}{map-lookup} ( \\VAR{M}, \\FUNHYP{../.}{Giving}{given} ), \\FUNREF{bound-value} ( \\FUNHYP{../.}{Giving}{given} ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUNHYP{../../../Values/Composite}{Sets}{set-elements} ( \\FUNHYP{../../../Values/Composite}{Maps}{map-domain} ( \\VAR{M} ) ) ) ) \\end{align*}\\] For each identifier \\(\\VAR{I}\\) in the domain of \\(\\VAR{M}\\), \\(\\FUNREF{set-forward-links} ( \\VAR{M} )\\) sets the link to which \\(\\VAR{I}\\) is mapped by \\(\\VAR{M}\\) to the current bound value of \\(\\VAR{I}\\). ",
    "url": "/cbs-latex/docs/mathjax-2.7/Binding.html",
    "relUrl": "/docs/mathjax-2.7/Binding.html"
  },"2": {
    "doc": "Funcon specifications",
    "title": "Funcon specifications",
    "content": "This page is using \\(\\KaTeX\\). See the same page using MathJax-3. Links to non-local declarations are disabled on this sample page. OUTLINE . | Binding . | Environments | Current bindings | Scope | Recurse | . | . Binding . \\[\\begin{align*} [ \\ \\KEY{Type} \\quad &amp; \\FUN@environments \\\\ \\KEY{Alias} \\quad &amp; \\FUN@envs \\\\ \\KEY{Datatype} \\quad &amp; \\FUN@identifiers \\\\ \\KEY{Alias} \\quad &amp; \\FUN@ids \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@identifier@tagged \\\\ \\KEY{Alias} \\quad &amp; \\FUN@id@tagged \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@fresh@identifier \\\\ \\KEY{Entity} \\quad &amp; \\FUN@environment \\\\ \\KEY{Alias} \\quad &amp; \\FUN@env \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@initialise@binding \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bind@value \\\\ \\KEY{Alias} \\quad &amp; \\FUN@bind \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@unbind \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bound@directly \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bound@value \\\\ \\KEY{Alias} \\quad &amp; \\FUN@bound \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@closed \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@scope \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@accumulate \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@collateral \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bind@recursively \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@recursive \\ ] \\end{align*}\\] \\[\\begin{align*} \\KEY{Meta-variables} \\quad &amp; \\VAR{T} &lt;: \\FUN@values \\end{align*}\\] Environments . \\[\\begin{align*} \\KEY{Type} \\quad &amp; \\FUNDEC{environments} \\leadsto \\FUN@maps ( \\FUN@identifiers, \\FUN@values\\QUERY ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{envs} = \\FUN@environments \\end{align*}\\] An environment represents bindings of identifiers to values. Mapping an identifier to \\(( \\ )\\) represents that its binding is hidden. Circularity in environments (due to recursive bindings) is represented using bindings to cut-points called \\(\\FUN@links\\). Funcons are provided for making declarations recursive and for referring to bound values without explicit mention of links, so their existence can generally be ignored. \\[\\begin{align*} \\KEY{Datatype} \\quad \\FUNDEC{identifiers} \\ ::= \\ &amp; \\{ \\_ : \\FUN@strings \\} \\mid \\FUNDEC{identifier-tagged}( \\_ : \\FUN@identifiers, \\_ : \\FUN@values) \\end{align*}\\] \\[\\begin{align*} \\KEY{Alias} \\quad &amp; \\FUNDEC{ids} = \\FUN@identifiers \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{id-tagged} = \\FUN@identifier@tagged \\end{align*}\\] An identifier is either a string of characters, or an identifier tagged with some value (e.g., with the identifier of a namespace). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{fresh-identifier} : \\TO \\FUN@identifiers \\end{align*}\\] \\(\\FUN@fresh@identifier\\) computes an identifier distinct from all previously computed identifiers. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@fresh@identifier \\leadsto \\FUN@identifier@tagged ( \\STRING{generated}, \\FUN@fresh@atom ) \\end{align*}\\] Current bindings . \\[\\begin{align*} \\KEY{Entity} \\quad &amp; \\FUNDEC{environment}(\\_ : \\FUN@environments) \\vdash \\_ \\TRANS \\_ \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{env} = \\FUN@environment \\end{align*}\\] The environment entity allows a computation to refer to the current bindings of identifiers to values. \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{initialise-binding}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\\\&amp;\\quad \\leadsto \\FUN@initialise@linking ( \\FUN@initialise@generating ( \\FUN@closed ( \\VAR{X} ) ) ) \\end{align*}\\] \\(\\FUN@initialise@binding ( \\VAR{X} )\\) ensures that \\(\\VAR{X}\\) does not depend on non-local bindings. It also ensures that the linking entity (used to represent potentially cyclic bindings) and the generating entity (for creating fresh identifiers) are initialised. \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-value}( \\VAR{I} : \\FUN@identifiers, \\VAR{V} : \\FUN@values) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto \\VAR{V} \\} \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bind} = \\FUN@bind@value \\end{align*}\\] \\(\\FUN@bind@value ( \\VAR{I}, \\VAR{X} )\\) computes the environment that binds only \\(\\VAR{I}\\) to the value computed by \\(\\VAR{X}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{unbind}( \\VAR{I} : \\FUN@identifiers) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto ( \\ ) \\} \\end{align*}\\] \\(\\FUN@unbind ( \\VAR{I} )\\) computes the environment that hides the binding of \\(\\VAR{I}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-directly}( \\_ : \\FUN@identifiers) : \\TO \\FUN@values \\end{align*}\\] \\(\\FUN@bound@directly ( \\VAR{I} )\\) returns the value to which \\(\\VAR{I}\\) is currently bound, if any, and otherwise fails. \\(\\FUN@bound@directly ( \\VAR{I} )\\) does not follow links. It is used only in connection with recursively-bound values when references are not encapsulated in abstractions. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@lookup ( \\VAR{\\ensuremath{\\rho}}, \\VAR{I} ) \\leadsto ( \\VAR{V} : \\FUN@values ) }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}} ) \\vdash \\FUN@bound@directly ( \\VAR{I} : \\FUN@identifiers ) \\TRANS \\VAR{V} } \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@lookup ( \\VAR{\\ensuremath{\\rho}}, \\VAR{I} ) \\leadsto ( \\ ) }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}} ) \\vdash \\FUN@bound@directly ( \\VAR{I} : \\FUN@identifiers ) \\TRANS \\FUN@fail } \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-value}( \\VAR{I} : \\FUN@identifiers) : \\TO \\FUN@values \\\\&amp;\\quad \\leadsto \\FUN@follow@if@link ( \\FUN@bound@directly ( \\VAR{I} ) ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bound} = \\FUN@bound@value \\end{align*}\\] \\(\\FUN@bound@value ( \\VAR{I} )\\) inspects the value to which \\(\\VAR{I}\\) is currently bound, if any, and otherwise fails. If the value is a link, \\(\\FUN@bound@value ( \\VAR{I} )\\) returns the value obtained by following the link, if any, and otherwise fails. If the inspected value is not a link, \\(\\FUN@bound@value ( \\VAR{I} )\\) returns it. \\(\\FUN@bound@value ( \\VAR{I} )\\) is used for references to non-recursive bindings and to recursively-bound values when references are encapsulated in abstractions. Scope . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{closed}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*}\\] \\(\\FUN@closed ( \\VAR{X} )\\) ensures that \\(\\VAR{X}\\) does not depend on non-local bindings. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@environment ( \\FUN@map ( \\ ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUN@environment ( \\_ ) \\vdash \\FUN@closed ( \\VAR{X} ) \\TRANS \\FUN@closed ( \\VAR{X}' ) } \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@closed ( \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{scope}( \\_ : \\FUN@environments, \\_ : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*}\\] \\(\\FUN@scope ( \\VAR{D}, \\VAR{X} )\\) executes \\(\\VAR{D}\\) with the current bindings, to compute an environment \\(\\VAR{\\ensuremath{\\rho}}\\) representing local bindings. It then executes \\(\\VAR{X}\\) to compute the result, with the current bindings extended by \\(\\VAR{\\ensuremath{\\rho}}\\), which may shadow or hide previous bindings. \\(\\FUN@closed ( \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}, \\VAR{X} ) )\\) ensures that \\(\\VAR{X}\\) can reference only the bindings provided by \\(\\VAR{\\ensuremath{\\rho}}\\). \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@environment ( \\FUN@map@override ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\VAR{\\ensuremath{\\rho}}\\SUB{0} ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}}\\SUB{0} ) \\vdash \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1} : \\FUN@environments, \\VAR{X} ) \\TRANS \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\VAR{X}' ) } \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@scope ( \\_ : \\FUN@environments, \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{accumulate}( \\_ : ( \\TO \\FUN@environments )\\STAR) : \\TO \\FUN@environments \\end{align*}\\] \\(\\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )\\) executes \\(\\VAR{D}\\SUB{1}\\) with the current bindings, to compute an environment \\(\\VAR{\\ensuremath{\\rho}}\\SUB{1}\\) representing some local bindings. It then executes \\(\\VAR{D}\\SUB{2}\\) to compute an environment \\(\\VAR{\\ensuremath{\\rho}}\\SUB{2}\\) representing further local bindings, with the current bindings extended by \\(\\VAR{\\ensuremath{\\rho}}\\SUB{1}\\), which may shadow or hide previous current bindings. The result is \\(\\VAR{\\ensuremath{\\rho}}\\SUB{1}\\) extended by \\(\\VAR{\\ensuremath{\\rho}}\\SUB{2}\\), which may shadow or hide the bindings of \\(\\VAR{\\ensuremath{\\rho}}\\SUB{1}\\). \\(\\FUN@accumulate ( \\_, \\_ )\\) is associative, with \\(\\FUN@map ( \\ )\\) as unit, and extends to any number of arguments. \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\VAR{D}\\SUB{1} \\TRANS \\VAR{D}\\SUB{1}' }{ \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} ) \\TRANS \\FUN@accumulate ( \\VAR{D}\\SUB{1}', \\VAR{D}\\SUB{2} ) } \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{\\ensuremath{\\rho}}\\SUB{1} : \\FUN@environments, \\VAR{D}\\SUB{2} ) \\leadsto \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\FUN@map@override ( \\VAR{D}\\SUB{2}, \\VAR{\\ensuremath{\\rho}}\\SUB{1} ) ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\ ) \\leadsto \\FUN@map ( \\ ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{D}\\SUB{1} ) \\leadsto \\VAR{D}\\SUB{1} \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) \\leadsto \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\FUN@accumulate ( \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{collateral}( \\VAR{\\ensuremath{\\rho}}\\STAR : \\FUN@environments\\STAR) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@checked \\ \\FUN@map@unite ( \\VAR{\\ensuremath{\\rho}}\\STAR ) \\end{align*}\\] \\(\\FUN@collateral ( \\VAR{D}\\SUB{1}, \\cdots )\\) pre-evaluates its arguments with the current bindings, and unites the resulting maps, which fails if the domains are not pairwise disjoint. \\(\\FUN@collateral ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )\\) is associative and commutative with \\(\\FUN@map ( \\ )\\) as unit, and extends to any number of arguments. Recurse . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-recursively}( \\VAR{I} : \\FUN@identifiers, \\VAR{E} : \\TO \\FUN@values) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@recursive ( \\{ \\VAR{I} \\}, \\FUN@bind@value ( \\VAR{I}, \\VAR{E} ) ) \\end{align*}\\] \\(\\FUN@bind@recursively ( \\VAR{I}, \\VAR{E} )\\) binds \\(\\VAR{I}\\) to a link that refers to the value of \\(\\VAR{E}\\), representing a recursive binding of \\(\\VAR{I}\\) to the value of \\(\\VAR{E}\\). Since \\(\\FUN@bound@value ( \\VAR{I} )\\) follows links, it should not be executed during the evaluation of \\(\\VAR{E}\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{recursive}( \\VAR{SI} : \\FUN@sets ( \\FUN@identifiers ), \\VAR{D} : \\TO \\FUN@environments) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@re@close ( \\FUN@bind@to@forward@links ( \\VAR{SI} ), \\VAR{D} ) \\end{align*}\\] \\(\\FUN@recursive ( \\VAR{SI}, \\VAR{D} )\\) executes \\(\\VAR{D}\\) with potential recursion on the bindings of the identifiers in the set \\(\\VAR{SI}\\) (which need not be the same as the set of identifiers bound by \\(\\VAR{D}\\)). \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{re-close}( \\VAR{M} : \\FUN@maps ( \\FUN@identifiers, \\FUN@links ), \\VAR{D} : \\TO \\FUN@environments) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@accumulate ( \\FUN@scope ( \\VAR{M}, \\VAR{D} ), \\FUN@sequential ( \\FUN@set@forward@links ( \\VAR{M} ), \\FUN@map ( \\ ) ) ) \\end{align*}\\] \\(\\FUN@re@close ( \\VAR{M}, \\VAR{D} )\\) first executes \\(\\VAR{D}\\) in the scope \\(\\VAR{M}\\), which maps identifiers to freshly allocated links. This computes an environment \\(\\VAR{\\ensuremath{\\rho}}\\) where the bound values may contain links, or implicit references to links in abstraction values. It then sets the link for each identifier in the domain of \\(\\VAR{M}\\) to refer to its bound value in \\(\\VAR{\\ensuremath{\\rho}}\\), and returns \\(\\VAR{\\ensuremath{\\rho}}\\) as the result. \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{bind-to-forward-links}( \\VAR{SI} : \\FUN@sets ( \\FUN@identifiers )) : \\TO \\FUN@maps ( \\FUN@identifiers, \\FUN@links ) \\\\&amp;\\quad \\leadsto \\FUN@map@unite ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUN@interleave@map ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@bind@value ( \\FUN@given, \\FUN@fresh@link ( \\FUN@values ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@elements ( \\VAR{SI} ) ) ) \\end{align*}\\] \\(\\FUN@bind@to@forward@links ( \\VAR{SI} )\\) binds each identifier in the set \\(\\VAR{SI}\\) to a freshly allocated link. \\[\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{set-forward-links}( \\VAR{M} : \\FUN@maps ( \\FUN@identifiers, \\FUN@links )) : \\TO \\FUN@null@type \\\\&amp;\\quad \\leadsto \\FUN@effect ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUN@interleave@map ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@link ( \\FUN@map@lookup ( \\VAR{M}, \\FUN@given ), \\FUN@bound@value ( \\FUN@given ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@elements ( \\FUN@map@domain ( \\VAR{M} ) ) ) ) \\end{align*}\\] For each identifier \\(\\VAR{I}\\) in the domain of \\(\\VAR{M}\\), \\(\\FUN@set@forward@links ( \\VAR{M} )\\) sets the link to which \\(\\VAR{I}\\) is mapped by \\(\\VAR{M}\\) to the current bound value of \\(\\VAR{I}\\). ",
    "url": "/cbs-latex/docs/katex/Binding.html",
    "relUrl": "/docs/katex/Binding.html"
  },"3": {
    "doc": "Binding.md",
    "title": "Binding.md",
    "content": "{::comment}{:/} &lt;details open markdown=\"block\"&gt; &lt;summary&gt; OUTLINE &lt;/summary&gt; {: .text-delta } - TOC {:toc} &lt;/details&gt; ---- ### Binding $$\\begin{align*} [ \\ \\KEY{Type} \\quad &amp; \\FUN@environments \\\\ \\KEY{Alias} \\quad &amp; \\FUN@envs \\\\ \\KEY{Datatype} \\quad &amp; \\FUN@identifiers \\\\ \\KEY{Alias} \\quad &amp; \\FUN@ids \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@identifier@tagged \\\\ \\KEY{Alias} \\quad &amp; \\FUN@id@tagged \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@fresh@identifier \\\\ \\KEY{Entity} \\quad &amp; \\FUN@environment \\\\ \\KEY{Alias} \\quad &amp; \\FUN@env \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@initialise@binding \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bind@value \\\\ \\KEY{Alias} \\quad &amp; \\FUN@bind \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@unbind \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bound@directly \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bound@value \\\\ \\KEY{Alias} \\quad &amp; \\FUN@bound \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@closed \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@scope \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@accumulate \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@collateral \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bind@recursively \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@recursive \\ ] \\end{align*}$$ $$\\begin{align*} \\KEY{Meta-variables} \\quad &amp; \\VAR{T} &lt;: \\FUN@values \\end{align*}$$ #### Environments $$\\begin{align*} \\KEY{Type} \\quad &amp; \\FUNDEC{environments} \\leadsto \\FUN@maps ( \\FUN@identifiers, \\FUN@values\\QUERY ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{envs} = \\FUN@environments \\end{align*}$$ An environment represents bindings of identifiers to values. Mapping an identifier to $$( \\ )$$ represents that its binding is hidden. Circularity in environments (due to recursive bindings) is represented using bindings to cut-points called $$\\FUN@links$$. Funcons are provided for making declarations recursive and for referring to bound values without explicit mention of links, so their existence can generally be ignored. $$\\begin{align*} \\KEY{Datatype} \\quad \\FUNDEC{identifiers} \\ ::= \\ &amp; \\{ \\_ : \\FUN@strings \\} \\mid \\FUNDEC{identifier-tagged}( \\_ : \\FUN@identifiers, \\_ : \\FUN@values) \\end{align*}$$ $$\\begin{align*} \\KEY{Alias} \\quad &amp; \\FUNDEC{ids} = \\FUN@identifiers \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{id-tagged} = \\FUN@identifier@tagged \\end{align*}$$ An identifier is either a string of characters, or an identifier tagged with some value (e.g., with the identifier of a namespace). $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{fresh-identifier} : \\TO \\FUN@identifiers \\end{align*}$$ $$\\FUN@fresh@identifier$$ computes an identifier distinct from all previously computed identifiers. $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@fresh@identifier \\leadsto \\FUN@identifier@tagged ( \\STRING{generated}, \\FUN@fresh@atom ) \\end{align*}$$ #### Current bindings $$\\begin{align*} \\KEY{Entity} \\quad &amp; \\FUNDEC{environment}(\\_ : \\FUN@environments) \\vdash \\_ \\TRANS \\_ \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{env} = \\FUN@environment \\end{align*}$$ The environment entity allows a computation to refer to the current bindings of identifiers to values. $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{initialise-binding}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\\\&amp;\\quad \\leadsto \\FUN@initialise@linking ( \\FUN@initialise@generating ( \\FUN@closed ( \\VAR{X} ) ) ) \\end{align*}$$ $$\\FUN@initialise@binding ( \\VAR{X} )$$ ensures that $$\\VAR{X}$$ does not depend on non-local bindings. It also ensures that the linking entity (used to represent potentially cyclic bindings) and the generating entity (for creating fresh identifiers) are initialised. $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-value}( \\VAR{I} : \\FUN@identifiers, \\VAR{V} : \\FUN@values) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto \\VAR{V} \\} \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bind} = \\FUN@bind@value \\end{align*}$$ $$\\FUN@bind@value ( \\VAR{I}, \\VAR{X} )$$ computes the environment that binds only $$\\VAR{I}$$ to the value computed by $$\\VAR{X}$$. $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{unbind}( \\VAR{I} : \\FUN@identifiers) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto ( \\ ) \\} \\end{align*}$$ $$\\FUN@unbind ( \\VAR{I} )$$ computes the environment that hides the binding of $$\\VAR{I}$$. $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-directly}( \\_ : \\FUN@identifiers) : \\TO \\FUN@values \\end{align*}$$ $$\\FUN@bound@directly ( \\VAR{I} )$$ returns the value to which $$\\VAR{I}$$ is currently bound, if any, and otherwise fails. $$\\FUN@bound@directly ( \\VAR{I} )$$ does *not* follow links. It is used only in connection with recursively-bound values when references are not encapsulated in abstractions. $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@lookup ( \\VAR{\\ensuremath{\\rho}}, \\VAR{I} ) \\leadsto ( \\VAR{V} : \\FUN@values ) }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}} ) \\vdash \\FUN@bound@directly ( \\VAR{I} : \\FUN@identifiers ) \\TRANS \\VAR{V} } \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@lookup ( \\VAR{\\ensuremath{\\rho}}, \\VAR{I} ) \\leadsto ( \\ ) }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}} ) \\vdash \\FUN@bound@directly ( \\VAR{I} : \\FUN@identifiers ) \\TRANS \\FUN@fail } \\end{align*}$$ $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-value}( \\VAR{I} : \\FUN@identifiers) : \\TO \\FUN@values \\\\&amp;\\quad \\leadsto \\FUN@follow@if@link ( \\FUN@bound@directly ( \\VAR{I} ) ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bound} = \\FUN@bound@value \\end{align*}$$ $$\\FUN@bound@value ( \\VAR{I} )$$ inspects the value to which $$\\VAR{I}$$ is currently bound, if any, and otherwise fails. If the value is a link, $$\\FUN@bound@value ( \\VAR{I} )$$ returns the value obtained by following the link, if any, and otherwise fails. If the inspected value is not a link, $$\\FUN@bound@value ( \\VAR{I} )$$ returns it. $$\\FUN@bound@value ( \\VAR{I} )$$ is used for references to non-recursive bindings and to recursively-bound values when references are encapsulated in abstractions. #### Scope $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{closed}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*}$$ $$\\FUN@closed ( \\VAR{X} )$$ ensures that $$\\VAR{X}$$ does not depend on non-local bindings. $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@environment ( \\FUN@map ( \\ ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUN@environment ( \\_ ) \\vdash \\FUN@closed ( \\VAR{X} ) \\TRANS \\FUN@closed ( \\VAR{X}' ) } \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@closed ( \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*}$$ $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{scope}( \\_ : \\FUN@environments, \\_ : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*}$$ $$\\FUN@scope ( \\VAR{D}, \\VAR{X} )$$ executes $$\\VAR{D}$$ with the current bindings, to compute an environment $$\\VAR{\\ensuremath{\\rho}}$$ representing local bindings. It then executes $$\\VAR{X}$$ to compute the result, with the current bindings extended by $$\\VAR{\\ensuremath{\\rho}}$$, which may shadow or hide previous bindings. $$\\FUN@closed ( \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}, \\VAR{X} ) )$$ ensures that $$\\VAR{X}$$ can reference only the bindings provided by $$\\VAR{\\ensuremath{\\rho}}$$. $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@environment ( \\FUN@map@override ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\VAR{\\ensuremath{\\rho}}\\SUB{0} ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}}\\SUB{0} ) \\vdash \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1} : \\FUN@environments, \\VAR{X} ) \\TRANS \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\VAR{X}' ) } \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@scope ( \\_ : \\FUN@environments, \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*}$$ $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{accumulate}( \\_ : ( \\TO \\FUN@environments )\\STAR) : \\TO \\FUN@environments \\end{align*}$$ $$\\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )$$ executes $$\\VAR{D}\\SUB{1}$$ with the current bindings, to compute an environment $$\\VAR{\\ensuremath{\\rho}}\\SUB{1}$$ representing some local bindings. It then executes $$\\VAR{D}\\SUB{2}$$ to compute an environment $$\\VAR{\\ensuremath{\\rho}}\\SUB{2}$$ representing further local bindings, with the current bindings extended by $$\\VAR{\\ensuremath{\\rho}}\\SUB{1}$$, which may shadow or hide previous current bindings. The result is $$\\VAR{\\ensuremath{\\rho}}\\SUB{1}$$ extended by $$\\VAR{\\ensuremath{\\rho}}\\SUB{2}$$, which may shadow or hide the bindings of $$\\VAR{\\ensuremath{\\rho}}\\SUB{1}$$. $$\\FUN@accumulate ( \\_, \\_ )$$ is associative, with $$\\FUN@map ( \\ )$$ as unit, and extends to any number of arguments. $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\VAR{D}\\SUB{1} \\TRANS \\VAR{D}\\SUB{1}' }{ \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} ) \\TRANS \\FUN@accumulate ( \\VAR{D}\\SUB{1}', \\VAR{D}\\SUB{2} ) } \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{\\ensuremath{\\rho}}\\SUB{1} : \\FUN@environments, \\VAR{D}\\SUB{2} ) \\leadsto \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\FUN@map@override ( \\VAR{D}\\SUB{2}, \\VAR{\\ensuremath{\\rho}}\\SUB{1} ) ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\ ) \\leadsto \\FUN@map ( \\ ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{D}\\SUB{1} ) \\leadsto \\VAR{D}\\SUB{1} \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) \\leadsto \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\FUN@accumulate ( \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) ) \\end{align*}$$ $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{collateral}( \\VAR{\\ensuremath{\\rho}}\\STAR : \\FUN@environments\\STAR) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@checked \\ \\FUN@map@unite ( \\VAR{\\ensuremath{\\rho}}\\STAR ) \\end{align*}$$ $$\\FUN@collateral ( \\VAR{D}\\SUB{1}, \\cdots )$$ pre-evaluates its arguments with the current bindings, and unites the resulting maps, which fails if the domains are not pairwise disjoint. $$\\FUN@collateral ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )$$ is associative and commutative with $$\\FUN@map ( \\ )$$ as unit, and extends to any number of arguments. #### Recurse $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-recursively}( \\VAR{I} : \\FUN@identifiers, \\VAR{E} : \\TO \\FUN@values) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@recursive ( \\{ \\VAR{I} \\}, \\FUN@bind@value ( \\VAR{I}, \\VAR{E} ) ) \\end{align*}$$ $$\\FUN@bind@recursively ( \\VAR{I}, \\VAR{E} )$$ binds $$\\VAR{I}$$ to a link that refers to the value of $$\\VAR{E}$$, representing a recursive binding of $$\\VAR{I}$$ to the value of $$\\VAR{E}$$. Since $$\\FUN@bound@value ( \\VAR{I} )$$ follows links, it should not be executed during the evaluation of $$\\VAR{E}$$. $$\\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{recursive}( \\VAR{SI} : \\FUN@sets ( \\FUN@identifiers ), \\VAR{D} : \\TO \\FUN@environments) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@re@close ( \\FUN@bind@to@forward@links ( \\VAR{SI} ), \\VAR{D} ) \\end{align*}$$ $$\\FUN@recursive ( \\VAR{SI}, \\VAR{D} )$$ executes $$\\VAR{D}$$ with potential recursion on the bindings of the identifiers in the set $$\\VAR{SI}$$ (which need not be the same as the set of identifiers bound by $$\\VAR{D}$$). $$\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{re-close}( \\VAR{M} : \\FUN@maps ( \\FUN@identifiers, \\FUN@links ), \\VAR{D} : \\TO \\FUN@environments) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@accumulate ( \\FUN@scope ( \\VAR{M}, \\VAR{D} ), \\FUN@sequential ( \\FUN@set@forward@links ( \\VAR{M} ), \\FUN@map ( \\ ) ) ) \\end{align*}$$ $$\\FUN@re@close ( \\VAR{M}, \\VAR{D} )$$ first executes $$\\VAR{D}$$ in the scope $$\\VAR{M}$$, which maps identifiers to freshly allocated links. This computes an environment $$\\VAR{\\ensuremath{\\rho}}$$ where the bound values may contain links, or implicit references to links in abstraction values. It then sets the link for each identifier in the domain of $$\\VAR{M}$$ to refer to its bound value in $$\\VAR{\\ensuremath{\\rho}}$$, and returns $$\\VAR{\\ensuremath{\\rho}}$$ as the result. $$\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{bind-to-forward-links}( \\VAR{SI} : \\FUN@sets ( \\FUN@identifiers )) : \\TO \\FUN@maps ( \\FUN@identifiers, \\FUN@links ) \\\\&amp;\\quad \\leadsto \\FUN@map@unite ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUN@interleave@map ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@bind@value ( \\FUN@given, \\FUN@fresh@link ( \\FUN@values ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@elements ( \\VAR{SI} ) ) ) \\end{align*}$$ $$\\FUN@bind@to@forward@links ( \\VAR{SI} )$$ binds each identifier in the set $$\\VAR{SI}$$ to a freshly allocated link. $$\\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{set-forward-links}( \\VAR{M} : \\FUN@maps ( \\FUN@identifiers, \\FUN@links )) : \\TO \\FUN@null@type \\\\&amp;\\quad \\leadsto \\FUN@effect ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUN@interleave@map ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@link ( \\FUN@map@lookup ( \\VAR{M}, \\FUN@given ), \\FUN@bound@value ( \\FUN@given ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@elements ( \\FUN@map@domain ( \\VAR{M} ) ) ) ) \\end{align*}$$ For each identifier $$\\VAR{I}$$ in the domain of $$\\VAR{M}$$, $$\\FUN@set@forward@links ( \\VAR{M} )$$ sets the link to which $$\\VAR{I}$$ is mapped by $$\\VAR{M}$$ to the current bound value of $$\\VAR{I}$$. [Funcons-beta]: /CBS-beta/math/Funcons-beta \"FUNCONS-BETA\" [Unstable-Funcons-beta]: /CBS-beta/math/Unstable-Funcons-beta \"UNSTABLE-FUNCONS-BETA\" [Languages-beta]: /CBS-beta/math/Languages-beta \"LANGUAGES-BETA\" [Unstable-Languages-beta]: /CBS-beta/math/Unstable-Languages-beta \"UNSTABLE-LANGUAGES-BETA\" [CBS-beta]: /CBS-beta \"CBS-BETA\" [Binding.cbs]: https://github.com/plancomps/CBS-beta/blob/math/Funcons-beta/Computations/Normal/Binding/Binding.cbs \"CBS SOURCE FILE ON GITHUB\" [PLAIN]: /CBS-beta/docs/Funcons-beta/Computations/Normal/Binding \"CBS SOURCE WEB PAGE\" [PRETTY]: /CBS-beta/math/Funcons-beta/Computations/Normal/Binding \"CBS-KATEX WEB PAGE\" [PDF]: /CBS-beta/math/Funcons-beta/Computations/Normal/Binding/Binding.pdf \"CBS-LATEX PDF FILE\" [PLanCompS Project]: https://plancomps.github.io \"PROGRAMMING LANGUAGE COMPONENTS AND SPECIFICATIONS PROJECT HOME PAGE\" {::comment}{:/} . ",
    "url": "/cbs-latex/docs/kramdown/Binding.md.html",
    "relUrl": "/docs/kramdown/Binding.md.html"
  },"4": {
    "doc": "Binding.part.tex",
    "title": "Binding.part.tex",
    "content": "% OUTLINE \\tableofcontents \\begin{center} \\rule{3in}{0.4pt} \\end{center} \\subsubsection{Binding}\\hypertarget{binding}{}\\label{binding} \\begin{align*} [ \\ \\KEY{Type} \\quad &amp; \\FUN@environments \\\\ \\KEY{Alias} \\quad &amp; \\FUN@envs \\\\ \\KEY{Datatype} \\quad &amp; \\FUN@identifiers \\\\ \\KEY{Alias} \\quad &amp; \\FUN@ids \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@identifier@tagged \\\\ \\KEY{Alias} \\quad &amp; \\FUN@id@tagged \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@fresh@identifier \\\\ \\KEY{Entity} \\quad &amp; \\FUN@environment \\\\ \\KEY{Alias} \\quad &amp; \\FUN@env \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@initialise@binding \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bind@value \\\\ \\KEY{Alias} \\quad &amp; \\FUN@bind \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@unbind \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bound@directly \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bound@value \\\\ \\KEY{Alias} \\quad &amp; \\FUN@bound \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@closed \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@scope \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@accumulate \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@collateral \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@bind@recursively \\\\ \\KEY{Funcon} \\quad &amp; \\FUN@recursive \\ ] \\end{align*} \\begin{align*} \\KEY{Meta-variables} \\quad &amp; \\VAR{T} &lt;: \\FUN@values \\end{align*} \\paragraph{Environments}\\hypertarget{environments}{}\\label{environments} \\begin{align*} \\KEY{Type} \\quad &amp; \\FUNDEC{environments} \\leadsto \\FUN@maps ( \\FUN@identifiers, \\FUN@values\\QUERY ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{envs} = \\FUN@environments \\end{align*} An environment represents bindings of identifiers to values. Mapping an identifier to $( \\ )$ represents that its binding is hidden. Circularity in environments (due to recursive bindings) is represented using bindings to cut-points called $\\FUN@links$. Funcons are provided for making declarations recursive and for referring to bound values without explicit mention of links, so their existence can generally be ignored. \\begin{align*} \\KEY{Datatype} \\quad \\FUNDEC{identifiers} \\ ::= \\ &amp; \\{ \\_ : \\FUN@strings \\} \\mid \\FUNDEC{identifier-tagged}( \\_ : \\FUN@identifiers, \\_ : \\FUN@values) \\end{align*} \\begin{align*} \\KEY{Alias} \\quad &amp; \\FUNDEC{ids} = \\FUN@identifiers \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{id-tagged} = \\FUN@identifier@tagged \\end{align*} An identifier is either a string of characters, or an identifier tagged with some value (e.g., with the identifier of a namespace). \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{fresh-identifier} : \\TO \\FUN@identifiers \\end{align*} $\\FUN@fresh@identifier$ computes an identifier distinct from all previously computed identifiers. \\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@fresh@identifier \\leadsto \\FUN@identifier@tagged ( \\STRING{generated}, \\FUN@fresh@atom ) \\end{align*} \\paragraph{Current bindings}\\hypertarget{current-bindings}{}\\label{current-bindings} \\begin{align*} \\KEY{Entity} \\quad &amp; \\FUNDEC{environment}(\\_ : \\FUN@environments) \\vdash \\_ \\TRANS \\_ \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{env} = \\FUN@environment \\end{align*} The environment entity allows a computation to refer to the current bindings of identifiers to values. \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{initialise-binding}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\\\&amp;\\quad \\leadsto \\FUN@initialise@linking ( \\FUN@initialise@generating ( \\FUN@closed ( \\VAR{X} ) ) ) \\end{align*} $\\FUN@initialise@binding ( \\VAR{X} )$ ensures that $\\VAR{X}$ does not depend on non-local bindings. It also ensures that the linking entity (used to represent potentially cyclic bindings) and the generating entity (for creating fresh identifiers) are initialised. \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-value}( \\VAR{I} : \\FUN@identifiers, \\VAR{V} : \\FUN@values) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto \\VAR{V} \\} \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bind} = \\FUN@bind@value \\end{align*} $\\FUN@bind@value ( \\VAR{I}, \\VAR{X} )$ computes the environment that binds only $\\VAR{I}$ to the value computed by $\\VAR{X}$. \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{unbind}( \\VAR{I} : \\FUN@identifiers) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\{ \\VAR{I} \\mapsto ( \\ ) \\} \\end{align*} $\\FUN@unbind ( \\VAR{I} )$ computes the environment that hides the binding of $\\VAR{I}$. \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-directly}( \\_ : \\FUN@identifiers) : \\TO \\FUN@values \\end{align*} $\\FUN@bound@directly ( \\VAR{I} )$ returns the value to which $\\VAR{I}$ is currently bound, if any, and otherwise fails. $\\FUN@bound@directly ( \\VAR{I} )$ does \\emph{not} follow links. It is used only in connection with recursively-bound values when references are not encapsulated in abstractions. \\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@lookup ( \\VAR{\\ensuremath{\\rho}}, \\VAR{I} ) \\leadsto ( \\VAR{V} : \\FUN@values ) }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}} ) \\vdash \\FUN@bound@directly ( \\VAR{I} : \\FUN@identifiers ) \\TRANS \\VAR{V} } \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@lookup ( \\VAR{\\ensuremath{\\rho}}, \\VAR{I} ) \\leadsto ( \\ ) }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}} ) \\vdash \\FUN@bound@directly ( \\VAR{I} : \\FUN@identifiers ) \\TRANS \\FUN@fail } \\end{align*} \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bound-value}( \\VAR{I} : \\FUN@identifiers) : \\TO \\FUN@values \\\\&amp;\\quad \\leadsto \\FUN@follow@if@link ( \\FUN@bound@directly ( \\VAR{I} ) ) \\\\ \\KEY{Alias} \\quad &amp; \\FUNDEC{bound} = \\FUN@bound@value \\end{align*} $\\FUN@bound@value ( \\VAR{I} )$ inspects the value to which $\\VAR{I}$ is currently bound, if any, and otherwise fails. If the value is a link, $\\FUN@bound@value ( \\VAR{I} )$ returns the value obtained by following the link, if any, and otherwise fails. If the inspected value is not a link, $\\FUN@bound@value ( \\VAR{I} )$ returns it. $\\FUN@bound@value ( \\VAR{I} )$ is used for references to non-recursive bindings and to recursively-bound values when references are encapsulated in abstractions. \\paragraph{Scope}\\hypertarget{scope}{}\\label{scope} \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{closed}( \\VAR{X} : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*} $\\FUN@closed ( \\VAR{X} )$ ensures that $\\VAR{X}$ does not depend on non-local bindings. \\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@environment ( \\FUN@map ( \\ ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUN@environment ( \\_ ) \\vdash \\FUN@closed ( \\VAR{X} ) \\TRANS \\FUN@closed ( \\VAR{X}' ) } \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@closed ( \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*} \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{scope}( \\_ : \\FUN@environments, \\_ : \\TO \\VAR{T}) : \\TO \\VAR{T} \\end{align*} $\\FUN@scope ( \\VAR{D}, \\VAR{X} )$ executes $\\VAR{D}$ with the current bindings, to compute an environment $\\VAR{\\ensuremath{\\rho}}$ representing local bindings. It then executes $\\VAR{X}$ to compute the result, with the current bindings extended by $\\VAR{\\ensuremath{\\rho}}$, which may shadow or hide previous bindings. $\\FUN@closed ( \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}, \\VAR{X} ) )$ ensures that $\\VAR{X}$ can reference only the bindings provided by $\\VAR{\\ensuremath{\\rho}}$. \\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\FUN@environment ( \\FUN@map@override ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\VAR{\\ensuremath{\\rho}}\\SUB{0} ) ) \\vdash \\VAR{X} \\TRANS \\VAR{X}' }{ \\FUN@environment ( \\VAR{\\ensuremath{\\rho}}\\SUB{0} ) \\vdash \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1} : \\FUN@environments, \\VAR{X} ) \\TRANS \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\VAR{X}' ) } \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@scope ( \\_ : \\FUN@environments, \\VAR{V} : \\VAR{T} ) \\leadsto \\VAR{V} \\end{align*} \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{accumulate}( \\_ : ( \\TO \\FUN@environments )\\STAR) : \\TO \\FUN@environments \\end{align*} $\\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )$ executes $\\VAR{D}\\SUB{1}$ with the current bindings, to compute an environment $\\VAR{\\ensuremath{\\rho}}\\SUB{1}$ representing some local bindings. It then executes $\\VAR{D}\\SUB{2}$ to compute an environment $\\VAR{\\ensuremath{\\rho}}\\SUB{2}$ representing further local bindings, with the current bindings extended by $\\VAR{\\ensuremath{\\rho}}\\SUB{1}$, which may shadow or hide previous current bindings. The result is $\\VAR{\\ensuremath{\\rho}}\\SUB{1}$ extended by $\\VAR{\\ensuremath{\\rho}}\\SUB{2}$, which may shadow or hide the bindings of $\\VAR{\\ensuremath{\\rho}}\\SUB{1}$. $\\FUN@accumulate ( \\_, \\_ )$ is associative, with $\\FUN@map ( \\ )$ as unit, and extends to any number of arguments. \\begin{align*} \\KEY{Rule} \\quad &amp; \\RULE{ \\VAR{D}\\SUB{1} \\TRANS \\VAR{D}\\SUB{1}' }{ \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} ) \\TRANS \\FUN@accumulate ( \\VAR{D}\\SUB{1}', \\VAR{D}\\SUB{2} ) } \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{\\ensuremath{\\rho}}\\SUB{1} : \\FUN@environments, \\VAR{D}\\SUB{2} ) \\leadsto \\FUN@scope ( \\VAR{\\ensuremath{\\rho}}\\SUB{1}, \\FUN@map@override ( \\VAR{D}\\SUB{2}, \\VAR{\\ensuremath{\\rho}}\\SUB{1} ) ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\ ) \\leadsto \\FUN@map ( \\ ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{D}\\SUB{1} ) \\leadsto \\VAR{D}\\SUB{1} \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) \\leadsto \\FUN@accumulate ( \\VAR{D}\\SUB{1}, \\FUN@accumulate ( \\VAR{D}\\SUB{2}, \\VAR{D}\\PLUS ) ) \\end{align*} \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{collateral}( \\VAR{\\ensuremath{\\rho}}\\STAR : \\FUN@environments\\STAR) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@checked \\ \\FUN@map@unite ( \\VAR{\\ensuremath{\\rho}}\\STAR ) \\end{align*} $\\FUN@collateral ( \\VAR{D}\\SUB{1}, \\cdots )$ pre-evaluates its arguments with the current bindings, and unites the resulting maps, which fails if the domains are not pairwise disjoint. $\\FUN@collateral ( \\VAR{D}\\SUB{1}, \\VAR{D}\\SUB{2} )$ is associative and commutative with $\\FUN@map ( \\ )$ as unit, and extends to any number of arguments. \\paragraph{Recurse}\\hypertarget{recurse}{}\\label{recurse} \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{bind-recursively}( \\VAR{I} : \\FUN@identifiers, \\VAR{E} : \\TO \\FUN@values) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@recursive ( \\{ \\VAR{I} \\}, \\FUN@bind@value ( \\VAR{I}, \\VAR{E} ) ) \\end{align*} $\\FUN@bind@recursively ( \\VAR{I}, \\VAR{E} )$ binds $\\VAR{I}$ to a link that refers to the value of $\\VAR{E}$, representing a recursive binding of $\\VAR{I}$ to the value of $\\VAR{E}$. Since $\\FUN@bound@value ( \\VAR{I} )$ follows links, it should not be executed during the evaluation of $\\VAR{E}$. \\begin{align*} \\KEY{Funcon} \\quad &amp; \\FUNDEC{recursive}( \\VAR{SI} : \\FUN@sets ( \\FUN@identifiers ), \\VAR{D} : \\TO \\FUN@environments) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@re@close ( \\FUN@bind@to@forward@links ( \\VAR{SI} ), \\VAR{D} ) \\end{align*} $\\FUN@recursive ( \\VAR{SI}, \\VAR{D} )$ executes $\\VAR{D}$ with potential recursion on the bindings of the identifiers in the set $\\VAR{SI}$ (which need not be the same as the set of identifiers bound by $\\VAR{D}$). \\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{re-close}( \\VAR{M} : \\FUN@maps ( \\FUN@identifiers, \\FUN@links ), \\VAR{D} : \\TO \\FUN@environments) : \\TO \\FUN@environments \\\\&amp;\\quad \\leadsto \\FUN@accumulate ( \\FUN@scope ( \\VAR{M}, \\VAR{D} ), \\FUN@sequential ( \\FUN@set@forward@links ( \\VAR{M} ), \\FUN@map ( \\ ) ) ) \\end{align*} $\\FUN@re@close ( \\VAR{M}, \\VAR{D} )$ first executes $\\VAR{D}$ in the scope $\\VAR{M}$, which maps identifiers to freshly allocated links. This computes an environment $\\VAR{\\ensuremath{\\rho}}$ where the bound values may contain links, or implicit references to links in abstraction values. It then sets the link for each identifier in the domain of $\\VAR{M}$ to refer to its bound value in $\\VAR{\\ensuremath{\\rho}}$, and returns $\\VAR{\\ensuremath{\\rho}}$ as the result. \\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{bind-to-forward-links}( \\VAR{SI} : \\FUN@sets ( \\FUN@identifiers )) : \\TO \\FUN@maps ( \\FUN@identifiers, \\FUN@links ) \\\\&amp;\\quad \\leadsto \\FUN@map@unite ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUN@interleave@map ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@bind@value ( \\FUN@given, \\FUN@fresh@link ( \\FUN@values ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@elements ( \\VAR{SI} ) ) ) \\end{align*} $\\FUN@bind@to@forward@links ( \\VAR{SI} )$ binds each identifier in the set $\\VAR{SI}$ to a freshly allocated link. \\begin{align*} \\KEY{Auxiliary Funcon} \\quad &amp; \\FUNDEC{set-forward-links}( \\VAR{M} : \\FUN@maps ( \\FUN@identifiers, \\FUN@links )) : \\TO \\FUN@null@type \\\\&amp;\\quad \\leadsto \\FUN@effect ( \\\\&amp;\\quad\\quad\\quad\\quad \\FUN@interleave@map ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@link ( \\FUN@map@lookup ( \\VAR{M}, \\FUN@given ), \\FUN@bound@value ( \\FUN@given ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\FUN@set@elements ( \\FUN@map@domain ( \\VAR{M} ) ) ) ) \\end{align*} For each identifier $\\VAR{I}$ in the domain of $\\VAR{M}$, $\\FUN@set@forward@links ( \\VAR{M} )$ sets the link to which $\\VAR{I}$ is mapped by $\\VAR{M}$ to the current bound value of $\\VAR{I}$. % . ",
    "url": "/cbs-latex/docs/latex/Binding/Binding.part.tex.html",
    "relUrl": "/docs/latex/Binding/Binding.part.tex.html"
  },"5": {
    "doc": "LNCS",
    "title": "Fundamental Constructs in Programming Languages",
    "content": "Extracts for testing MathJax . Abstract . The body of this document consists of fragments of the published article. It is for use in testing the formatting of mathematical formulae in paragraphs, inline displays, and floating figures by \\(\\LaTeX\\) and MathJax. ",
    "url": "/cbs-latex/docs/mathjax-3/LNCS.html#fundamental-constructs-in-programming-languages",
    "relUrl": "/docs/mathjax-3/LNCS.html#fundamental-constructs-in-programming-languages"
  },"6": {
    "doc": "LNCS",
    "title": "Introduction",
    "content": "Version control is superfluous for funcons; translations of language constructs to funcons, in contrast, may need to change when the specified language evolves. For example, the illustrative language IMP includes a plain old while-loop with a Boolean-valued condition: `\\(\\mathtt{while} \\mathtt{(} \\VAR{BExp} \\mathtt{)} \\VAR{Block}\\)’. The following rule translates it to the funcon \\(\\NAME{while-true}\\), which has exactly the required behaviour: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) \\end{align*}\\] The behaviour of the funcon \\(\\NAME{while-true}\\) is fixed. But suppose the IMP language evolves, and a \\(\\VAR{Block}\\) can now execute a statement `\\(\\mathtt{break;}\\)’, which is supposed to terminate just the closest enclosing while-loop. We can extend the translation with the following rule: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{break} \\ \\LEX{;} \\ \\RIGHTPHRASE = \\NAME{abrupt}(\\NAME{broken}) \\end{align*}\\] The translation of `\\(\\mathtt{while(true)\\{break;\\}}\\)’ is \\(\\NAME{while-true}(\\NAME{true}, \\NAME{abrupt}(\\NAME{broken}))\\). The funcon \\(\\NAME{abrupt}(V)\\) terminates execution abruptly, signalling its argument value \\(V\\) as the reason for termination. However, the behaviour of \\(\\NAME{while-true}(\\NAME{true}, X)\\) is to terminate abruptly whenever \\(X\\) does – so this translation would lead to abrupt termination of all enclosing while-loops! . We cannot change the definition of \\(\\NAME{while-true}\\), so we are forced to change the translation rule. The following updated translation rule reflects the extension of the behaviour of while-loops with the intended handling of abrupt termination due to break-statements, and that they propagate abrupt termination for any other reason: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{handle-abrupt} ( \\\\&amp;\\quad\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ),\\\\&amp;\\quad\\quad \\NAME{if-true-else} ( \\NAME{is-equal} ( \\NAME{given}, \\NAME{broken}), \\NAME{null-value}, \\NAME{abrupt}(\\NAME{given}))) \\end{align*}\\] Computing \\(\\NAME{null-value}\\) represents normal termination; \\(\\NAME{given}\\) refers to the reason for the abrupt termination. The specialised funcon \\(\\NAME{handle-break}\\) can be used to specify the same behaviour more concisely: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{handle-break} ( %\\\\&amp;\\quad\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE )) \\end{align*}\\] Wrapping \\(\\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE\\) in \\(\\NAME{handle-continue}\\) would also support abrupt termination of the current \\emph{iteration} due to executing a continue-statement. ",
    "url": "/cbs-latex/docs/mathjax-3/LNCS.html#introduction",
    "relUrl": "/docs/mathjax-3/LNCS.html#introduction"
  },"7": {
    "doc": "LNCS",
    "title": "The Nature of Funcons",
    "content": "Funcons are often independent, but not always. For instance, the definition of the funcon \\(\\NAME{while-true}\\) specifies the reduction of \\(\\NAME{while-true}(B, X)\\) to a term involving the funcons \\(\\NAME{if-true-else}\\) and \\(\\NAME{sequential}\\): . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\NAME{while-true}( B : \\TO \\NAME{booleans}, X : \\TO \\NAME{null-type}) : \\TO \\NAME{null-type} \\\\&amp;\\quad \\leadsto \\NAME{if-true-else} ( B, \\NAME{sequential} ( X, \\NAME{while-true} ( B, X ) ), \\NAME{null-value} ) \\end{align*}\\] ",
    "url": "/cbs-latex/docs/mathjax-3/LNCS.html#the-nature-of-funcons",
    "relUrl": "/docs/mathjax-3/LNCS.html#the-nature-of-funcons"
  },"8": {
    "doc": "LNCS",
    "title": "Translation of Language Constructs to Funcons",
    "content": "The translation specification in Fig. 1 declares \\(\\SYN{exp}\\) as a phrase sort, with the meta-variable \\(\\VAR{Exp}\\) (possibly with subscripts and/or primes) ranging over phrases of that sort. The BNF-like production shows two language constructs of sort \\(\\SYN{exp}\\): an identifier of sort \\(\\SYN{id}\\) (lexical tokens, here assumed to be specified elsewhere with meta-variable \\(\\VAR{Id}\\)) and a function application written `\\(\\VAR{Exp}_1 \\mathtt{(} \\VAR{Exp}_2\\mathtt{)}\\)’. \\[\\begin{align*} \\KEY{Syntax} \\quad \\VAR{Exp} : \\SYN{exp} ::= \\cdots \\mid \\SYN{id} \\mid \\SYN{exp} \\ \\LEX{(} \\ \\SYN{exp} \\ \\LEX{)} \\mid \\cdots \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\_ : \\SYN{exp} \\ \\RIGHTPHRASE : \\TO \\NAME{values} \\\\ \\KEY{Rule} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE = \\NAME{assigned-value} ( \\NAME{bound-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE ) ) \\\\ \\KEY{Rule} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_1 \\ \\LEX{(} \\ \\VAR{Exp}_2 \\ \\LEX{)} \\ \\RIGHTPHRASE = \\NAME{apply} ( \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_1 \\ \\RIGHTPHRASE , \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_2 \\ \\RIGHTPHRASE ) \\end{align*}\\] The translation specification for function declarations in Fig. 2 assumes a translation function \\(\\SEM{exec}\\LEFTPHRASE \\VAR{Block} \\RIGHTPHRASE\\) for phrases \\(\\VAR{Block}\\) of sort \\(\\SYN{block}\\). A block is a statement, which normally computes a null value; but here, as in many languages, a block can return an expression value by executing a return statement, which terminates the execution of the block abruptly. \\[\\begin{align*} \\KEY{Syntax} \\quad \\VAR{Decl} : \\SYN{decl} ::= \\cdots \\mid \\LEX{function} \\ \\SYN{id} \\ \\LEX{(} \\ \\SYN{id} \\ \\LEX{)} \\ \\SYN{block} \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEM{declare} \\LEFTPHRASE \\ \\_ : \\SYN{decl} \\ \\RIGHTPHRASE : \\TO \\NAME{environments} \\\\[1ex] \\KEY{Rule} \\quad &amp; \\SEM{declare} \\LEFTPHRASE \\ \\LEX{function} \\ \\VAR{Id}_1 \\ \\LEX{(} \\ \\VAR{Id}_2 \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{bind-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id}_1 \\ \\RIGHTPHRASE , \\\\&amp;\\quad\\quad \\NAME{allocate-initialised-variable} ( \\NAME{functions} ( \\NAME{values}, \\NAME{values} ), \\\\&amp;\\quad\\quad\\quad \\NAME{function} ( \\NAME{closure} ( \\\\&amp;\\quad\\quad\\quad\\quad \\NAME{scope} ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\NAME{bind-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id}_2 \\ \\RIGHTPHRASE ,\\\\&amp;\\quad\\quad\\quad\\quad\\quad\\quad \\NAME{allocate-initialised-variable} ( \\NAME{values}, \\NAME{given} ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\NAME{handle-return} ( \\SEM{exec} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) ) ) ) ) ) \\end{align*}\\] ",
    "url": "/cbs-latex/docs/mathjax-3/LNCS.html#translation-of-language-constructs-to-funcons",
    "relUrl": "/docs/mathjax-3/LNCS.html#translation-of-language-constructs-to-funcons"
  },"9": {
    "doc": "LNCS",
    "title": "Defining and Implementing Funcons",
    "content": "The funcon signature in Fig. 3 specifies that \\(\\NAME{scope}\\) takes two arguments. The first argument is required to be pre-evaluated to a value of type \\(\\NAME{environments}\\); the second argument should be unevaluated, as indicated by `\\(\\TO T\\)’. Values computed by \\(\\NAME{scope}( \\rho_1, X )\\) are to have the same type (\\(T\\)) as the values computed by \\(X\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\NAME{scope}( \\_ : \\NAME{environments}, \\_ : \\TO T) : \\TO T \\\\ \\KEY{Rule} \\quad &amp; \\RULE{ \\NAME{environment} ( \\NAME{map-override} ( \\rho_1, \\rho_0 ) ) \\vdash X \\TRANS X' }{ \\NAME{environment} ( \\rho_0 ) \\vdash \\NAME{scope} ( \\rho_1 : \\NAME{environments}, X ) \\TRANS \\NAME{scope} ( \\rho_1, X' ) } \\\\ \\KEY{Rule} \\quad &amp; \\NAME{scope} ( \\_ : \\NAME{environments}, V : T ) \\leadsto V \\end{align*}\\] The rules define how evaluation of \\(\\NAME{scope}( \\rho_1, X )\\) can proceed when the current bindings are represented by \\(\\rho_0\\). The premise of the first rule holds if \\(X\\) can make a transition to \\(X'\\) when \\(\\rho_1\\) overrides the current bindings \\(\\rho_0\\). Whether \\(X'\\) is a computed value or an intermediate term is irrelevant. When the premise holds, the conclusion is that \\(\\NAME{scope}( \\rho_1, X )\\) can make a transition to \\(\\NAME{scope}( \\rho_1, X' )\\). ",
    "url": "/cbs-latex/docs/mathjax-3/LNCS.html#defining-and-implementing-funcons",
    "relUrl": "/docs/mathjax-3/LNCS.html#defining-and-implementing-funcons"
  },"10": {
    "doc": "LNCS",
    "title": "LNCS",
    "content": "\\[\\newcommand{\\NAME}[1]{\\FUN{#1}}\\] This page is using MathJax-3. See the same page using MathJax-2.7. Links to non-local declarations are disabled on this sample page. ",
    "url": "/cbs-latex/docs/mathjax-3/LNCS.html",
    "relUrl": "/docs/mathjax-3/LNCS.html"
  },"11": {
    "doc": "LNCS",
    "title": "Fundamental Constructs in Programming Languages",
    "content": "Extracts for testing MathJax . Abstract . The body of this document consists of fragments of the published article. It is for use in testing the formatting of mathematical formulae in paragraphs, inline displays, and floating figures by \\(\\LaTeX\\) and MathJax. ",
    "url": "/cbs-latex/docs/katex/LNCS.html#fundamental-constructs-in-programming-languages",
    "relUrl": "/docs/katex/LNCS.html#fundamental-constructs-in-programming-languages"
  },"12": {
    "doc": "LNCS",
    "title": "Introduction",
    "content": "Version control is superfluous for funcons; translations of language constructs to funcons, in contrast, may need to change when the specified language evolves. For example, the illustrative language IMP includes a plain old while-loop with a Boolean-valued condition: `\\(\\mathtt{while} \\mathtt{(} \\VAR{BExp} \\mathtt{)} \\VAR{Block}\\)’. The following rule translates it to the funcon \\(\\NAME{while-true}\\), which has exactly the required behaviour: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) \\end{align*}\\] The behaviour of the funcon \\(\\NAME{while-true}\\) is fixed. But suppose the IMP language evolves, and a \\(\\VAR{Block}\\) can now execute a statement `\\(\\mathtt{break;}\\)’, which is supposed to terminate just the closest enclosing while-loop. We can extend the translation with the following rule: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{break} \\ \\LEX{;} \\ \\RIGHTPHRASE = \\NAME{abrupt}(\\NAME{broken}) \\end{align*}\\] The translation of `\\(\\mathtt{while(true)\\{break;\\}}\\)’ is \\(\\NAME{while-true}(\\NAME{true}, \\NAME{abrupt}(\\NAME{broken}))\\). The funcon \\(\\NAME{abrupt}(V)\\) terminates execution abruptly, signalling its argument value \\(V\\) as the reason for termination. However, the behaviour of \\(\\NAME{while-true}(\\NAME{true}, X)\\) is to terminate abruptly whenever \\(X\\) does – so this translation would lead to abrupt termination of all enclosing while-loops! . We cannot change the definition of \\(\\NAME{while-true}\\), so we are forced to change the translation rule. The following updated translation rule reflects the extension of the behaviour of while-loops with the intended handling of abrupt termination due to break-statements, and that they propagate abrupt termination for any other reason: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{handle-abrupt} ( \\\\&amp;\\quad\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ),\\\\&amp;\\quad\\quad \\NAME{if-true-else} ( \\NAME{is-equal} ( \\NAME{given}, \\NAME{broken}), \\NAME{null-value}, \\NAME{abrupt}(\\NAME{given}))) \\end{align*}\\] Computing \\(\\NAME{null-value}\\) represents normal termination; \\(\\NAME{given}\\) refers to the reason for the abrupt termination. The specialised funcon \\(\\NAME{handle-break}\\) can be used to specify the same behaviour more concisely: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{handle-break} ( %\\\\&amp;\\quad\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE )) \\end{align*}\\] Wrapping \\(\\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE\\) in \\(\\NAME{handle-continue}\\) would also support abrupt termination of the current \\emph{iteration} due to executing a continue-statement. ",
    "url": "/cbs-latex/docs/katex/LNCS.html#introduction",
    "relUrl": "/docs/katex/LNCS.html#introduction"
  },"13": {
    "doc": "LNCS",
    "title": "The Nature of Funcons",
    "content": "Funcons are often independent, but not always. For instance, the definition of the funcon \\(\\NAME{while-true}\\) specifies the reduction of \\(\\NAME{while-true}(B, X)\\) to a term involving the funcons \\(\\NAME{if-true-else}\\) and \\(\\NAME{sequential}\\): . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\NAME{while-true}( B : \\TO \\NAME{booleans}, X : \\TO \\NAME{null-type}) : \\TO \\NAME{null-type} \\\\&amp;\\quad \\leadsto \\NAME{if-true-else} ( B, \\NAME{sequential} ( X, \\NAME{while-true} ( B, X ) ), \\NAME{null-value} ) \\end{align*}\\] ",
    "url": "/cbs-latex/docs/katex/LNCS.html#the-nature-of-funcons",
    "relUrl": "/docs/katex/LNCS.html#the-nature-of-funcons"
  },"14": {
    "doc": "LNCS",
    "title": "Translation of Language Constructs to Funcons",
    "content": "The translation specification in Fig. 1 declares \\(\\SYN{exp}\\) as a phrase sort, with the meta-variable \\(\\VAR{Exp}\\) (possibly with subscripts and/or primes) ranging over phrases of that sort. The BNF-like production shows two language constructs of sort \\(\\SYN{exp}\\): an identifier of sort \\(\\SYN{id}\\) (lexical tokens, here assumed to be specified elsewhere with meta-variable \\(\\VAR{Id}\\)) and a function application written `\\(\\VAR{Exp}_1 \\mathtt{(} \\VAR{Exp}_2\\mathtt{)}\\)’. \\[\\begin{align*} \\KEY{Syntax} \\quad \\VAR{Exp} : \\SYN{exp} ::= \\cdots \\mid \\SYN{id} \\mid \\SYN{exp} \\ \\LEX{(} \\ \\SYN{exp} \\ \\LEX{)} \\mid \\cdots \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\_ : \\SYN{exp} \\ \\RIGHTPHRASE : \\TO \\NAME{values} \\\\ \\KEY{Rule} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE = \\NAME{assigned-value} ( \\NAME{bound-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE ) ) \\\\ \\KEY{Rule} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_1 \\ \\LEX{(} \\ \\VAR{Exp}_2 \\ \\LEX{)} \\ \\RIGHTPHRASE = \\NAME{apply} ( \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_1 \\ \\RIGHTPHRASE , \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_2 \\ \\RIGHTPHRASE ) \\end{align*}\\] The translation specification for function declarations in Fig. 2 assumes a translation function \\(\\SEM{exec}\\LEFTPHRASE \\VAR{Block} \\RIGHTPHRASE\\) for phrases \\(\\VAR{Block}\\) of sort \\(\\SYN{block}\\). A block is a statement, which normally computes a null value; but here, as in many languages, a block can return an expression value by executing a return statement, which terminates the execution of the block abruptly. \\[\\begin{align*} \\KEY{Syntax} \\quad \\VAR{Decl} : \\SYN{decl} ::= \\cdots \\mid \\LEX{function} \\ \\SYN{id} \\ \\LEX{(} \\ \\SYN{id} \\ \\LEX{)} \\ \\SYN{block} \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEM{declare} \\LEFTPHRASE \\ \\_ : \\SYN{decl} \\ \\RIGHTPHRASE : \\TO \\NAME{environments} \\\\[1ex] \\KEY{Rule} \\quad &amp; \\SEM{declare} \\LEFTPHRASE \\ \\LEX{function} \\ \\VAR{Id}_1 \\ \\LEX{(} \\ \\VAR{Id}_2 \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{bind-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id}_1 \\ \\RIGHTPHRASE , \\\\&amp;\\quad\\quad \\NAME{allocate-initialised-variable} ( \\NAME{functions} ( \\NAME{values}, \\NAME{values} ), \\\\&amp;\\quad\\quad\\quad \\NAME{function} ( \\NAME{closure} ( \\\\&amp;\\quad\\quad\\quad\\quad \\NAME{scope} ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\NAME{bind-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id}_2 \\ \\RIGHTPHRASE ,\\\\&amp;\\quad\\quad\\quad\\quad\\quad\\quad \\NAME{allocate-initialised-variable} ( \\NAME{values}, \\NAME{given} ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\NAME{handle-return} ( \\SEM{exec} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) ) ) ) ) ) \\end{align*}\\] ",
    "url": "/cbs-latex/docs/katex/LNCS.html#translation-of-language-constructs-to-funcons",
    "relUrl": "/docs/katex/LNCS.html#translation-of-language-constructs-to-funcons"
  },"15": {
    "doc": "LNCS",
    "title": "Defining and Implementing Funcons",
    "content": "The funcon signature in Fig. 3 specifies that \\(\\NAME{scope}\\) takes two arguments. The first argument is required to be pre-evaluated to a value of type \\(\\NAME{environments}\\); the second argument should be unevaluated, as indicated by `\\(\\TO T\\)’. Values computed by \\(\\NAME{scope}( \\rho_1, X )\\) are to have the same type (\\(T\\)) as the values computed by \\(X\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\NAME{scope}( \\_ : \\NAME{environments}, \\_ : \\TO T) : \\TO T \\\\ \\KEY{Rule} \\quad &amp; \\RULE{ \\NAME{environment} ( \\NAME{map-override} ( \\rho_1, \\rho_0 ) ) \\vdash X \\TRANS X' }{ \\NAME{environment} ( \\rho_0 ) \\vdash \\NAME{scope} ( \\rho_1 : \\NAME{environments}, X ) \\TRANS \\NAME{scope} ( \\rho_1, X' ) } \\\\ \\KEY{Rule} \\quad &amp; \\NAME{scope} ( \\_ : \\NAME{environments}, V : T ) \\leadsto V \\end{align*}\\] The rules define how evaluation of \\(\\NAME{scope}( \\rho_1, X )\\) can proceed when the current bindings are represented by \\(\\rho_0\\). The premise of the first rule holds if \\(X\\) can make a transition to \\(X'\\) when \\(\\rho_1\\) overrides the current bindings \\(\\rho_0\\). Whether \\(X'\\) is a computed value or an intermediate term is irrelevant. When the premise holds, the conclusion is that \\(\\NAME{scope}( \\rho_1, X )\\) can make a transition to \\(\\NAME{scope}( \\rho_1, X' )\\). ",
    "url": "/cbs-latex/docs/katex/LNCS.html#defining-and-implementing-funcons",
    "relUrl": "/docs/katex/LNCS.html#defining-and-implementing-funcons"
  },"16": {
    "doc": "LNCS",
    "title": "LNCS",
    "content": "\\[\\newcommand{\\NAME}[1]{\\FUN{#1}}\\] This page is using KaTeX. See the same page using MathJax-3. Links to non-local declarations are disabled on this sample page. ",
    "url": "/cbs-latex/docs/katex/LNCS.html",
    "relUrl": "/docs/katex/LNCS.html"
  },"17": {
    "doc": "LNCS",
    "title": "Fundamental Constructs in Programming Languages",
    "content": "Extracts for testing MathJax . Abstract . The body of this document consists of fragments of the published article. It is for use in testing the formatting of mathematical formulae in paragraphs, inline displays, and floating figures by \\(\\LaTeX\\) and MathJax. ",
    "url": "/cbs-latex/docs/mathjax-2.7/LNCS.html#fundamental-constructs-in-programming-languages",
    "relUrl": "/docs/mathjax-2.7/LNCS.html#fundamental-constructs-in-programming-languages"
  },"18": {
    "doc": "LNCS",
    "title": "Introduction",
    "content": "Version control is superfluous for funcons; translations of language constructs to funcons, in contrast, may need to change when the specified language evolves. For example, the illustrative language IMP includes a plain old while-loop with a Boolean-valued condition: `\\(\\mathtt{while} \\mathtt{(} \\VAR{BExp} \\mathtt{)} \\VAR{Block}\\)’. The following rule translates it to the funcon \\(\\NAME{while-true}\\), which has exactly the required behaviour: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) \\end{align*}\\] The behaviour of the funcon \\(\\NAME{while-true}\\) is fixed. But suppose the IMP language evolves, and a \\(\\VAR{Block}\\) can now execute a statement `\\(\\mathtt{break;}\\)’, which is supposed to terminate just the closest enclosing while-loop. We can extend the translation with the following rule: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{break} \\ \\LEX{;} \\ \\RIGHTPHRASE = \\NAME{abrupt}(\\NAME{broken}) \\end{align*}\\] The translation of `\\(\\mathtt{while(true)\\{break;\\}}\\)’ is \\(\\NAME{while-true}(\\NAME{true}, \\NAME{abrupt}(\\NAME{broken}))\\). The funcon \\(\\NAME{abrupt}(V)\\) terminates execution abruptly, signalling its argument value \\(V\\) as the reason for termination. However, the behaviour of \\(\\NAME{while-true}(\\NAME{true}, X)\\) is to terminate abruptly whenever \\(X\\) does – so this translation would lead to abrupt termination of all enclosing while-loops! . We cannot change the definition of \\(\\NAME{while-true}\\), so we are forced to change the translation rule. The following updated translation rule reflects the extension of the behaviour of while-loops with the intended handling of abrupt termination due to break-statements, and that they propagate abrupt termination for any other reason: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{handle-abrupt} ( \\\\&amp;\\quad\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ),\\\\&amp;\\quad\\quad \\NAME{if-true-else} ( \\NAME{is-equal} ( \\NAME{given}, \\NAME{broken}), \\NAME{null-value}, \\NAME{abrupt}(\\NAME{given}))) \\end{align*}\\] Computing \\(\\NAME{null-value}\\) represents normal termination; \\(\\NAME{given}\\) refers to the reason for the abrupt termination. The specialised funcon \\(\\NAME{handle-break}\\) can be used to specify the same behaviour more concisely: . \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEM{execute} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{(} \\ \\VAR{BExp} \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{handle-break} ( %\\\\&amp;\\quad\\quad \\NAME{while-true} ( \\SEM{eval-bool} \\LEFTPHRASE \\ \\VAR{BExp} \\ \\RIGHTPHRASE , \\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE )) \\end{align*}\\] Wrapping \\(\\SEM{execute} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE\\) in \\(\\NAME{handle-continue}\\) would also support abrupt termination of the current \\emph{iteration} due to executing a continue-statement. ",
    "url": "/cbs-latex/docs/mathjax-2.7/LNCS.html#introduction",
    "relUrl": "/docs/mathjax-2.7/LNCS.html#introduction"
  },"19": {
    "doc": "LNCS",
    "title": "The Nature of Funcons",
    "content": "Funcons are often independent, but not always. For instance, the definition of the funcon \\(\\NAME{while-true}\\) specifies the reduction of \\(\\NAME{while-true}(B, X)\\) to a term involving the funcons \\(\\NAME{if-true-else}\\) and \\(\\NAME{sequential}\\): . \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\NAME{while-true}( B : \\TO \\NAME{booleans}, X : \\TO \\NAME{null-type}) : \\TO \\NAME{null-type} \\\\&amp;\\quad \\leadsto \\NAME{if-true-else} ( B, \\NAME{sequential} ( X, \\NAME{while-true} ( B, X ) ), \\NAME{null-value} ) \\end{align*}\\] ",
    "url": "/cbs-latex/docs/mathjax-2.7/LNCS.html#the-nature-of-funcons",
    "relUrl": "/docs/mathjax-2.7/LNCS.html#the-nature-of-funcons"
  },"20": {
    "doc": "LNCS",
    "title": "Translation of Language Constructs to Funcons",
    "content": "The translation specification in Fig. 1 declares \\(\\SYN{exp}\\) as a phrase sort, with the meta-variable \\(\\VAR{Exp}\\) (possibly with subscripts and/or primes) ranging over phrases of that sort. The BNF-like production shows two language constructs of sort \\(\\SYN{exp}\\): an identifier of sort \\(\\SYN{id}\\) (lexical tokens, here assumed to be specified elsewhere with meta-variable \\(\\VAR{Id}\\)) and a function application written `\\(\\VAR{Exp}_1 \\mathtt{(} \\VAR{Exp}_2\\mathtt{)}\\)’. \\[\\begin{align*} \\KEY{Syntax} \\quad \\VAR{Exp} : \\SYN{exp} ::= \\cdots \\mid \\SYN{id} \\mid \\SYN{exp} \\ \\LEX{(} \\ \\SYN{exp} \\ \\LEX{)} \\mid \\cdots \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\_ : \\SYN{exp} \\ \\RIGHTPHRASE : \\TO \\NAME{values} \\\\ \\KEY{Rule} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE = \\NAME{assigned-value} ( \\NAME{bound-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE ) ) \\\\ \\KEY{Rule} \\quad &amp; \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_1 \\ \\LEX{(} \\ \\VAR{Exp}_2 \\ \\LEX{)} \\ \\RIGHTPHRASE = \\NAME{apply} ( \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_1 \\ \\RIGHTPHRASE , \\SEM{rval} \\LEFTPHRASE \\ \\VAR{Exp}_2 \\ \\RIGHTPHRASE ) \\end{align*}\\] The translation specification for function declarations in Fig. 2 assumes a translation function \\(\\SEM{exec}\\LEFTPHRASE \\VAR{Block} \\RIGHTPHRASE\\) for phrases \\(\\VAR{Block}\\) of sort \\(\\SYN{block}\\). A block is a statement, which normally computes a null value; but here, as in many languages, a block can return an expression value by executing a return statement, which terminates the execution of the block abruptly. \\[\\begin{align*} \\KEY{Syntax} \\quad \\VAR{Decl} : \\SYN{decl} ::= \\cdots \\mid \\LEX{function} \\ \\SYN{id} \\ \\LEX{(} \\ \\SYN{id} \\ \\LEX{)} \\ \\SYN{block} \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEM{declare} \\LEFTPHRASE \\ \\_ : \\SYN{decl} \\ \\RIGHTPHRASE : \\TO \\NAME{environments} \\\\[1ex] \\KEY{Rule} \\quad &amp; \\SEM{declare} \\LEFTPHRASE \\ \\LEX{function} \\ \\VAR{Id}_1 \\ \\LEX{(} \\ \\VAR{Id}_2 \\ \\LEX{)} \\ \\VAR{Block} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\NAME{bind-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id}_1 \\ \\RIGHTPHRASE , \\\\&amp;\\quad\\quad \\NAME{allocate-initialised-variable} ( \\NAME{functions} ( \\NAME{values}, \\NAME{values} ), \\\\&amp;\\quad\\quad\\quad \\NAME{function} ( \\NAME{closure} ( \\\\&amp;\\quad\\quad\\quad\\quad \\NAME{scope} ( \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\NAME{bind-value} ( \\SEM{id} \\LEFTPHRASE \\ \\VAR{Id}_2 \\ \\RIGHTPHRASE ,\\\\&amp;\\quad\\quad\\quad\\quad\\quad\\quad \\NAME{allocate-initialised-variable} ( \\NAME{values}, \\NAME{given} ) ), \\\\&amp;\\quad\\quad\\quad\\quad\\quad \\NAME{handle-return} ( \\SEM{exec} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) ) ) ) ) ) \\end{align*}\\] ",
    "url": "/cbs-latex/docs/mathjax-2.7/LNCS.html#translation-of-language-constructs-to-funcons",
    "relUrl": "/docs/mathjax-2.7/LNCS.html#translation-of-language-constructs-to-funcons"
  },"21": {
    "doc": "LNCS",
    "title": "Defining and Implementing Funcons",
    "content": "The funcon signature in Fig. 3 specifies that \\(\\NAME{scope}\\) takes two arguments. The first argument is required to be pre-evaluated to a value of type \\(\\NAME{environments}\\); the second argument should be unevaluated, as indicated by `\\(\\TO T\\)’. Values computed by \\(\\NAME{scope}( \\rho_1, X )\\) are to have the same type (\\(T\\)) as the values computed by \\(X\\). \\[\\begin{align*} \\KEY{Funcon} \\quad &amp; \\NAME{scope}( \\_ : \\NAME{environments}, \\_ : \\TO T) : \\TO T \\\\ \\KEY{Rule} \\quad &amp; \\RULE{ \\NAME{environment} ( \\NAME{map-override} ( \\rho_1, \\rho_0 ) ) \\vdash X \\TRANS X' }{ \\NAME{environment} ( \\rho_0 ) \\vdash \\NAME{scope} ( \\rho_1 : \\NAME{environments}, X ) \\TRANS \\NAME{scope} ( \\rho_1, X' ) } \\\\ \\KEY{Rule} \\quad &amp; \\NAME{scope} ( \\_ : \\NAME{environments}, V : T ) \\leadsto V \\end{align*}\\] The rules define how evaluation of \\(\\NAME{scope}( \\rho_1, X )\\) can proceed when the current bindings are represented by \\(\\rho_0\\). The premise of the first rule holds if \\(X\\) can make a transition to \\(X'\\) when \\(\\rho_1\\) overrides the current bindings \\(\\rho_0\\). Whether \\(X'\\) is a computed value or an intermediate term is irrelevant. When the premise holds, the conclusion is that \\(\\NAME{scope}( \\rho_1, X )\\) can make a transition to \\(\\NAME{scope}( \\rho_1, X' )\\). ",
    "url": "/cbs-latex/docs/mathjax-2.7/LNCS.html#defining-and-implementing-funcons",
    "relUrl": "/docs/mathjax-2.7/LNCS.html#defining-and-implementing-funcons"
  },"22": {
    "doc": "LNCS",
    "title": "LNCS",
    "content": "This page is using MathJax-2.7. See the same page using MathJax-3. Links to non-local declarations are disabled on this sample page. ",
    "url": "/cbs-latex/docs/mathjax-2.7/LNCS.html",
    "relUrl": "/docs/mathjax-2.7/LNCS.html"
  },"23": {
    "doc": "Language specifications",
    "title": "\\(\\SECT{3}\\) Statements",
    "content": "\\[\\begin{align*} \\KEY{Syntax} \\quad \\VARDEC{Block} : \\SYNDEC{block} \\ ::= \\ &amp; \\ \\LEX{{\\LEFTBRACE}} \\ \\SYNREF{stmts}\\QUERY \\ \\LEX{{\\RIGHTBRACE}} \\\\ \\VARDEC{Stmts} : \\SYNDEC{stmts} \\ ::= \\ &amp; \\ \\SYNREF{stmt} \\ \\SYNREF{stmts}\\QUERY \\\\ \\VARDEC{Stmt} : \\SYNDEC{stmt} \\ ::= \\ &amp; \\ \\SYNREF{imp-stmt} \\mid \\SYNHYP{../.}{SIMPLE-4-Declarations}{vars-decl} \\\\ \\VARDEC{ImpStmt} : \\SYNDEC{imp-stmt} \\ ::= \\ &amp; \\ \\SYNREF{block} \\\\ \\ \\mid \\ &amp; \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{if} \\ \\LEX{{(}} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{)}} \\ \\SYNREF{block} \\ \\LEFTGROUP \\LEX{else} \\ \\SYNREF{block} \\RIGHTGROUP\\QUERY \\\\ \\ \\mid \\ &amp; \\ \\LEX{while} \\ \\LEX{{(}} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{)}} \\ \\SYNREF{block} \\\\ \\ \\mid \\ &amp; \\ \\LEX{for} \\ \\LEX{{(}} \\ \\SYNREF{stmt} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{;}} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{)}} \\ \\SYNREF{block} \\\\ \\ \\mid \\ &amp; \\ \\LEX{print} \\ \\LEX{{(}} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exps} \\ \\LEX{{)}} \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{return} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp}\\QUERY \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{try} \\ \\SYNREF{block} \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\SYNHYP{../.}{SIMPLE-1-Lexical}{id} \\ \\LEX{{)}} \\ \\SYNREF{block} \\\\ \\ \\mid \\ &amp; \\ \\LEX{throw} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{;}} \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{)}} \\ \\VARREF{Block} \\ \\RIGHTPHRASE : \\SYNREF{stmt} = \\\\&amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR{Exp} \\ \\LEX{{)}} \\ \\VAR{Block} \\ \\LEX{else} \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\\\ \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{for} \\ \\LEX{{(}} \\ \\VARREF{Stmt} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp}\\SUB{1} \\ \\LEX{{;}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp}\\SUB{2} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\VARREF{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE : \\SYNREF{stmt} = \\\\&amp; \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmt} \\\\&amp;\\quad \\LEX{while} \\ \\LEX{{(}} \\ \\VAR{Exp}\\SUB{1} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\VAR{Exp}\\SUB{2} \\ \\LEX{{;}} \\ \\LEX{{\\RIGHTBRACE}} \\\\&amp;\\quad \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEMDEC{exec} \\LEFTPHRASE \\ \\_ : \\SYNREF{stmts} \\ \\RIGHTPHRASE : \\TO \\FUNHYP{../../../../../Funcons-beta/Values/Primitive}{Null}{null-type} \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Values/Primitive}{Null}{null} \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VARREF{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VARREF{ImpStmt} \\ \\VARREF{Stmts} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{sequential} ( \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{ImpStmt} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VARHYP{../.}{SIMPLE-4-Declarations}{VarsDecl} \\ \\VARREF{Stmts} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Binding}{scope} ( \\SEMHYP{../.}{SIMPLE-4-Declarations}{declare} \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VARHYP{../.}{SIMPLE-4-Declarations}{VarsDecl} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{effect} ( \\SEMHYP{../.}{SIMPLE-4-Declarations}{declare} \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{effect} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{)}} \\ \\VARREF{Block}\\SUB{1} \\ \\LEX{else} \\ \\VARREF{Block}\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{if-else} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{)}} \\ \\VARREF{Block} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{while} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{print} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exps} \\ \\LEX{{)}} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Interacting}{print} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rvals} \\LEFTPHRASE \\ \\VAR{Exps} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Abnormal}{Returning}{return} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Abnormal}{Returning}{return} ( \\FUNHYP{../../../../../Funcons-beta/Values/Primitive}{Null}{null} ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{try} \\ \\VARREF{Block}\\SUB{1} \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-1-Lexical}{Id} \\ \\LEX{{)}} \\ \\VARREF{Block}\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Abnormal}{Throwing}{handle-thrown} ( \\\\&amp;\\quad\\quad \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\\\&amp;\\quad\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Binding}{scope} ( \\\\&amp;\\quad\\quad\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Binding}{bind} ( \\SEMHYP{../.}{SIMPLE-1-Lexical}{id} \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE , \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Storing}{allocate-initialised-variable} ( \\FUNHYP{../../../../../Funcons-beta/Values}{Value-Types}{values}, \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Giving}{given} ) ), \\\\&amp;\\quad\\quad\\quad \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{throw} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Abnormal}{Throwing}{throw} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*}\\] . ",
    "url": "/cbs-latex/docs/mathjax-3/SIMPLE-3-Statements.html#SectionNumber:3",
    "relUrl": "/docs/mathjax-3/SIMPLE-3-Statements.html#SectionNumber:3"
  },"24": {
    "doc": "Language specifications",
    "title": "Language specifications",
    "content": "This page is using MathJax-3. See the same page using MathJax-2.7. Links to non-local declarations are disabled on this sample page. \\[\\KEY{Language} \\quad \\LANG{\\STRING{SIMPLE}}\\] ",
    "url": "/cbs-latex/docs/mathjax-3/SIMPLE-3-Statements.html",
    "relUrl": "/docs/mathjax-3/SIMPLE-3-Statements.html"
  },"25": {
    "doc": "Language specifications",
    "title": "\\(\\SECT{3}\\) Statements",
    "content": "\\[\\begin{align*} \\KEY{Syntax} \\quad \\VARDEC{Block} : \\SYNDEC{block} \\ ::= \\ &amp; \\ \\LEX{{\\LEFTBRACE}} \\ \\SYNREF{stmts}\\QUERY \\ \\LEX{{\\RIGHTBRACE}} \\\\ \\VARDEC{Stmts} : \\SYNDEC{stmts} \\ ::= \\ &amp; \\ \\SYNREF{stmt} \\ \\SYNREF{stmts}\\QUERY \\\\ \\VARDEC{Stmt} : \\SYNDEC{stmt} \\ ::= \\ &amp; \\ \\SYNREF{imp-stmt} \\mid \\SYNHYP{../.}{SIMPLE-4-Declarations}{vars-decl} \\\\ \\VARDEC{ImpStmt} : \\SYNDEC{imp-stmt} \\ ::= \\ &amp; \\ \\SYNREF{block} \\\\ \\ \\mid \\ &amp; \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{if} \\ \\LEX{{(}} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{)}} \\ \\SYNREF{block} \\ \\LEFTGROUP \\LEX{else} \\ \\SYNREF{block} \\RIGHTGROUP\\QUERY \\\\ \\ \\mid \\ &amp; \\ \\LEX{while} \\ \\LEX{{(}} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{)}} \\ \\SYNREF{block} \\\\ \\ \\mid \\ &amp; \\ \\LEX{for} \\ \\LEX{{(}} \\ \\SYNREF{stmt} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{;}} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{)}} \\ \\SYNREF{block} \\\\ \\ \\mid \\ &amp; \\ \\LEX{print} \\ \\LEX{{(}} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exps} \\ \\LEX{{)}} \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{return} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp}\\QUERY \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{try} \\ \\SYNREF{block} \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\SYNHYP{../.}{SIMPLE-1-Lexical}{id} \\ \\LEX{{)}} \\ \\SYNREF{block} \\\\ \\ \\mid \\ &amp; \\ \\LEX{throw} \\ \\SYNHYP{../.}{SIMPLE-2-Expressions}{exp} \\ \\LEX{{;}} \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{)}} \\ \\VARREF{Block} \\ \\RIGHTPHRASE : \\SYNREF{stmt} = \\\\&amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR{Exp} \\ \\LEX{{)}} \\ \\VAR{Block} \\ \\LEX{else} \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\\\ \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{for} \\ \\LEX{{(}} \\ \\VARREF{Stmt} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp}\\SUB{1} \\ \\LEX{{;}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp}\\SUB{2} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\VARREF{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE : \\SYNREF{stmt} = \\\\&amp; \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmt} \\\\&amp;\\quad \\LEX{while} \\ \\LEX{{(}} \\ \\VAR{Exp}\\SUB{1} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\VAR{Exp}\\SUB{2} \\ \\LEX{{;}} \\ \\LEX{{\\RIGHTBRACE}} \\\\&amp;\\quad \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEMDEC{exec} \\LEFTPHRASE \\ \\_ : \\SYNREF{stmts} \\ \\RIGHTPHRASE : \\TO \\FUNHYP{../../../../../Funcons-beta/Values/Primitive}{Null}{null-type} \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Values/Primitive}{Null}{null} \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VARREF{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VARREF{ImpStmt} \\ \\VARREF{Stmts} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{sequential} ( \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{ImpStmt} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VARHYP{../.}{SIMPLE-4-Declarations}{VarsDecl} \\ \\VARREF{Stmts} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Binding}{scope} ( \\SEMHYP{../.}{SIMPLE-4-Declarations}{declare} \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VARHYP{../.}{SIMPLE-4-Declarations}{VarsDecl} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{effect} ( \\SEMHYP{../.}{SIMPLE-4-Declarations}{declare} \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{effect} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{)}} \\ \\VARREF{Block}\\SUB{1} \\ \\LEX{else} \\ \\VARREF{Block}\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{if-else} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{)}} \\ \\VARREF{Block} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Flowing}{while} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{print} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exps} \\ \\LEX{{)}} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Interacting}{print} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rvals} \\LEFTPHRASE \\ \\VAR{Exps} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Abnormal}{Returning}{return} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Abnormal}{Returning}{return} ( \\FUNHYP{../../../../../Funcons-beta/Values/Primitive}{Null}{null} ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{try} \\ \\VARREF{Block}\\SUB{1} \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\VARHYP{../.}{SIMPLE-1-Lexical}{Id} \\ \\LEX{{)}} \\ \\VARREF{Block}\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Abnormal}{Throwing}{handle-thrown} ( \\\\&amp;\\quad\\quad \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\\\&amp;\\quad\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Binding}{scope} ( \\\\&amp;\\quad\\quad\\quad \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Binding}{bind} ( \\SEMHYP{../.}{SIMPLE-1-Lexical}{id} \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE , \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Storing}{allocate-initialised-variable} ( \\FUNHYP{../../../../../Funcons-beta/Values}{Value-Types}{values}, \\FUNHYP{../../../../../Funcons-beta/Computations/Normal}{Giving}{given} ) ), \\\\&amp;\\quad\\quad\\quad \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) ) \\\\ \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{throw} \\ \\VARHYP{../.}{SIMPLE-2-Expressions}{Exp} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUNHYP{../../../../../Funcons-beta/Computations/Abnormal}{Throwing}{throw} ( \\SEMHYP{../.}{SIMPLE-2-Expressions}{rval} \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*}\\] . ",
    "url": "/cbs-latex/docs/mathjax-2.7/SIMPLE-3-Statements.html#SectionNumber:3",
    "relUrl": "/docs/mathjax-2.7/SIMPLE-3-Statements.html#SectionNumber:3"
  },"26": {
    "doc": "Language specifications",
    "title": "Language specifications",
    "content": "This page is using MathJax-2.7. See the same page using MathJax-3. Links to non-local declarations are disabled on this sample page. \\[\\KEY{Language} \\quad \\LANG{\\STRING{SIMPLE}}\\] ",
    "url": "/cbs-latex/docs/mathjax-2.7/SIMPLE-3-Statements.html",
    "relUrl": "/docs/mathjax-2.7/SIMPLE-3-Statements.html"
  },"27": {
    "doc": "Language specifications",
    "title": "\\(\\SECT{3}\\) Statements",
    "content": "\\[\\begin{align*} \\KEY{Syntax} \\quad \\VARDEC{Block} : \\SYNDEC{block} \\ ::= \\ &amp; \\ \\LEX{{\\LEFTBRACE}} \\ \\SYN@stmts\\QUERY \\ \\LEX{{\\RIGHTBRACE}} \\\\ \\VARDEC{Stmts} : \\SYNDEC{stmts} \\ ::= \\ &amp; \\ \\SYN@stmt \\ \\SYN@stmts\\QUERY \\\\ \\VARDEC{Stmt} : \\SYNDEC{stmt} \\ ::= \\ &amp; \\ \\SYN@imp@stmt \\mid \\SYN@vars@decl \\\\ \\VARDEC{ImpStmt} : \\SYNDEC{imp-stmt} \\ ::= \\ &amp; \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\SYN@exp \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{if} \\ \\LEX{{(}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\ \\LEFTGROUP \\LEX{else} \\ \\SYN@block \\RIGHTGROUP\\QUERY \\\\ \\ \\mid \\ &amp; \\ \\LEX{while} \\ \\LEX{{(}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{for} \\ \\LEX{{(}} \\ \\SYN@stmt \\ \\SYN@exp \\ \\LEX{{;}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{print} \\ \\LEX{{(}} \\ \\SYN@exps \\ \\LEX{{)}} \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{return} \\ \\SYN@exp\\QUERY \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{try} \\ \\SYN@block \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\SYN@id \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{throw} \\ \\SYN@exp \\ \\LEX{{;}} \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block \\ \\RIGHTPHRASE : \\SYN@stmt = \\\\&amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR{Exp} \\ \\LEX{{)}} \\ \\VAR{Block} \\ \\LEX{else} \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{for} \\ \\LEX{{(}} \\ \\VAR@Stmt \\ \\VAR@Exp\\SUB{1} \\ \\LEX{{;}} \\ \\VAR@Exp\\SUB{2} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\VAR@Stmts \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE : \\SYN@stmt = \\\\&amp; \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmt} \\\\&amp;\\quad \\LEX{while} \\ \\LEX{{(}} \\ \\VAR{Exp}\\SUB{1} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\VAR{Exp}\\SUB{2} \\ \\LEX{{;}} \\ \\LEX{{\\RIGHTBRACE}} \\\\&amp;\\quad \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\end{align*}\\] \\[\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEMDEC{exec} \\LEFTPHRASE \\ \\_ : \\SYN@stmts \\ \\RIGHTPHRASE : \\TO \\FUN@null@type \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\FUN@null \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR@Stmts \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@ImpStmt \\ \\VAR@Stmts \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@sequential ( \\SEM@exec \\LEFTPHRASE \\ \\VAR{ImpStmt} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@VarsDecl \\ \\VAR@Stmts \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@scope ( \\SEM@declare \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@VarsDecl \\ \\RIGHTPHRASE = \\FUN@effect ( \\SEM@declare \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@effect ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block\\SUB{1} \\ \\LEX{else} \\ \\VAR@Block\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@if@else ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block \\ \\RIGHTPHRASE = \\FUN@while ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{print} \\ \\LEX{{(}} \\ \\VAR@Exps \\ \\LEX{{)}} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@print ( \\SEM@rvals \\LEFTPHRASE \\ \\VAR{Exps} \\ \\RIGHTPHRASE ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@return ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@return ( \\FUN@null ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{try} \\ \\VAR@Block\\SUB{1} \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\VAR@Id \\ \\LEX{{)}} \\ \\VAR@Block\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@handle@thrown ( \\\\&amp;\\quad\\quad \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\\\&amp;\\quad\\quad \\FUN@scope ( \\\\&amp;\\quad\\quad\\quad \\FUN@bind ( \\SEM@id \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE , \\FUN@allocate@initialised@variable ( \\FUN@values, \\FUN@given ) ), \\\\&amp;\\quad\\quad\\quad \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) ) \\end{align*}\\] \\[\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{throw} \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@throw ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*}\\] . ",
    "url": "/cbs-latex/docs/katex/SIMPLE-3-Statements.html#SectionNumber:3",
    "relUrl": "/docs/katex/SIMPLE-3-Statements.html#SectionNumber:3"
  },"28": {
    "doc": "Language specifications",
    "title": "Language specifications",
    "content": "This page is using \\(\\KaTeX\\). See the same page using MathJax-3. Links to non-local declarations are disabled on this sample page. \\[\\KEY{Language} \\quad \\LANG{\\STRING{SIMPLE}}\\] ",
    "url": "/cbs-latex/docs/katex/SIMPLE-3-Statements.html",
    "relUrl": "/docs/katex/SIMPLE-3-Statements.html"
  },"29": {
    "doc": "SIMPLE-3-Statements.md",
    "title": "SIMPLE-3-Statements.md",
    "content": "{::comment}{:/} ---- $$\\KEY{Language} \\quad \\LANG{\\STRING{SIMPLE}}$$ # $$\\SECT{3}$$ Statements {#SectionNumber:3} $$\\begin{align*} \\KEY{Syntax} \\quad \\VARDEC{Block} : \\SYNDEC{block} \\ ::= \\ &amp; \\ \\LEX{{\\LEFTBRACE}} \\ \\SYN@stmts\\QUERY \\ \\LEX{{\\RIGHTBRACE}} \\\\ \\VARDEC{Stmts} : \\SYNDEC{stmts} \\ ::= \\ &amp; \\ \\SYN@stmt \\ \\SYN@stmts\\QUERY \\\\ \\VARDEC{Stmt} : \\SYNDEC{stmt} \\ ::= \\ &amp; \\ \\SYN@imp@stmt \\mid \\SYN@vars@decl \\\\ \\VARDEC{ImpStmt} : \\SYNDEC{imp-stmt} \\ ::= \\ &amp; \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\SYN@exp \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{if} \\ \\LEX{{(}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\ \\LEFTGROUP \\LEX{else} \\ \\SYN@block \\RIGHTGROUP\\QUERY \\\\ \\ \\mid \\ &amp; \\ \\LEX{while} \\ \\LEX{{(}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{for} \\ \\LEX{{(}} \\ \\SYN@stmt \\ \\SYN@exp \\ \\LEX{{;}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{print} \\ \\LEX{{(}} \\ \\SYN@exps \\ \\LEX{{)}} \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{return} \\ \\SYN@exp\\QUERY \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{try} \\ \\SYN@block \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\SYN@id \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{throw} \\ \\SYN@exp \\ \\LEX{{;}} \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block \\ \\RIGHTPHRASE : \\SYN@stmt = \\\\&amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR{Exp} \\ \\LEX{{)}} \\ \\VAR{Block} \\ \\LEX{else} \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{for} \\ \\LEX{{(}} \\ \\VAR@Stmt \\ \\VAR@Exp\\SUB{1} \\ \\LEX{{;}} \\ \\VAR@Exp\\SUB{2} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\VAR@Stmts \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE : \\SYN@stmt = \\\\&amp; \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmt} \\\\&amp;\\quad \\LEX{while} \\ \\LEX{{(}} \\ \\VAR{Exp}\\SUB{1} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\VAR{Exp}\\SUB{2} \\ \\LEX{{;}} \\ \\LEX{{\\RIGHTBRACE}} \\\\&amp;\\quad \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\end{align*}$$ $$\\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEMDEC{exec} \\LEFTPHRASE \\ \\_ : \\SYN@stmts \\ \\RIGHTPHRASE : \\TO \\FUN@null@type \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\FUN@null \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR@Stmts \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@ImpStmt \\ \\VAR@Stmts \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@sequential ( \\SEM@exec \\LEFTPHRASE \\ \\VAR{ImpStmt} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@VarsDecl \\ \\VAR@Stmts \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@scope ( \\SEM@declare \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@VarsDecl \\ \\RIGHTPHRASE = \\FUN@effect ( \\SEM@declare \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@effect ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block\\SUB{1} \\ \\LEX{else} \\ \\VAR@Block\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@if@else ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block \\ \\RIGHTPHRASE = \\FUN@while ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{print} \\ \\LEX{{(}} \\ \\VAR@Exps \\ \\LEX{{)}} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@print ( \\SEM@rvals \\LEFTPHRASE \\ \\VAR{Exps} \\ \\RIGHTPHRASE ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@return ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@return ( \\FUN@null ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{try} \\ \\VAR@Block\\SUB{1} \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\VAR@Id \\ \\LEX{{)}} \\ \\VAR@Block\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@handle@thrown ( \\\\&amp;\\quad\\quad \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\\\&amp;\\quad\\quad \\FUN@scope ( \\\\&amp;\\quad\\quad\\quad \\FUN@bind ( \\SEM@id \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE , \\FUN@allocate@initialised@variable ( \\FUN@values, \\FUN@given ) ), \\\\&amp;\\quad\\quad\\quad \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) ) \\end{align*}$$ $$\\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{throw} \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@throw ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*}$$ [Funcons-beta]: /CBS-beta/math/Funcons-beta \"FUNCONS-BETA\" [Unstable-Funcons-beta]: /CBS-beta/math/Unstable-Funcons-beta \"UNSTABLE-FUNCONS-BETA\" [Languages-beta]: /CBS-beta/math/Languages-beta \"LANGUAGES-BETA\" [Unstable-Languages-beta]: /CBS-beta/math/Unstable-Languages-beta \"UNSTABLE-LANGUAGES-BETA\" [CBS-beta]: /CBS-beta \"CBS-BETA\" [SIMPLE-3-Statements.cbs]: https://github.com/plancomps/CBS-beta/blob/math/Languages-beta/SIMPLE/SIMPLE-cbs/SIMPLE/SIMPLE-3-Statements/SIMPLE-3-Statements.cbs \"CBS SOURCE FILE ON GITHUB\" [PLAIN]: /CBS-beta/docs/Languages-beta/SIMPLE/SIMPLE-cbs/SIMPLE/SIMPLE-3-Statements \"CBS SOURCE WEB PAGE\" [PRETTY]: /CBS-beta/math/Languages-beta/SIMPLE/SIMPLE-cbs/SIMPLE/SIMPLE-3-Statements \"CBS-KATEX WEB PAGE\" [PDF]: /CBS-beta/math/Languages-beta/SIMPLE/SIMPLE-cbs/SIMPLE/SIMPLE-3-Statements/SIMPLE-3-Statements.pdf \"CBS-LATEX PDF FILE\" [PLanCompS Project]: https://plancomps.github.io \"PROGRAMMING LANGUAGE COMPONENTS AND SPECIFICATIONS PROJECT HOME PAGE\" {::comment}{:/} . ",
    "url": "/cbs-latex/docs/kramdown/SIMPLE-3-Statements.md.html",
    "relUrl": "/docs/kramdown/SIMPLE-3-Statements.md.html"
  },"30": {
    "doc": "SIMPLE-3-Statements.part.tex",
    "title": "SIMPLE-3-Statements.part.tex",
    "content": "% \\begin{center} \\rule{3in}{0.4pt} \\end{center} \\begin{displaymath} \\KEY{Language} \\quad \\LANG{\\STRING{SIMPLE}} \\end{displaymath} \\section{$\\SECT{3}$ Statements}\\hypertarget{SectionNumber:3}{}\\label{SectionNumber:3} \\begin{align*} \\KEY{Syntax} \\quad \\VARDEC{Block} : \\SYNDEC{block} \\ ::= \\ &amp; \\ \\LEX{{\\LEFTBRACE}} \\ \\SYN@stmts\\QUERY \\ \\LEX{{\\RIGHTBRACE}} \\\\ \\VARDEC{Stmts} : \\SYNDEC{stmts} \\ ::= \\ &amp; \\ \\SYN@stmt \\ \\SYN@stmts\\QUERY \\\\ \\VARDEC{Stmt} : \\SYNDEC{stmt} \\ ::= \\ &amp; \\ \\SYN@imp@stmt \\mid \\SYN@vars@decl \\\\ \\VARDEC{ImpStmt} : \\SYNDEC{imp-stmt} \\ ::= \\ &amp; \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\SYN@exp \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{if} \\ \\LEX{{(}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\ \\LEFTGROUP \\LEX{else} \\ \\SYN@block \\RIGHTGROUP\\QUERY \\\\ \\ \\mid \\ &amp; \\ \\LEX{while} \\ \\LEX{{(}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{for} \\ \\LEX{{(}} \\ \\SYN@stmt \\ \\SYN@exp \\ \\LEX{{;}} \\ \\SYN@exp \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{print} \\ \\LEX{{(}} \\ \\SYN@exps \\ \\LEX{{)}} \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{return} \\ \\SYN@exp\\QUERY \\ \\LEX{{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{try} \\ \\SYN@block \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\SYN@id \\ \\LEX{{)}} \\ \\SYN@block \\\\ \\ \\mid \\ &amp; \\ \\LEX{throw} \\ \\SYN@exp \\ \\LEX{{;}} \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block \\ \\RIGHTPHRASE : \\SYN@stmt = \\\\&amp; \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR{Exp} \\ \\LEX{{)}} \\ \\VAR{Block} \\ \\LEX{else} \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\LEFTPHRASE \\ \\LEX{for} \\ \\LEX{{(}} \\ \\VAR@Stmt \\ \\VAR@Exp\\SUB{1} \\ \\LEX{{;}} \\ \\VAR@Exp\\SUB{2} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\VAR@Stmts \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE : \\SYN@stmt = \\\\&amp; \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmt} \\\\&amp;\\quad \\LEX{while} \\ \\LEX{{(}} \\ \\VAR{Exp}\\SUB{1} \\ \\LEX{{)}} \\\\&amp;\\quad \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR{Stmts} \\ \\LEX{{\\RIGHTBRACE}} \\ \\VAR{Exp}\\SUB{2} \\ \\LEX{{;}} \\ \\LEX{{\\RIGHTBRACE}} \\\\&amp;\\quad \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE \\end{align*} \\begin{align*} \\KEY{Semantics} \\quad &amp; \\SEMDEC{exec} \\LEFTPHRASE \\ \\_ : \\SYN@stmts \\ \\RIGHTPHRASE : \\TO \\FUN@null@type \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\FUN@null \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{{\\LEFTBRACE}} \\ \\VAR@Stmts \\ \\LEX{{\\RIGHTBRACE}} \\ \\RIGHTPHRASE = \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@ImpStmt \\ \\VAR@Stmts \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@sequential ( \\SEM@exec \\LEFTPHRASE \\ \\VAR{ImpStmt} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@VarsDecl \\ \\VAR@Stmts \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@scope ( \\SEM@declare \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Stmts} \\ \\RIGHTPHRASE ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@VarsDecl \\ \\RIGHTPHRASE = \\FUN@effect ( \\SEM@declare \\LEFTPHRASE \\ \\VAR{VarsDecl} \\ \\RIGHTPHRASE ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@effect ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{if} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block\\SUB{1} \\ \\LEX{else} \\ \\VAR@Block\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@if@else ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{while} \\ \\LEX{{(}} \\ \\VAR@Exp \\ \\LEX{{)}} \\ \\VAR@Block \\ \\RIGHTPHRASE = \\FUN@while ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE , \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block} \\ \\RIGHTPHRASE ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{print} \\ \\LEX{{(}} \\ \\VAR@Exps \\ \\LEX{{)}} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@print ( \\SEM@rvals \\LEFTPHRASE \\ \\VAR{Exps} \\ \\RIGHTPHRASE ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@return ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{return} \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@return ( \\FUN@null ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{try} \\ \\VAR@Block\\SUB{1} \\ \\LEX{catch} \\ \\LEX{{(}} \\ \\VAR@Id \\ \\LEX{{)}} \\ \\VAR@Block\\SUB{2} \\ \\RIGHTPHRASE = \\\\&amp;\\quad \\FUN@handle@thrown ( \\\\&amp;\\quad\\quad \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{1} \\ \\RIGHTPHRASE , \\\\&amp;\\quad\\quad \\FUN@scope ( \\\\&amp;\\quad\\quad\\quad \\FUN@bind ( \\SEM@id \\LEFTPHRASE \\ \\VAR{Id} \\ \\RIGHTPHRASE , \\FUN@allocate@initialised@variable ( \\FUN@values, \\FUN@given ) ), \\\\&amp;\\quad\\quad\\quad \\SEM@exec \\LEFTPHRASE \\ \\VAR{Block}\\SUB{2} \\ \\RIGHTPHRASE ) ) \\end{align*} \\begin{align*} \\KEY{Rule} \\quad &amp; \\SEMREF{exec} \\LEFTPHRASE \\ \\LEX{throw} \\ \\VAR@Exp \\ \\LEX{{;}} \\ \\RIGHTPHRASE = \\FUN@throw ( \\SEM@rval \\LEFTPHRASE \\ \\VAR{Exp} \\ \\RIGHTPHRASE ) \\end{align*} % . ",
    "url": "/cbs-latex/docs/latex/SIMPLE-3-Statements/SIMPLE-3-Statements.part.tex.html",
    "relUrl": "/docs/latex/SIMPLE-3-Statements/SIMPLE-3-Statements.part.tex.html"
  },"31": {
    "doc": "ASCII Tests",
    "title": "ASCII characters",
    "content": "\\[\\begin{align*} \\KEY{Syntax} \\quad \\SYN{test} \\ ::= \\ &amp; \\ \\LEX{{!}~{\"}~{\\HASH}~{\\DOLLAR}~{\\PERCENT}~{\\AMPERSAND}~{\\APOSTROPHE}~{(}~{)}~{*}~{+}~{,}~{-}~{.}~{/}~{:}~{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{{&lt;}~{=}~{&gt;}~{?}~{@}~{[}~{\\BACKSLASH}~{]}~{\\CARET}~{\\UNDERSCORE}~{\\GRAVE}~{\\LEFTBRACE}~{|}~{\\RIGHTBRACE}~{\\TILDE}~A~Z~a~z~0~9} \\end{align*}\\] The apostrophe and the backslash have to be escaped in CBS: . Syntax test ::= '! \" # $ % &amp; \\' ( ) * + , - . / : ;' | '&lt; = &gt; ? @ [ \\\\ ] ^ _ ` { | } ~ A Z a z 0 9' . ",
    "url": "/cbs-latex/docs/mathjax-2.7/TEST-Start.html#ascii-characters",
    "relUrl": "/docs/mathjax-2.7/TEST-Start.html#ascii-characters"
  },"32": {
    "doc": "ASCII Tests",
    "title": "ASCII Tests",
    "content": "This page is using MathJax-2.7. See the same page using MathJax-3. \\[\\KEY{Language} \\quad \\STRING{Test}\\] ",
    "url": "/cbs-latex/docs/mathjax-2.7/TEST-Start.html",
    "relUrl": "/docs/mathjax-2.7/TEST-Start.html"
  },"33": {
    "doc": "ASCII Tests",
    "title": "ASCII characters",
    "content": "\\[\\begin{align*} \\KEY{Syntax} \\quad \\SYN{test} \\ ::= \\ &amp; \\ \\LEX{{!}~{\"}~{\\HASH}~{\\DOLLAR}~{\\PERCENT}~{\\AMPERSAND}~{\\APOSTROPHE}~{(}~{)}~{*}~{+}~{,}~{-}~{.}~{/}~{:}~{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{{&lt;}~{=}~{&gt;}~{?}~{@}~{[}~{\\BACKSLASH}~{]}~{\\CARET}~{\\UNDERSCORE}~{\\GRAVE}~{\\LEFTBRACE}~{|}~{\\RIGHTBRACE}~{\\TILDE}~A~Z~a~z~0~9} \\end{align*}\\] The apostrophe and the backslash have to be escaped in CBS: . Syntax test ::= '! \" # $ % &amp; \\' ( ) * + , - . / : ;' | '&lt; = &gt; ? @ [ \\\\ ] ^ _ ` { | } ~ A Z a z 0 9' . ",
    "url": "/cbs-latex/docs/katex/TEST-Start.html#ascii-characters",
    "relUrl": "/docs/katex/TEST-Start.html#ascii-characters"
  },"34": {
    "doc": "ASCII Tests",
    "title": "ASCII Tests",
    "content": "This page is using \\(\\KaTeX\\). See the same page using MathJax-3. \\[\\KEY{Language} \\quad \\STRING{Test}\\] ",
    "url": "/cbs-latex/docs/katex/TEST-Start.html",
    "relUrl": "/docs/katex/TEST-Start.html"
  },"35": {
    "doc": "ASCII Tests",
    "title": "ASCII characters",
    "content": "\\[\\begin{align*} \\KEY{Syntax} \\quad \\SYN{test} \\ ::= \\ &amp; \\ \\LEX{{!}~{\"}~{\\HASH}~{\\DOLLAR}~{\\PERCENT}~{\\AMPERSAND}~{\\APOSTROPHE}~{(}~{)}~{*}~{+}~{,}~{-}~{.}~{/}~{:}~{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{{&lt;}~{=}~{&gt;}~{?}~{@}~{[}~{\\BACKSLASH}~{]}~{\\CARET}~{\\UNDERSCORE}~{\\GRAVE}~{\\LEFTBRACE}~{|}~{\\RIGHTBRACE}~{\\TILDE}~A~Z~a~z~0~9} \\end{align*}\\] The apostrophe and the backslash have to be escaped in CBS: . Syntax test ::= '! \" # $ % &amp; \\' ( ) * + , - . / : ;' | '&lt; = &gt; ? @ [ \\\\ ] ^ _ ` { | } ~ A Z a z 0 9' . ",
    "url": "/cbs-latex/docs/mathjax-3/TEST-Start.html#ascii-characters",
    "relUrl": "/docs/mathjax-3/TEST-Start.html#ascii-characters"
  },"36": {
    "doc": "ASCII Tests",
    "title": "ASCII Tests",
    "content": "This page is using MathJax-3. See the same page using MathJax-2.7. \\[\\KEY{Language} \\quad \\STRING{Test}\\] ",
    "url": "/cbs-latex/docs/mathjax-3/TEST-Start.html",
    "relUrl": "/docs/mathjax-3/TEST-Start.html"
  },"37": {
    "doc": "TEST-Start.md",
    "title": "TEST-Start.md",
    "content": "{::comment}{:/} ---- $$\\KEY{Language} \\quad \\STRING{Test}$$ # ASCII characters $$\\begin{align*} \\KEY{Syntax} \\quad \\SYN{test} \\ ::= \\ &amp; \\ \\LEX{{!}~{\"}~{\\HASH}~{\\DOLLAR}~{\\PERCENT}~{\\AMPERSAND}~{\\APOSTROPHE}~{(}~{)}~{*}~{+}~{,}~{-}~{.}~{/}~{:}~{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{{&lt;}~{=}~{&gt;}~{?}~{@}~{[}~{\\BACKSLASH}~{]}~{\\CARET}~{\\UNDERSCORE}~{\\GRAVE}~{\\LEFTBRACE}~{|}~{\\RIGHTBRACE}~{\\TILDE}~A~Z~a~z~0~9} \\end{align*}$$ The apostrophe and the backslash have to be escaped in CBS: . Syntax test ::= ‘! “ # $ % &amp; ' ( ) * + , - . / : ;’ | ‘&lt; = &gt; ? @ [ \\ ] ^ _ ` { | } ~ A Z a z 0 9’ . [Funcons-beta]: /CBS-beta/math/Funcons-beta \"FUNCONS-BETA\" [Unstable-Funcons-beta]: /CBS-beta/math/Unstable-Funcons-beta \"UNSTABLE-FUNCONS-BETA\" [Languages-beta]: /CBS-beta/math/Languages-beta \"LANGUAGES-BETA\" [Unstable-Languages-beta]: /CBS-beta/math/Unstable-Languages-beta \"UNSTABLE-LANGUAGES-BETA\" [CBS-beta]: /CBS-beta \"CBS-BETA\" [TEST-Start.cbs]: https://github.com/plancomps/CBS-beta/blob/master/Unstable-Languages-beta/Test/TEST-cbs/TEST/TEST-Start/TEST-Start.cbs \"CBS SOURCE FILE ON GITHUB\" [PLAIN]: /CBS-beta/docs/Unstable-Languages-beta/Test/TEST-cbs/TEST/TEST-Start \"CBS SOURCE WEB PAGE\" [PRETTY]: /CBS-beta/math/Unstable-Languages-beta/Test/TEST-cbs/TEST/TEST-Start \"CBS-KATEX WEB PAGE\" [PDF]: /CBS-beta/math/Unstable-Languages-beta/Test/TEST-cbs/TEST/TEST-Start/TEST-Start.pdf \"CBS-LATEX PDF FILE\" [PLanCompS Project]: https://plancomps.github.io \"PROGRAMMING LANGUAGE COMPONENTS AND SPECIFICATIONS PROJECT HOME PAGE\" {::comment}{:/} . ",
    "url": "/cbs-latex/docs/kramdown/TEST-Start.md.html",
    "relUrl": "/docs/kramdown/TEST-Start.md.html"
  },"38": {
    "doc": "TEST-Start.part.tex",
    "title": "TEST-Start.part.tex",
    "content": "% \\begin{center} \\rule{3in}{0.4pt} \\end{center} \\begin{displaymath} \\KEY{Language} \\quad \\STRING{Test} \\end{displaymath} \\section{ASCII characters}\\hypertarget{ascii-characters}{}\\label{ascii-characters} \\begin{align*} \\KEY{Syntax} \\quad \\SYN{test} \\ ::= \\ &amp; \\ \\LEX{{!}~{\"}~{\\HASH}~{\\DOLLAR}~{\\PERCENT}~{\\AMPERSAND}~{\\APOSTROPHE}~{(}~{)}~{*}~{+}~{,}~{-}~{.}~{/}~{:}~{;}} \\\\ \\ \\mid \\ &amp; \\ \\LEX{{&lt;}~{=}~{&gt;}~{?}~{@}~{[}~{\\BACKSLASH}~{]}~{\\CARET}~{\\UNDERSCORE}~{\\GRAVE}~{\\LEFTBRACE}~{|}~{\\RIGHTBRACE}~{\\TILDE}~A~Z~a~z~0~9} \\end{align*} The apostrophe and the backslash have to be escaped in CBS: \\begin{verbatim} Syntax test ::= '! \" # $ % &amp; \\' ( ) * + , - . / : ;' | '&lt; = &gt; ? @ [ \\\\ ] ^ _ ` { | } ~ A Z a z 0 9' \\end{verbatim} % . ",
    "url": "/cbs-latex/docs/latex/TEST-Start/TEST-Start.part.tex.html",
    "relUrl": "/docs/latex/TEST-Start/TEST-Start.part.tex.html"
  },"39": {
    "doc": "CBS-KaTeX",
    "title": "CBS-KaTeX",
    "content": "cbs-katex.sty is a package defining KaTeX macros for use in web pages: . % cbs-katex.sty % \\SHADE{MATH} can be defined to produce a shaded background to highlight % inline MATH in running text: \\newcommand{\\SHADE}[1]{#1} % \\KEY{text}, \\STRING{text}, \\ATOM{text}, \\LEX{text} can be used in text or math mode: \\newcommand{\\KEY}[1]{\\textsf{\\textit{\\STYLE{Key}{#1}}}} \\newcommand{\\STRING}[1]{\\textsf{``\\texttt{#1}''}} \\newcommand{\\ATOM}[1]{\\textsf{`\\texttt{#1}'}} \\newcommand{\\LEX}[1]{\\textsf{\\STYLE{Key}{`}\\texttt{#1}\\STYLE{Key}{'}}} % The following commands produce ASCII characters that are treated specially by LaTeX: \\newcommand{\\HASH}{\\char`\\#} \\newcommand{\\DOLLAR}{\\char`\\$} \\newcommand{\\PERCENT}{\\char`\\%} \\newcommand{\\AMPERSAND}{\\char`\\&amp;} \\newcommand{\\APOSTROPHE}{\\char`\\'} \\newcommand{\\BACKSLASH}{\\char`\\\\} \\newcommand{\\CARET}{\\char`\\^} \\newcommand{\\UNDERSCORE}{\\char`\\_} \\newcommand{\\GRAVE}{\\char`\\`} \\newcommand{\\LEFTBRACE}{\\char`\\{} \\newcommand{\\RIGHTBRACE}{\\char`\\}} \\newcommand{\\TILDE}{\\textasciitilde} % {\\char`\\~} % \\FUN{name} highlights the name. % \\FUNDEC{name} declares Name.name as the target of links to name. % \\FUNREF{name} links name to the target Name.name in the current file. % \\FUNHYP{url}{file}{name} links name to Name.name at url/file/index.html. % Similarly for \\VAR{partvariable}, \\SYN{syntaxname}, \\SEM{semanticsName}, % and \\SECT{sectionnumber} % The kerns in \\SUB and \\VAR avoid overlaps with primes: \\newcommand{\\SUB}[1]{_{\\kern-2mu#1}} % PLAIN \\newcommand{\\STYLE}[2]{\\htmlClass{cbs-#1}{#2}} \\newcommand{\\VAR}[1]{\\STYLE{PartVariable}{\\textit{#1\\kern2mu}}} \\newcommand{\\FUN}[1]{\\STYLE{Name}{\\textsf{#1}}} \\newcommand{\\SYN}[1]{\\STYLE{SyntaxName}{\\textsf{#1}}} \\newcommand{\\SEM}[1]{\\STYLE{SemanticsName}{\\textsf{#1}}} \\newcommand{\\SECT}[1]{\\STYLE{SectionNumber}{\\textsf{#1}}} \\newcommand{\\LANG}[1]{\\STYLE{Language}{\\textsf{#1}}} % DEC \\newcommand{\\DEC}[3]{\\htmlId{#1:#2}{#3}} \\newcommand{\\VARDEC}[1]{\\DEC{PartVariable}{#1}{\\VAR{#1}}} \\newcommand{\\FUNDEC}[1]{\\DEC{Name}{#1}{\\FUN{#1}}} \\newcommand{\\SYNDEC}[1]{\\DEC{SyntaxName}{#1}{\\SYN{#1}}} \\newcommand{\\SEMDEC}[1]{\\DEC{SemanticsName}{#1}{\\SEM{#1}}} \\newcommand{\\SECTDEC}[1]{\\DEC{SectionNumber}{#1}{\\textsf{#1}}} % \\newcommand{\\LANGDEC}[1]{\\DEC{Language}{#1}{\\LANG{#1}}} % REF \\newcommand{\\REF}[3]{\\href{###1:#2}{#3}} \\newcommand{\\VARREF}[1]{\\REF{PartVariable}{#1}{\\VAR{#1}}} \\newcommand{\\FUNREF}[1]{\\REF{Name}{#1}{\\FUN{#1}}} \\newcommand{\\SYNREF}[1]{\\REF{SyntaxName}{#1}{\\SYN{#1}}} \\newcommand{\\SEMREF}[1]{\\REF{SemanticsName}{#1}{\\SEM{#1}}} \\newcommand{\\SECTREF}[1]{\\REF{SectionNumber}{#1}{\\SECT{#1}}} % \\newcommand{\\LANGREF}[1]{\\REF{Language}{#1}{\\LANG{#1}}} % HYP \\newcommand{\\HYP}[5]{\\href{#1/#2/index.html###3:#4}{#5}} \\newcommand{\\VARHYP}[3]{\\HYP{#1}{#2}{PartVariable}{#3}{\\VAR{#3}}} \\newcommand{\\FUNHYP}[3]{\\HYP{#1}{#2}{Name}{#3}{\\FUN{#3}}} \\newcommand{\\SYNHYP}[3]{\\HYP{#1}{#2}{SyntaxName}{#3}{\\SYN{#3}}} \\newcommand{\\SEMHYP}[3]{\\HYP{#1}{#2}{SemanticsName}{#3}{\\SEM{#3}}} \\newcommand{\\SECTHYP}[3]{\\HYP{#1}{#2}{SectionNumber}{#3}{\\SECT{#3}}} % \\newcommand{\\LANGHYP}[3]{\\HYP{#1}{#2}{Language}{#3}{\\LANG{#3}}} % CBS-beta/math hyperlinks \\newcommand\\CBSBETAMATH{https://plancomps.github.io/CBS-beta/math} \\newcommand\\VARCBS[3]{\\VARHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand\\FUNCBS[3]{\\FUNHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand\\SYNCBS[3]{\\SYNHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand\\SEMCBS[3]{\\SEMHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand\\SECTCBS[3]{\\SECTHYP{\\CBSBETAMATH/#1}{#2}{#3}} % \\newcommand{\\LANGCBS}[3]{\\LANGHYP{\\CBSBETAMATH/#1}{#2}{#3}} % \\LEFTPHRASE MATH \\RIGHTPHRASE produces [[ MATH ]] with proper brackets: \\newcommand{\\LEFTPHRASE}{\\llbracket} \\newcommand{\\RIGHTPHRASE}{\\rrbracket} % \\LEFTGROUP MATH \\RIGHTGROUP produces ( MATH ) where the parentheses are % highlighted the same as keywords: \\newcommand{\\LEFTGROUP}{\\STYLE{Key}{(}} \\newcommand{\\RIGHTGROUP}{\\STYLE{Key}{)}} % MATH\\PLUS produces a superscript + % MATH\\STAR produces a superscript * % MATH\\QUERY produces a superscript ? \\newcommand{\\PLUS}{ {}^{\\texttt{+}}} \\newcommand{\\STAR}{ {}^{\\texttt{*}}} \\newcommand{\\QUERY}{ {}^{\\texttt{?}}} % \\RULE{premise}{conclusion} produces % premise % ---------- % conclusion \\newcommand{\\RULE}[2]{\\mkern-2.2mu\\frac{\\displaystyle#1}{\\displaystyle#2}} % See https://tex.stackexchange.com/questions/337328/superscripts-appear-in-various-weird-places-in-fractions % \\RULE % {\\begin{aligned} &amp; premise \\\\ &amp; ... \\end{aligned}} % {\\begin{aligned} &amp; conclusion ... \\\\ &amp; ... \\end{aligned}} % produces an inference rule with left-aligned premises and split conclusion % premise % ... % -------------- % conclusion ... % ... % \\TO TYPE produces =&gt; TYPE \\newcommand{\\TO}{\\mathop{\\Rightarrow}} % TERM \\TRANS TERM produces TERM ---&gt; TERM \\newcommand{\\TRANS}{\\longrightarrow} % TERM \\xrightarrow{LABEL} TERM puts the label above the long arrow . ",
    "url": "/cbs-latex/docs/katex/cbs-katex.html",
    "relUrl": "/docs/katex/cbs-katex.html"
  },"40": {
    "doc": "CBS-LaTeX-LNCS",
    "title": "CBS-LaTeX-LNCS",
    "content": "cbs-latex-lncs.sty is a package of macro definitions for use in LaTeX documents: . % cbs-latex-lncs.sty % For formatting a Springer LNCS article that uses a limited subset of CBS. \\NeedsTeXFormat{LaTeX2e} \\RequirePackage{amsmath} \\RequirePackage{amssymb} \\RequirePackage{stmaryrd} \\RequirePackage{textcomp} \\RequirePackage[svgnames]{xcolor} \\RequirePackage{hyperref} \\newcommand{\\KEY}[1]{\\textcolor{Gray}{\\textsf{#1}}} \\newcommand{\\LEX}[1]{\\textcolor{Gray}{\\textsf{‘}}\\texttt{#1}\\textcolor{Gray}{\\textsf{’}}} \\newcommand{\\VAR}[1]{\\textit{#1}} \\newcommand{\\NAME}[1]{\\textcolor{DarkRed}{\\textsf{#1}}} \\newcommand{\\SYN}[1]{\\textcolor{DarkGreen}{\\textsf{#1}}} \\newcommand{\\SEM}[1]{\\textcolor{DarkBlue}{\\textsf{#1}}} \\newcommand{\\LEFTPHRASE}{[\\![} \\newcommand{\\RIGHTPHRASE}{]\\!]} \\newcommand{\\RULE}[2]{\\frac{\\begin{aligned}#1\\end{aligned}}{\\begin{aligned}#2\\end{aligned}}} \\newcommand{\\AXIOM}[1]{\\begin{aligned}#1\\end{aligned}} \\newcommand{\\TO}{\\mathop{\\Rightarrow}} \\newcommand{\\TRANS}{\\longrightarrow} . ",
    "url": "/cbs-latex/docs/latex/cbs-latex-lncs.html",
    "relUrl": "/docs/latex/cbs-latex-lncs.html"
  },"41": {
    "doc": "CBS-LaTeX",
    "title": "CBS-LaTeX",
    "content": "cbs-latex.sty is a package of macro definitions for use in LaTeX documents: . % cbs-latex.sty \\NeedsTeXFormat{LaTeX2e} \\ProvidesPackage{cbs-latex}[2021/08/27 CBS-LaTeX package] % This package uses sans-serif fonts for names in specifications. % For global sans-serif fonts, use together with the cmbright package. \\RequirePackage{amsmath} \\RequirePackage{amssymb} \\RequirePackage{stmaryrd} \\RequirePackage{textcomp} \\RequirePackage[svgnames]{xcolor} \\RequirePackage{imakeid} \\RequirePackage{hyperref} % \\hypersetup{filebordercolor={White}} % The following color names are used by the highlighting macros. % They are set to colors defined by the svgnames option of xcolor, % and can be reset locally in LaTeX documents. \\colorlet{Key}{Gray} \\colorlet{Name}{DarkRed} \\colorlet{SyntaxName}{DarkGreen} \\colorlet{SemanticsName}{DarkBlue} \\colorlet{PartVariable}{Black} \\colorlet{SectionNumber}{Black} \\colorlet{Language}{Black} % The following definition of \\SHADE{TEXT} produces a faint grey background % for CBS notation in running text: \\newcommand{\\SHADE}[1]{ {\\setlength{\\fboxsep}{0pt}\\colorbox{gray!10}{$\\strut#1\\strut$}}} % \\KEY{text}, \\STRING{text}, \\ATOM{text}, \\LEX{text} can be used in text or math mode. \\newcommand{\\KEY}[1]{\\textsf{\\textsl{\\STYLE{Key}{#1}}}} \\newcommand{\\STRING}[1]{\\textsf{``\\texttt{#1}''}} \\newcommand{\\ATOM}[1]{\\textsf{`\\texttt{#1}'}} \\newcommand{\\LEX}[1]{\\textsf{\\STYLE{Key}{`}\\texttt{#1}\\STYLE{Key}{'}}} % The following commands produce ASCII characters that are treated specially by LaTeX. \\newcommand{\\HASH}{\\char`\\#} \\newcommand{\\DOLLAR}{\\char`\\$} \\newcommand{\\PERCENT}{\\char`\\%} \\newcommand{\\AMPERSAND}{\\char`\\&amp;} \\newcommand{\\APOSTROPHE}{\\char`\\'} \\newcommand{\\BACKSLASH}{\\char`\\\\} \\newcommand{\\CARET}{\\char`\\^} \\newcommand{\\UNDERSCORE}{\\char`\\_} \\newcommand{\\GRAVE}{\\`{}} \\newcommand{\\LEFTBRACE}{\\char`\\{} \\newcommand{\\RIGHTBRACE}{\\char`\\}} \\newcommand{\\TILDE}{\\char`\\~} % \\FUN{name} highlights the name. % \\FUNDEC{name} declares Name.name as the target of links to name. % \\FUNREF{name} links name to the target Name.name in the current file. % \\FUNHYP{url}{file}{name} links name to Name.name at url/file/file.pdf. % Similarly for \\VAR, \\SYN, \\SEM, and \\SECT. \\newcommand{\\SUB}[1]{_{\\text{#1}}} % PLAIN \\newcommand{\\STYLE}[2]{\\textcolor{#1}{#2}} \\newcommand{\\VAR}[1]{\\STYLE{PartVariable}{\\textsl{#1\\/}}} \\newcommand{\\FUN}[1]{\\STYLE{Name}{\\textsf{#1}}} \\newcommand{\\SYN}[1]{\\STYLE{SyntaxName}{\\textsf{#1}}} \\newcommand{\\SEM}[1]{\\STYLE{SemanticsName}{\\textsf{#1}}} \\newcommand{\\SECT}[1]{\\STYLE{SectionNumber}{#1}} \\newcommand{\\LANG}[1]{\\STYLE{Language}{#1}} % DEC \\newcommand{\\DEC}[3]{\\raisebox{1.2\\ht\\strutbox}{\\hyperdef{#1}{#2}{}}#3} \\newcommand{\\VARDEC}[1]{\\DEC{PartVariable}{#1}{\\VAR{#1}}} \\newcommand{\\FUNDEC}[1]{\\DEC{Name}{#1}{\\FUN{#1}}} \\newcommand{\\SYNDEC}[1]{\\DEC{SyntaxName}{#1}{\\SYN{#1}}} \\newcommand{\\SEMDEC}[1]{\\DEC{SemanticsName}{#1}{\\SEM{#1}}} \\newcommand{\\SECTDEC}[1]{\\DEC{SectionNumber}{#1}{\\SECT{#1}}} % \\newcommand{\\LANGDEC}[1]{\\DEC{Language}{#1}{\\LANG{#1}}} % REF \\newcommand{\\REF}[3]{\\hyperref{\\jobname.pdf}{#1}{#2}{#3}} \\newcommand{\\VARREF}[1]{\\REF{PartVariable}{#1}{\\VAR{#1}}} \\newcommand{\\FUNREF}[1]{\\REF{Name}{#1}{\\FUN{#1}}} \\newcommand{\\SYNREF}[1]{\\REF{SyntaxName}{#1}{\\SYN{#1}}} \\newcommand{\\SEMREF}[1]{\\REF{SemanticsName}{#1}{\\SEM{#1}}} \\newcommand{\\SECTREF}[1]{\\REF{SectionNumber}{#1}{\\SECT{#1}}} % \\newcommand{\\LANGREF}[1]{\\REF{Language}{#1}{\\LANG{#1}}} % HYP \\newcommand{\\HYP}[5]{\\hyperref{#1/#2/#2.pdf}{#3}{#4}{#5}} \\newcommand{\\VARHYP}[3]{\\HYP{#1}{#2}{PartVariable}{#3}{\\VAR{#3}}} \\newcommand{\\FUNHYP}[3]{\\HYP{#1}{#2}{Name}{#3}{\\FUN{#3}}} \\newcommand{\\SYNHYP}[3]{\\HYP{#1}{#2}{SyntaxName}{#3}{\\SYN{#3}}} \\newcommand{\\SEMHYP}[3]{\\HYP{#1}{#2}{SemanticsName}{#3}{\\SEM{#3}}} \\newcommand{\\SECTHYP}[3]{\\HYP{#1}{#2}{SectionNumber}{#3}{\\SECT{#3}}} % \\newcommand{\\LANGHYP}[3]{\\HYP{#1}{#2}{Language}{#3}{\\LANG{#3}}} % CBS-beta/math hyperlinks \\newcommand{\\CBSBETA}{https://plancomps.github.io/CBS-beta/math} \\newcommand{\\VARCBS}[3]{\\VARHYP{\\CBSBETA/#1}{#2}{#3}} \\newcommand{\\FUNCBS}[3]{\\FUNHYP{\\CBSBETA/#1}{#2}{#3}} \\newcommand{\\SYNCBS}[3]{\\SYNHYP{\\CBSBETA/#1}{#2}{#3}} \\newcommand{\\SEMCBS}[3]{\\SEMHYP{\\CBSBETA/#1}{#2}{#3}} \\newcommand{\\SECTCBS}[3]{\\SECTHYP{\\CBSBETA/#1}{#2}{#3}} % \\newcommand{\\LANGCBS}[3]{\\LANGHYP{\\CBSBETA/#1}{#2}{#3}} % \\hyperdef and \\hyperref support both internal and external hyperlinks % (whereas \\hypertarget and \\hyperlink support only internal hyperlinks) % See https://tex.stackexchange.com/a/197244 regarding the use of \\raisebox % \\LEFTPHRASE MATH \\RIGHTPHRASE produces [[ MATH ]] with proper brackets: \\newcommand{\\LEFTPHRASE}{\\llbracket} \\newcommand{\\RIGHTPHRASE}{\\rrbracket} % \\LEFTGROUP MATH \\RIGHTGROUP produces ( MATH ) where the parentheses are % highlighted the same as keywords: \\newcommand{\\LEFTGROUP}{\\STYLE{Key}{(}} \\newcommand{\\RIGHTGROUP}{\\STYLE{Key}{)}} % MATH\\PLUS produces a superscript + % MATH\\STAR produces a superscript * % MATH\\QUERY produces a superscript ? \\newcommand{\\PLUS}{ {}^{\\text{\\scriptsize+}}} \\newcommand{\\STAR}{ {}^{\\raisebox{-0.5ex}{\\text{\\scriptsize*}}}} \\newcommand{\\QUERY}{ {}^{\\raisebox{-0.5ex}{\\text{\\scriptsize?}}}} % \\RULE{premise}{conclusion} produces % premise % ---------- % conclusion \\newcommand{\\RULE}[2]{\\mkern-2.1mu\\frac{\\displaystyle#1}{\\displaystyle#2}} % See https://tex.stackexchange.com/questions/337328/superscripts-appear-in-various-weird-places-in-fractions % \\RULE % {\\begin{aligned} &amp; premise \\\\ &amp; ... \\end{aligned}} % {\\begin{aligned} &amp; conclusion ... \\\\ &amp; ... \\end{aligned}} % produces an inference rule with left-aligned premises and split conclusion % premise % ... % -------------- % conclusion ... % ... % \\TO TYPE produces =&gt; TYPE \\newcommand{\\TO}{\\mathop{\\Rightarrow}} % TERM \\TRANS TERM produces TERM ---&gt; TERM \\newcommand{\\TRANS}{\\longrightarrow} % TERM \\xrightarrow{LABEL} TERM puts the label above the long arrow . ",
    "url": "/cbs-latex/docs/latex/cbs-latex.html",
    "relUrl": "/docs/latex/cbs-latex.html"
  },"42": {
    "doc": "CBS-MathJax-2.7",
    "title": "CBS-MathJax-2.7",
    "content": "cbs-mathjax-2.7.sty is a package defining MathJax-2.7 macros for formatting documents that include CBS specifications: . % cbs-mathjax-2.7.sty % For use with mathjax-2.7.html. % For formatting pages using CBS with MathJax-2.7. % The configuration TeX block should include: % MAXBUFFER : 10 * 1024, % extensions: [\"color.js\"], % unicode: { % fonts: \\\"STIXGeneral, 'Arial Unicode MS'\\\" % }, % See the docs at: % https://docs.mathjax.org/en/v2.7-latest/options/input-processors/TeX.html % https://docs.mathjax.org/en/v2.7-latest/tex.html#tex-and-latex-extensions % Using Jekyll, this file is included in a page by setting layout: cbs-mathjax-2.7 % in the front matter. \\newcommand{\\llbracket}{[\\![} \\newcommand{\\rrbracket}{]\\!]} \\newcommand{\\nobreak}{} % \\newcommand{\\ensuremath}[1]{\\(#1\\)} % for use in text mode % \\SHADE{MATH} can be defined to produce a shaded background to highlight % inline MATH in running text: \\newcommand{\\SHADE}[1]{#1} % \\KEY{text}, \\STRING{text}, \\ATOM{text}, \\LEX{text} can be used in text or math mode: \\newcommand{\\KEY}[1]{ {\\color{Grey}{\\textsf{#1}}}} % MathJax-2.7 does not support the combination of sans-serif and italic/slanted. \\newcommand{\\STRING}[1]{\\unicode{x201c}{\\small\\mathtt{#1}}\\unicode{x201d}} \\newcommand{\\ATOM}[1]{\\unicode{x2018}{\\small\\mathtt{#1}}\\unicode{x2019}} \\newcommand{\\LEX}[1]{\\unicode{x2018}{\\small\\mathtt{#1}}\\unicode{x2019}} % \\newcommand{\\KEY}[1]{\\textit{\\STYLE{Key}{#1}}} % \\newcommand{\\STRING}[1]{\\text{``$\\mathtt{#1}$''}} % \\newcommand{\\ATOM}[1]{\\text{`$\\mathtt{#1}$'}} % \\newcommand{\\LEX}[1]{\\text{`$\\mathtt{#1}$'}} % The following commands produce ASCII characters that are treated specially by LaTeX: \\newcommand{\\HASH}{\\unicode{x0023}} % {\\char`\\#} \\newcommand{\\DOLLAR}{\\unicode{x0024}} % {\\char`\\$} \\newcommand{\\PERCENT}{\\unicode{x0025}} % {\\char`\\%} \\newcommand{\\AMPERSAND}{\\unicode{x0026}} % {\\char`\\&amp;} \\newcommand{\\APOSTROPHE}{\\unicode{x0027}} % {\\char`\\'} \\newcommand{\\BACKSLASH}{\\unicode{x005c}} % {\\char`\\\\} \\newcommand{\\CARET}{\\unicode{x005e}} % {\\char`\\^} \\newcommand{\\UNDERSCORE}{\\unicode{x005f}} % {\\char`\\_} \\newcommand{\\GRAVE}{\\unicode{x0060}} % {\\char`\\`} \\newcommand{\\LEFTBRACE}{\\unicode{x007b}} % {\\char`\\{} \\newcommand{\\RIGHTBRACE}{\\unicode{x007d}} % {\\char`\\}} \\newcommand{\\TILDE}{\\unicode{x007e}} % {\\textasciitilde} % \\FUN{name} highlights the name. % \\FUNDEC{name} declares Name.name as the target of links to name. % \\FUNREF{name} links name to the target Name.name in the current file. % \\FUNHYP{url}{file}{name} links name to Name.name at url/file/file.pdf. % Similarly for \\VAR{partvariable}, \\SYN{syntaxname}, \\SEM{semanticsName}, % and \\SECT{sectionnumber} \\newcommand{\\SUB}[1]{_{#1}} % PLAIN \\newcommand{\\VAR}[1]{ {\\it\\small#1}} \\newcommand{\\FUN}[1]{ {\\color{DarkRed}{\\textsf{#1}}}} \\newcommand{\\SYN}[1]{ {\\color{DarkGreen}{\\textsf{#1}}}} \\newcommand{\\SEM}[1]{ {\\color{DarkBlue}{\\textsf{#1}}}} \\newcommand{\\SECT}[1]{\\text{#1}} \\newcommand{\\LANG}[1]{#1} % DEC \\newcommand{\\DEC}[3]{\\smash{\\raise{2.4ex}{\\cssId{#1:#2}{}}}#3} \\newcommand{\\VARDEC}[1]{\\DEC{PartVariable}{#1}{\\VAR{#1}}} \\newcommand{\\FUNDEC}[1]{\\DEC{Name}{#1}{\\FUN{#1}}} \\newcommand{\\SYNDEC}[1]{\\DEC{SyntaxName}{#1}{\\SYN{#1}}} \\newcommand{\\SEMDEC}[1]{\\DEC{SemanticsName}{#1}{\\SEM{#1}}} \\newcommand{\\SECTDEC}[1]{\\DEC{SectionNumber}{#1}{\\textsf{#1}}} % \\newcommand{\\LANGDEC}[1]{\\DEC{Language}{#1}{\\LANG{#1}}} % REF \\newcommand{\\REF}[3]{\\href{###1%3A#2}{#3}} \\newcommand{\\VARREF}[1]{\\REF{PartVariable}{#1}{\\VAR{#1}}} \\newcommand{\\FUNREF}[1]{\\REF{Name}{#1}{\\FUN{#1}}} \\newcommand{\\SYNREF}[1]{\\REF{SyntaxName}{#1}{\\SYN{#1}}} \\newcommand{\\SEMREF}[1]{\\REF{SemanticsName}{#1}{\\SEM{#1}}} \\newcommand{\\SECTREF}[1]{\\REF{SectionNumber}{#1}{\\SECT{#1}}} % \\newcommand{\\LANGREF}[1]{\\REF{Language}{#1}{\\LANG{#1}}} % HYP \\newcommand{\\HYP}[5]{\\href{#1/#2/index.html###3%3A#4}{#5}} \\newcommand{\\VARHYP}[3]{\\HYP{#1}{#2}{PartVariable}{#3}{\\VAR{#3}}} \\newcommand{\\FUNHYP}[3]{\\HYP{#1}{#2}{Name}{#3}{\\FUN{#3}}} \\newcommand{\\SYNHYP}[3]{\\HYP{#1}{#2}{SyntaxName}{#3}{\\SYN{#3}}} \\newcommand{\\SEMHYP}[3]{\\HYP{#1}{#2}{SemanticsName}{#3}{\\SEM{#3}}} \\newcommand{\\SECTHYP}[3]{\\HYP{#1}{#2}{SectionNumber}{#3}{\\SECT{#3}}} % \\newcommand{\\LANGHYP}[3]{\\HYP{#1}{#2}{Language}{#3}{\\LANG{#3}}} % CBS-beta/math hyperlinks \\newcommand{\\CBSBETAMATH}{https://plancomps.github.io/CBS-beta/math} \\newcommand{\\VARCBS}[3]{\\VARHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand{\\FUNCBS}[3]{\\FUNHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand{\\SYNCBS}[3]{\\SYNHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand{\\SEMCBS}[3]{\\SEMHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand{\\SECTCBS}[3]{\\SECTHYP{\\CBSBETAMATH/#1}{#2}{#3}} % \\newcommand{\\LANGCBS}[3]{\\LANGHYP{\\CBSBETAMATH/#1}{#2}{#3}} % \\LEFTPHRASE MATH \\RIGHTPHRASE produces [[ MATH ]] with proper brackets: \\newcommand{\\LEFTPHRASE}{\\llbracket} \\newcommand{\\RIGHTPHRASE}{\\rrbracket} % \\LEFTGROUP MATH \\RIGHTGROUP produces ( MATH ) where the parentheses are % highlighted the same as keywords: \\newcommand{\\LEFTGROUP}{\\color{Grey}{(}} \\newcommand{\\RIGHTGROUP}{\\color{Grey}{)}} % MATH\\PLUS produces a superscript + % MATH\\STAR produces a superscript * % MATH\\QUERY produces a superscript ? \\newcommand{\\PLUS}{ {}^{\\texttt{+}}} \\newcommand{\\STAR}{ {}^{\\texttt{*}}} \\newcommand{\\QUERY}{ {}^{\\texttt{?}}} % \\RULE{premise}{conclusion} produces % premise % ---------- % conclusion \\newcommand{\\RULE}[2]{\\frac{\\displaystyle#1}{\\displaystyle#2}} % See https://tex.stackexchange.com/questions/337328/superscripts-appear-in-various-weird-places-in-fractions % \\RULE % {\\begin{aligned} &amp; premise \\\\ &amp; ... \\end{aligned}} % {\\begin{aligned} &amp; conclusion ... \\\\ &amp; ... \\end{aligned}} % produces an inference rule with left-aligned premises and split conclusion % premise % ... % -------------- % conclusion ... % ... % \\TO TYPE produces =&gt; TYPE \\newcommand{\\TO}{\\mathop{\\Rightarrow}} % TERM \\TRANS TERM produces TERM ---&gt; TERM \\newcommand{\\TRANS}{\\longrightarrow} % TERM \\xrightarrow{LABEL} TERM puts the label above the long arrow . ",
    "url": "/cbs-latex/docs/mathjax-2.7/cbs-mathjax-2.7.html",
    "relUrl": "/docs/mathjax-2.7/cbs-mathjax-2.7.html"
  },"43": {
    "doc": "CBS-MathJax-LNCS",
    "title": "CBS-MathJax-LNCS",
    "content": "cbs-mathjax-lncs.sty is a package defining a few MathJax-2.7 macros for formatting an LNCS article that includes CBS specifications: . % cbs-mathjax-lncs.sty % When using Jekyll, include this file in a page by adding to the front matter: % layout: cbs-mathjax-lncs % The macros support formatting a subset of CBS. The MathJax-2.7 rendering is % compatible with the LaTeX rendering of articles that use cbs-latex-lncs.sty. % The page background is assumed to be white; for dark background pages, % the colors used below would need to be lighter. % Configure MathJax-2.7 by including in the TeX block: % MAXBUFFER : 10 * 1024, % extensions: [\"color.js\"] % % See the docs at: % https://docs.mathjax.org/en/v2.7-latest/options/input-processors/TeX.html % https://docs.mathjax.org/en/v2.7-latest/tex.html#tex-and-latex-extensions \\newcommand{\\KEY}[1]{\\textcolor{Gray}{\\textsf{#1}}} \\newcommand{\\LEX}[1]{\\textcolor{Gray}{\\textsf{‘}}\\texttt{#1}\\textcolor{Gray}{\\textsf{’}}} \\newcommand{\\VAR}[1]{\\textit{#1}} \\newcommand{\\NAME}[1]{\\textcolor{DarkRed}{\\textsf{#1}}} \\newcommand{\\SYN}[1]{\\textcolor{DarkGreen}{\\textsf{#1}}} \\newcommand{\\SEM}[1]{\\textcolor{DarkBlue}{\\textsf{#1}}} \\newcommand{\\LEFTPHRASE}{[\\![} \\newcommand{\\RIGHTPHRASE}{]\\!]} \\newcommand{\\RULE}[2]{\\frac{\\begin{aligned}#1\\end{aligned}}{\\begin{aligned}#2\\end{aligned}}} \\newcommand{\\AXIOM}[1]{\\begin{aligned}#1\\end{aligned}} \\newcommand{\\TO}{\\mathop{\\Rightarrow}} \\newcommand{\\TRANS}{\\longrightarrow} . ",
    "url": "/cbs-latex/docs/mathjax-2.7/cbs-mathjax-lncs.html",
    "relUrl": "/docs/mathjax-2.7/cbs-mathjax-lncs.html"
  },"44": {
    "doc": "CBS-MathJax",
    "title": "CBS-MathJax",
    "content": "cbs-mathjax.sty is a package defining MathJax-3 macros for use in web pages: . % cbs-mathjax.sty % For use with mathjax-3.html. % For formatting pages using CBS with MathJax-3. % When using Jekyll, include this file in a page by adding to the front matter: % layout: cbs-mathjax % or: % layout: cbs-mathjax-local % The macros support formatting all of CBS. The MathJax-3 rendering is % compatible with the LaTeX rendering of articles that use cbs-latex.sty. % The colors are specified using CSS, so that they can be changed according % to the page background color. % The configuration tex block should include: % maxBuffer : 10 * 1024 % The output block should include: % mtextFont: 'sans-serif' % See the docs at: % ??? \\newcommand{\\llbracket}{[\\![} \\newcommand{\\rrbracket}{]\\!]} \\newcommand{\\nobreak}{} % \\SHADE{MATH} can be defined to produce a shaded background to highlight % inline MATH in running text: \\newcommand{\\SHADE}[1]{#1} % \\STYLE{STYLE-NAME}{TEXT-OR-MATH} lets CSS determine the color of TEXT-OR-MATH, % so that it can change when a web page changes between light and dark modes. % STYLE-NAME should be either Key, PartVariable, Name, SyntaxName, SemanticsName, % Language, or SectNumber. % TO DO: Improve the style names! \\newcommand{\\STYLE}[2]{\\class{cbs-#1}{#2}} % \\KEY{text}, \\STRING{text}, \\ATOM{text}, \\LEX{text} can be used in text or math. % When the MathJax configuration includes mtextFont: 'sans-serif', \\KEY{text} % renders as slanted sans-serif, but \\VAR{text} still renders in a serif font. \\newcommand{\\KEY}[1]{\\textit{\\STYLE{Key}{#1}}} \\newcommand{\\STRING}[1]{\\text{``$\\mathtt{#1}$''}} \\newcommand{\\ATOM}[1]{\\text{`$\\mathtt{#1}$'}} \\newcommand{\\LEX}[1]{\\text{\\STYLE{Key}{`}$\\mathtt{#1}$\\STYLE{Key}{'}}} % The following commands produce ASCII characters that are treated specially by LaTeX: \\newcommand{\\HASH}{\\unicode{x0023}} % {\\char`\\#} \\newcommand{\\DOLLAR}{\\unicode{x0024}} % {\\char`\\$} \\newcommand{\\PERCENT}{\\unicode{x0025}} % {\\char`\\%} \\newcommand{\\AMPERSAND}{\\unicode{x0026}} % {\\char`\\&amp;} \\newcommand{\\APOSTROPHE}{\\unicode{x0027}} % {\\char`\\'} \\newcommand{\\BACKSLASH}{\\unicode{x005c}} % {\\char`\\\\} \\newcommand{\\CARET}{\\unicode{x005e}} % {\\char`\\^} \\newcommand{\\UNDERSCORE}{\\unicode{x005f}} % {\\char`\\_} \\newcommand{\\GRAVE}{\\unicode{x0060}} % {\\char`\\`} \\newcommand{\\LEFTBRACE}{\\unicode{x007b}} % {\\char`\\{} \\newcommand{\\RIGHTBRACE}{\\unicode{x007d}} % {\\char`\\}} \\newcommand{\\TILDE}{\\unicode{x007e}} % {\\textasciitilde} % \\FUN{name} highlights the name. % \\FUNDEC{name} declares Name.name as the target of links to name. % \\FUNREF{name} links name to the target Name.name in the current file. % \\FUNHYP{url}{file}{name} links name to Name.name at url/file/file.pdf. % Similarly for \\VAR{partvariable}, \\SYN{syntaxname}, \\SEM{semanticsName}, % and \\SECT{sectionnumber} % The kerns in \\SUB and \\VAR avoid overlaps with primes: \\newcommand{\\SUB}[1]{_{\\kern-2mu\\STYLE{PartVariable}{#1}}} % PLAIN \\newcommand{\\VAR}[1]{\\STYLE{PartVariable}{\\it#1\\kern2mu}} % \\it#1 currently formats #1 in the text italic font, independently of mtextFont. \\newcommand{\\FUN}[1]{\\STYLE{Name}{\\textsf{#1}}} \\newcommand{\\SYN}[1]{\\STYLE{SyntaxName}{\\textsf{#1}}} \\newcommand{\\SEM}[1]{\\STYLE{SemanticsName}{\\textsf{#1}}} \\newcommand{\\SECT}[1]{\\STYLE{SectionNumber}{\\textsf{#1}}} \\newcommand{\\LANG}[1]{\\STYLE{Language}{#1}} % DEC \\newcommand{\\DEC}[3]{\\smash{\\raise{2.4ex}{\\cssId{#1:#2}{}}}#3} \\newcommand{\\VARDEC}[1]{\\DEC{PartVariable}{#1}{\\VAR{#1}}} \\newcommand{\\FUNDEC}[1]{\\DEC{Name}{#1}{\\FUN{#1}}} \\newcommand{\\SYNDEC}[1]{\\DEC{SyntaxName}{#1}{\\SYN{#1}}} \\newcommand{\\SEMDEC}[1]{\\DEC{SemanticsName}{#1}{\\SEM{#1}}} \\newcommand{\\SECTDEC}[1]{\\DEC{SectionNumber}{#1}{\\textsf{#1}}} % \\newcommand{\\LANGDEC}[1]{\\DEC{Language}{#1}{\\LANG{#1}}} % REF \\newcommand{\\REF}[3]{\\href{###1%3A#2}{#3}} \\newcommand{\\VARREF}[1]{\\REF{PartVariable}{#1}{\\VAR{#1}}} \\newcommand{\\FUNREF}[1]{\\REF{Name}{#1}{\\FUN{#1}}} \\newcommand{\\SYNREF}[1]{\\REF{SyntaxName}{#1}{\\SYN{#1}}} \\newcommand{\\SEMREF}[1]{\\REF{SemanticsName}{#1}{\\SEM{#1}}} \\newcommand{\\SECTREF}[1]{\\REF{SectionNumber}{#1}{\\SECT{#1}}} % \\newcommand{\\LANGREF}[1]{\\REF{Language}{#1}{\\LANG{#1}}} % HYP \\newcommand{\\HYP}[5]{\\href{#1/#2/index.html###3%3A#4}{#5}} \\newcommand{\\VARHYP}[3]{\\HYP{#1}{#2}{PartVariable}{#3}{\\VAR{#3}}} \\newcommand{\\FUNHYP}[3]{\\HYP{#1}{#2}{Name}{#3}{\\FUN{#3}}} \\newcommand{\\SYNHYP}[3]{\\HYP{#1}{#2}{SyntaxName}{#3}{\\SYN{#3}}} \\newcommand{\\SEMHYP}[3]{\\HYP{#1}{#2}{SemanticsName}{#3}{\\SEM{#3}}} \\newcommand{\\SECTHYP}[3]{\\HYP{#1}{#2}{SectionNumber}{#3}{\\SECT{#3}}} % \\newcommand{\\LANGHYP}[3]{\\HYP{#1}{#2}{Language}{#3}{\\LANG{#3}}} % CBS-beta/math hyperlinks \\newcommand{\\CBSBETAMATH}{https://plancomps.github.io/CBS-beta/math} \\newcommand{\\VARCBS}[3]{\\VARHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand{\\FUNCBS}[3]{\\FUNHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand{\\SYNCBS}[3]{\\SYNHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand{\\SEMCBS}[3]{\\SEMHYP{\\CBSBETAMATH/#1}{#2}{#3}} \\newcommand{\\SECTCBS}[3]{\\SECTHYP{\\CBSBETAMATH/#1}{#2}{#3}} % \\newcommand{\\LANGCBS}[3]{\\LANGHYP{\\CBSBETAMATH/#1}{#2}{#3}} % \\LEFTPHRASE MATH \\RIGHTPHRASE produces [[ MATH ]] with proper brackets: \\newcommand{\\LEFTPHRASE}{\\llbracket} \\newcommand{\\RIGHTPHRASE}{\\rrbracket} % \\LEFTGROUP MATH \\RIGHTGROUP produces ( MATH ) where the parentheses are % highlighted the same as keywords: \\newcommand{\\LEFTGROUP}{\\STYLE{Key}{(}} \\newcommand{\\RIGHTGROUP}{\\STYLE{Key}{)}} % MATH\\PLUS produces a superscript + % MATH\\STAR produces a superscript * % MATH\\QUERY produces a superscript ? \\newcommand{\\PLUS}{ {}^{\\texttt{+}}} \\newcommand{\\STAR}{ {}^{\\texttt{*}}} \\newcommand{\\QUERY}{ {}^{\\texttt{?}}} % \\RULE{premise}{conclusion} produces % premise % ---------- % conclusion \\newcommand{\\RULE}[2]{\\frac{\\displaystyle#1}{\\displaystyle#2}} % See https://tex.stackexchange.com/questions/337328/superscripts-appear-in-various-weird-places-in-fractions % \\RULE % {\\begin{aligned} &amp; premise \\\\ &amp; ... \\end{aligned}} % {\\begin{aligned} &amp; conclusion ... \\\\ &amp; ... \\end{aligned}} % produces an inference rule with left-aligned premises and split conclusion % premise % ... % -------------- % conclusion ... % ... % \\TO TYPE produces =&gt; TYPE \\newcommand{\\TO}{\\mathop{\\Rightarrow}} % TERM \\TRANS TERM produces TERM ---&gt; TERM \\newcommand{\\TRANS}{\\longrightarrow} % TERM \\xrightarrow{LABEL} TERM puts the label above the long arrow . ",
    "url": "/cbs-latex/docs/mathjax-3/cbs-mathjax.html",
    "relUrl": "/docs/mathjax-3/cbs-mathjax.html"
  },"45": {
    "doc": "Home",
    "title": "CBS-LaTeX",
    "content": "This site presents cbs-latex, a small LaTeX package for CBS specifications. When CBS is marked up using the package, LaTeX formatting produces mathematical typography, suitable for inclusion in published articles. It also includes KaTeX and MathJax configurations that produce similar-looking results from the same LaTeX mark-up when embedded in web pages. The highlighting of CBS symbols by cbs-latex is comparable to that shown on the CBS-beta website (and to that provided by the CBS editor implemented in Spoofax). Navigation in CBS specifications is supported by hyperlinks from names to declarations. Markup using cbs-latex is quite low-level. This makes it easy to adjust the layout to fit the intended page width, but tedious to write. Generation of marked-up CBS from CBS source text is currently being implemented in Spoofax; when complete, the tool will be made freely available as an Eclipse plugin. ",
    "url": "/cbs-latex/#cbs-latex",
    "relUrl": "/#cbs-latex"
  },"46": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/cbs-latex/",
    "relUrl": "/"
  },"47": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "The Local browsing page explains how to build and browse a copy of this website. The Macros page explains how to mark up CBS specifications when using the CBS-LaTeX package. It provides links to the macro definitions for use with LaTeX, KaTeX, and MathJax. The Samples page links to marked-up CBS specifications, and to the results of formatting them to produce web pages and PDFs. It also explains how the web pages and PDFs were produced using Jekyll, kramdown, and LaTeX. The Issues page on GitHub is to list known problems with the package. ",
    "url": "/cbs-latex/docs/intro.html",
    "relUrl": "/docs/intro.html"
  },"48": {
    "doc": "Introduction",
    "title": "Browsing",
    "content": "PDFs Acrobat Reader is recommended. The Preview app on macOS does not support hyperlinks from references to declarations, which are needed for navigation in multi-file CBS specifications. PDFs can also be browsed directly in Firefox. Web pages Currently, KaTeX renders the CBS-LaTeX markup faster than MathJax. For example, compare this KaTeX page with the corresponding MathJax page. The appearance of the web pages (at least when using recent versions of Firefox and Safari) is close to that of the PDFs produced from the same CBS files using pdflatex. ",
    "url": "/cbs-latex/docs/intro.html#browsing",
    "relUrl": "/docs/intro.html#browsing"
  },"49": {
    "doc": "Local browsing",
    "title": "Local browsing",
    "content": "This page explains how to browse and edit the website locally. In case of difficulties, see more on Testing your GitHub Pages site locally with Jekyll. ",
    "url": "/cbs-latex/docs/local.html",
    "relUrl": "/docs/local.html"
  },"50": {
    "doc": "Local browsing",
    "title": "Requirements",
    "content": ". | Ruby 2.6.5 or &gt;= 2.7.2 . | Jekyll 3.9.x or 4.x . | . ",
    "url": "/cbs-latex/docs/local.html#requirements",
    "relUrl": "/docs/local.html#requirements"
  },"51": {
    "doc": "Local browsing",
    "title": "Setting up",
    "content": ". | Clone or download a zip of the cbs-latex repository. | Run the following commands in a terminal from the cbs-latex directory: . bundle update bundle exec jekyll serve . The default port 4000 can be overridden using bundle exec jekyll serve --port ..... | . ",
    "url": "/cbs-latex/docs/local.html#setting-up",
    "relUrl": "/docs/local.html#setting-up"
  },"52": {
    "doc": "Local browsing",
    "title": "Browsing",
    "content": "Open a web browser at http://localhost:4000/cbs-latex/ (the final / is required). Stop the local server with Control-C when no longer needed. ",
    "url": "/cbs-latex/docs/local.html#browsing",
    "relUrl": "/docs/local.html#browsing"
  },"53": {
    "doc": "Local browsing",
    "title": "Editing",
    "content": "Jekyll updates the web pages when you change the Markdown files (it takes a few seconds). ",
    "url": "/cbs-latex/docs/local.html#editing",
    "relUrl": "/docs/local.html#editing"
  },"54": {
    "doc": "Local browsing",
    "title": "Colors",
    "content": "The CBS highlighting colors can be changed by editing the SCSS files in _sass/custom.1 . When browsing these web pages on GitHub, the color scheme can be toggled between light and dark. The toggle button is at the top of the navigation panel. For local browsing, the following configuration options are provided: . color_scheme set to dark to disable the light scheme toggle_color_scheme set to dark to support toggling between light and dark toggle_page_url leave unset to display the toggle button on all pages toggle_auto_mode set to true to toggle automatically when the system mode preference changes toggle_text_1 set the label on the button for changing to the dark scheme toggle_text_2 set the label on the button for changing to the light scheme . | The current highlighting colors should be distinguishable to users with Deuteranopia (tested using Color Oracle). &#8617; . | . ",
    "url": "/cbs-latex/docs/local.html#colors",
    "relUrl": "/docs/local.html#colors"
  },"55": {
    "doc": "Macros - MathJax",
    "title": "Macros",
    "content": "This page explains how to mark up CBS specifications in LaTeX when using the cbs-latex package. It also provides links to the macro definitions for use with LaTeX, KaTeX, and MathJax. | Required packages | Names . | Hyperlinks | Variables | . | Language specifications . | Grammars | Syntactic phrase types | Lexemes | Semantic functions | . | Funcon specifications . | Datatype specifications | Entity declarations | Rules | Formulae | Terms | Other specifications | . | Alignment | . Markup using CBS-LaTeX is quite low-level. This makes it easy to adjust the layout to fit the intended page width, but tedious to write.1 . CBS-LaTeX provides the following files: . | cbs-latex.sty: a package of macro definitions for use in LaTeX documents | cbs-katex.sty: a configuration defining KaTeX macros for use in web pages | cbs-mathjax.sty: a configuration defining MathJax macros for use in web pages | . The packages include some explanatory comments. Each package defines the same collection of LaTeX macro names, taking the same arguments. The rendering of the macros should have the same layout and symbols, regardless of which format is used, except that the font families may differ. All macro names are uppercase, to reduce the risk of clashes with macros defined by other packages.2 They are intended for use primarily in math mode. ",
    "url": "/cbs-latex/docs/macros-mathjax.html#macros",
    "relUrl": "/docs/macros-mathjax.html#macros"
  },"56": {
    "doc": "Macros - MathJax",
    "title": "Required packages",
    "content": "When used with \\(\\LaTeX\\), the cbs-latex package requires the following packages (all included in TeXLive): . amsmath Provides various environments and commands for math alignment, including the align and aligned environments. amssymb Provides an extended math symbol collection, including \\(\\leadsto\\). stmaryrd Provides symbols for TCS, including \\(\\llbracket\\) and \\(\\rrbracket\\). textcomp Provides commands for various characters in text mode, including \\(\\LEX{\\APOSTROPHE}\\).3 xcolor The svgnames option provides color names that can also be used on web pages (see the W3schools Colors Tutorial). hyperref Needed for creating hyperlinks. Use \\hypersetup{filebordercolor=White} to avoid colored boxes around references to names in CBS specifications. The following packages are not required, but using them may make the formatting of running text in \\(\\LaTeX\\) closer to that produced from Markdown on web pages: . cmbright Global sans-serif fonts. geometry Allows adjustment of page dimensions. Set in the preamble, e.g., \\geometry{a4paper, textwidth=150mm, top=10mm, bottom=20mm, footnotesep=10mm plus 10mm}. parskip Uses blank lines to separate paragraphs. ",
    "url": "/cbs-latex/docs/macros-mathjax.html#required-packages",
    "relUrl": "/docs/macros-mathjax.html#required-packages"
  },"57": {
    "doc": "Macros - MathJax",
    "title": "Names",
    "content": "CBS specifications involve declaration and reference of names for funcons, entities, syntax sorts, and semantic functions.4 The macro used for a name depends on the namespace. Names in different namespaces have different highlighting colors, and the colors depend on the configured color_scheme. | Plain CBS | CBS-LaTeX | Formatted CBS | . | funcon-name | \\FUN{funcon-name} | \\(\\FUN{funcon-name}\\) | . | entity-name | \\FUN{entity-name} | \\(\\FUN{entity-name}\\) | . | syntax-name | \\SYN{syntax-name} | \\(\\SYN{syntax-name}\\) | . | semantics-name | \\SEM{semantics-name} | \\(\\SEM{semantics-name}\\) | . | §2.1 A section | \\textsf{\\S\\SECT{2.1} A section} | \\(\\textsf{\\S\\SECT{2.1} A section}\\) | . Hyperlinks . Variants of the name markup macros indicate that the occurrence of a name is a declaration or a reference. In both PDFs and web pages, each name reference becomes a hyperlink to the declaration of that name. A name should not be declared (in the same namespace) more than once per document. | Plain CBS | CBS-LaTeX | Formatted CBS | . | name | \\FUNDEC{name} | \\(\\FUNDEC{name}\\) | . | name | \\FUNREF{name} | \\(\\FUNREF{name}\\) | . | name | \\FUNHYP{url}{file}{name} | \\(\\FUNHYP{.}{macros}{name}\\) | . Similarly for \\SYN, \\SEM, \\SECT. Variables . The macro for variable names formats its argument in text mode. A Greek letter used as a variable name has to be in math mode. Subscripts should be marked up directly after the variable name, to ensure that they are in the intended sans serif font (and to support italic spacing correction). Any primes and multiplicity are written after the name and subscript. | Plain CBS | CBS-LaTeX | Formatted CBS | . | X' | \\VAR{X}' | \\(\\VAR{X}'\\) | . | X12'' | \\VAR{X}\\SUB{12}'' | \\(\\VAR{X}\\SUB{12}''\\) | . | X+ | \\VAR{X}\\PLUS | \\(\\VAR{X}\\PLUS\\) | . | X? | \\VAR{X}\\QUERY | \\(\\VAR{X}\\QUERY\\) | . | X* | \\VAR{X}\\STAR | \\(\\VAR{X}\\STAR\\) | . | Rho | \\rho or \\VAR{$\\rho$} | \\(\\VAR{$\\rho$}\\) | . ",
    "url": "/cbs-latex/docs/macros-mathjax.html#names",
    "relUrl": "/docs/macros-mathjax.html#names"
  },"58": {
    "doc": "Macros - MathJax",
    "title": "Language specifications",
    "content": "Grammars . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Lexis ... | \\KEY{Lexis} ~ ... | \\(\\KEY{Lexis} ~ \\ldots\\) | . | Syntax ... | \\KEY{Syntax} ~ ... | \\(\\KEY{Syntax} ~ \\ldots\\) | . | ...:... ::= ... | ...:... ::= ... | \\(\\ldots:\\ldots ::= \\ldots\\) | . Syntactic phrase types . | Plain CBS | CBS-LaTeX | Formatted CBS | . | syntax-name | \\SYN{syntax-name} | \\(\\SYN{syntax-name}\\) | . | 'lexeme' | \\LEX{lexeme} | \\(\\LEX{lexeme}\\) | . | P_1 P_2 | P_1 ~ P_2 | \\(P_1 ~ P_2\\) | . | P_1 | P_2 | P_1 \\mid P_2 | \\(P_1 \\mid P_2\\) | . | P+ | P\\PLUS | \\(P\\PLUS\\) | . | P? | P\\QUERY | \\(P\\QUERY\\) | . | P* | P\\STAR | \\(P\\STAR\\) | . | (P) | \\LEFTGROUP P \\RIGHTGROUP | \\(\\LEFTGROUP P \\RIGHTGROUP\\) | . Lexemes . Characters in lexemes are marked up as follows. Those that require macros include all the special characters of \\(\\LaTeX\\), and characters that look different in text and math mode. | Plain CBS | CBS-LaTeX | Formatted CBS | . | '0...9A...Za...z' | \\LEX{0...9A...Za...z} | \\(\\LEX{0...9A...Za...z}\\) | . | '!()*,./:;=?@[]' | \\LEX{!()*,./:;=?@[]} | \\(\\LEX{!()*,./:;=?@[]}\\) | . | '#' | \\LEX{\\HASH} | \\(\\LEX{\\HASH}\\) | . | '$' | \\LEX{\\DOLLAR} | \\(\\LEX{\\DOLLAR}\\) | . | '%' | \\LEX{\\PERCENT} | \\(\\LEX{\\PERCENT}\\) | . | '&amp;' | \\LEX{\\AMPERSAND} | \\(\\LEX{\\AMPERSAND}\\) | . | '\\'' | \\LEX{\\APOSTROPHE} | \\(\\LEX{\\APOSTROPHE}\\) | . | '\\\\' | \\LEX{\\BACKSLASH} | \\(\\LEX{\\BACKSLASH}\\) | . | '^' | \\LEX{\\CARET} | \\(\\LEX{\\CARET}\\) | . | '_' | \\LEX{\\UNDERSCORE} | \\(\\LEX{\\UNDERSCORE}\\) | . | '`' | \\LEX{\\GRAVE} | \\(\\LEX{\\GRAVE}\\) | . | '{' | \\LEX{\\LEFTBRACE} | \\(\\LEX{\\LEFTBRACE}\\) | . | '}' | \\LEX{\\RIGHTBRACE} | \\(\\LEX{\\RIGHTBRACE}\\) | . | '~' | \\LEX{\\TILDE} | \\(\\LEX{\\TILDE}\\) | . Semantic functions . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Semantics s-n[[_:...]] : ... | \\KEY{Semantics} ~ \\SEMDEC{s-n} \\LEFTPHRASE \\_ : ... \\RIGHTPHRASE : ... | \\(\\KEY{Semantics} ~ \\SEM{s-n} \\LEFTPHRASE \\_ : \\nobreak \\ldots \\RIGHTPHRASE : \\ldots\\) | . | Rule ... = ... | \\KEY{Rule} ~ ... = ... | \\(\\KEY{Rule} ~ \\ldots = \\ldots\\) | . | [[...]] | \\LEFTPHRASE ... \\RIGHTPHRASE | \\(\\LEFTPHRASE \\ldots \\RIGHTPHRASE\\) | . | s-n[[...]] | \\SEMREF{s-n} \\LEFTPHRASE ... \\RIGHTPHRASE | \\(\\SEMREF{s-n} \\LEFTPHRASE \\ldots \\RIGHTPHRASE\\) | . ",
    "url": "/cbs-latex/docs/macros-mathjax.html#language-specifications",
    "relUrl": "/docs/macros-mathjax.html#language-specifications"
  },"59": {
    "doc": "Macros - MathJax",
    "title": "Funcon specifications",
    "content": "| Plain CBS | CBS-LaTeX | Formatted CBS | . | Funcon f-n ... : ... | \\KEY{Funcon} ~ \\FUNDEC{f-n} ... : ... | \\(\\KEY{Funcon} ~ \\FUN{f-n} \\ldots : \\ldots\\) | . | Alias f-n1 = f-n2 | \\KEY{Alias} ~ \\FUNDEC{f-n1} = \\FUNREF{f-n2} | \\(\\KEY{Alias} ~ \\FUNDEC{f-n1} = \\FUNREF{f-n2}\\) | . | Type t-n ... | \\KEY{Type} ~ \\FUNDEC{t-n} ... | \\(\\KEY{Type} ~ \\FUNDEC{t-n} \\ldots\\) | . Datatype specifications . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Datatype d-n ::= ... | \\KEY{Datatype} ~ \\FUNDEC{d-n} ::= ... | \\(\\KEY{Datatype} ~ \\FUNDEC{d-n} ::= \\ldots\\) | . | ... | ... | ... \\mid ... | \\(\\ldots \\mid \\ldots\\) | . | c-n | \\FUNDEC{c-n} | \\(\\FUNDEC{c-n}\\) | . | c-n(...) | \\FUNDEC{c-n}(...) | \\(\\FUNDEC{c-n}(\\ldots)\\) | . | { _ : ... } | \\{ ~ _ : ... ~ \\} | \\(\\{ ~ \\_ : \\ldots ~ \\}\\) | . Entity declarations . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Entity ... | \\KEY{Entity} ~ ... | \\(\\KEY{Entity} ~ \\ldots\\) | . | e-n(_:...)|- _ ---&gt; _ | \\FUNDEC{e-n}(\\_:...) \\vdash \\_\\TRANS\\_ | \\(\\FUNDEC{e-n}(\\_ : \\ldots) \\vdash \\_ \\TRANS \\_\\) | . | &lt;_,e-n(_:...)&gt; ---&gt; &lt;_,e-n(_:...)&gt; | \\langle\\_,\\FUNDEC{e-n}(\\_:...)\\rangle \\TRANS \\langle\\_,\\FUN{e-n}(\\_:...)\\rangle | \\(\\langle\\_,\\FUN{e-n}(\\_:\\ldots)\\rangle \\TRANS \\langle\\_,\\FUN{e-n}(\\_:\\ldots)\\rangle\\) | . | _ -- e-n.(_:...) -&gt; _ | \\_ \\xrightarrow{\\FUNDEC{e-n}.(\\_:...)} \\_ | \\(\\_ \\xrightarrow{\\FUN{e-n}.(\\_:\\ldots)} \\_\\) | . The . in the last line above should be !, ?, or omitted. Rules . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Rule ... | \\KEY{Rule} ~ ... | \\(\\KEY{Rule} ~ \\ldots\\) | . | Rule ... ⏎ ... | \\begin{aligned} \\KEY{Rule} ~ &amp; ...\\\\ &amp; ... \\end{aligned} | \\(\\begin{aligned}\\KEY{Rule}~&amp;\\ldots\\\\[-2ex]&amp;\\quad\\ldots\\end{aligned}\\) | . | Rule ... ⏎ ---- ⏎ ... | \\KEY{Rule} ~ \\RULE{...}{...} | \\(\\KEY{Rule} ~ \\RULE{\\ldots}{\\ldots}\\) | . | Otherwise ... | \\KEY{Otherwise} ~ ... | \\(\\KEY{Otherwise} ~ \\ldots\\) | . | Assert ... | \\KEY{Assert} ~ ... | \\(\\KEY{Assert} ~ \\ldots\\) | . Formulae . | Plain CBS | CBS-LaTeX | Formatted CBS | . | ... ~&gt; ... | ... \\leadsto ... | \\(\\ldots \\leadsto \\ldots\\) | . | ... == ... | ... == ... | \\(\\ldots == \\ldots\\) | . | ... =/= ... | ... \\neq ... | \\(\\ldots \\neq \\ldots\\) | . | ... &lt;: ... | ... &lt;: ... | \\(\\ldots &lt;: \\ldots\\) | . | ... ---&gt; ... | ... \\TRANS ... | \\(\\ldots \\TRANS \\ldots\\) | . | e-n(...)|- ...---&gt;... | \\FUN{e-n}(...) \\vdash ...\\TRANS... | \\(\\FUNREF{e-n}(\\ldots) \\vdash \\ldots \\TRANS \\ldots\\) | . | &lt;...,e-n(...)&gt; ---&gt; &lt;...,e-n(...)&gt; | \\langle...,\\FUN{e-n}(...)\\rangle \\TRANS \\langle...,\\FUN{e-n}(...)\\rangle | \\(\\langle\\ldots,\\FUN{e-n}(\\ldots)\\rangle \\TRANS \\langle\\ldots,\\FUN{e-n}(\\ldots)\\rangle\\) | . | ... -- e-n.(...) -&gt; ... | ...\\xrightarrow{\\FUN{e-n}.(...)}... | \\(\\ldots\\xrightarrow{\\FUN{e-n}.(\\ldots)}\\ldots\\) | . The . in the last line above should be !, ?, or omitted. Terms . | Plain CBS | CBS-LaTeX | Formatted CBS | . | ( ) | ( ~ ) | \\(( ~ )\\) | . | '...' | \\ATOM{text} | \\(\\ATOM{text}\\) | . | 42 | 42 | \\(42\\) | . | 2.14 | 2.14 | \\(2.14\\) | . | \"...\" | \\STRING{text} | \\(\\STRING{text}\\) | . | ... : ... | ... : ... | \\(\\ldots : \\ldots\\) | . | ... =&gt; ... | ... \\TO ... | \\(\\ldots \\TO \\ldots\\) | . | ...+ | ...\\PLUS | \\(\\ldots\\PLUS\\) | . | ...? | ...\\QUERY | \\(\\ldots\\QUERY\\) | . | ...* | ...\\STAR | \\(\\ldots\\STAR\\) | . | ... | ... | ... \\mid ... | \\(\\ldots \\mid \\ldots\\) | . | ... &amp; ... | ... \\&amp; ... | \\(\\ldots \\&amp; \\ldots\\) | . | ...^N | ...^{N} | \\(\\ldots^{N}\\) | . | (..., ...) | (..., ...) | \\((\\ldots, \\ldots)\\) | . | [..., ...] | [..., ...] | \\([\\ldots, \\ldots]\\) | . | {..., ...} | \\{..., ...\\} | \\(\\{\\ldots, \\ldots\\}\\) | . | {...|-&gt;..., ...} | \\{... \\mapsto ..., \\cdots\\} | \\(\\{\\ldots \\mapsto \\ldots, \\cdots\\}\\) | . Other specifications . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Auxiliary K ... | \\KEY{Auxiliary K} ~ ... | \\(\\KEY{Auxiliary K} ~ \\ldots\\) | . | Built-in K ... | \\KEY{Built-in K} ~ ... | \\(\\KEY{Built-in K} ~ \\ldots\\) | . | Meta-variables ... | \\KEY{Meta-variables} ~ ... | \\(\\KEY{Meta-variables} ~ \\ldots\\) | . ",
    "url": "/cbs-latex/docs/macros-mathjax.html#funcon-specifications",
    "relUrl": "/docs/macros-mathjax.html#funcon-specifications"
  },"60": {
    "doc": "Macros - MathJax",
    "title": "Alignment",
    "content": "| Plain CBS | CBS-LaTeX | Formatted CBS | . | ... ... | ... \\ ... | \\(\\ldots \\ \\ldots\\) | . | ...   ... | ...\\quad... | \\(\\ldots\\quad\\ldots\\) | . | ...      ... | ...\\qquad... | \\(\\ldots\\qquad\\ldots\\) | . | ..... ⏎ ... | \\begin{aligned} ... ~ &amp; ... \\\\ ~ &amp; ... \\end{aligned} | \\(\\begin{aligned} \\ldots ~ &amp; \\ldots \\\\ ~ &amp; \\ldots \\end{aligned}\\) | . | Generation of marked-up CBS from CBS source text is currently being implemented in Spoofax; when complete, the tool will be made freely available as an Eclipse plugin. &#8617; . | An alternative would be to prefix all macro names with cbs. &#8617; . | The textcomp package is automatically loaded in recent \\(\\LaTeX\\) distributions. &#8617; . | CBS section numbers are also treated as names. &#8617; . | . ",
    "url": "/cbs-latex/docs/macros-mathjax.html#alignment",
    "relUrl": "/docs/macros-mathjax.html#alignment"
  },"61": {
    "doc": "Macros - MathJax",
    "title": "Macros - MathJax",
    "content": "This page is using MathJax. See the same page using KaTeX. ",
    "url": "/cbs-latex/docs/macros-mathjax.html",
    "relUrl": "/docs/macros-mathjax.html"
  },"62": {
    "doc": "Macros",
    "title": "Macros",
    "content": "This page explains how to mark up CBS specifications in LaTeX when using the cbs-latex package. It also provides links to the macro definitions for use with LaTeX, KaTeX, and MathJax. | Required packages | Names . | Hyperlinks | Variables | . | Language specifications . | Grammars | Syntactic phrase types | Lexemes | Semantic functions | . | Funcon specifications . | Datatype specifications | Entity declarations | Rules | Formulae | Terms | Other specifications | . | Alignment | . Markup using CBS-LaTeX is quite low-level. This makes it easy to adjust the layout to fit the intended page width, but tedious to write.1 . CBS-LaTeX provides the following files: . | cbs-latex.sty: a package of macro definitions for use in LaTeX documents | cbs-katex.sty: a configuration defining KaTeX macros for use in web pages | cbs-mathjax.sty: a configuration defining MathJax macros for use in web pages | . The packages include some explanatory comments. Each package defines the same collection of LaTeX macro names, taking the same arguments. The rendering of the macros should have the same layout and symbols, regardless of which format is used, except that the font families may differ. All macro names are uppercase, to reduce the risk of clashes with macros defined by other packages.2 They are intended for use primarily in math mode. ",
    "url": "/cbs-latex/docs/macros.html#macros",
    "relUrl": "/docs/macros.html#macros"
  },"63": {
    "doc": "Macros",
    "title": "Required packages",
    "content": "When used with \\(\\LaTeX\\), the cbs-latex package requires the following packages (all included in TeXLive): . amsmath Provides various environments and commands for math alignment, including the align and aligned environments. amssymb Provides an extended math symbol collection, including \\(\\leadsto\\). stmaryrd Provides symbols for TCS, including \\(\\llbracket\\) and \\(\\rrbracket\\). textcomp Provides commands for various characters in text mode, including \\(\\LEX{\\APOSTROPHE}\\).3 xcolor The svgnames option provides color names that can also be used on web pages (see the W3schools Colors Tutorial). hyperref Needed for creating hyperlinks. Use \\hypersetup{filebordercolor=White} to avoid colored boxes around references to names in CBS specifications. The following packages are not required, but using them may make the formatting of running text in \\(\\LaTeX\\) closer to that produced from Markdown on web pages: . cmbright Global sans-serif fonts. geometry Allows adjustment of page dimensions. Set in the preamble, e.g., \\geometry{a4paper, textwidth=150mm, top=10mm, bottom=20mm, footnotesep=10mm plus 10mm}. parskip Uses blank lines to separate paragraphs. ",
    "url": "/cbs-latex/docs/macros.html#required-packages",
    "relUrl": "/docs/macros.html#required-packages"
  },"64": {
    "doc": "Macros",
    "title": "Names",
    "content": "CBS specifications involve declaration and reference of names for funcons, entities, syntax sorts, and semantic functions.4 The macro used for a name depends on the namespace. Names in different namespaces have different highlighting colors, and the colors depend on the configured color_scheme. | Plain CBS | CBS-LaTeX | Formatted CBS | . | funcon-name | \\FUN{funcon-name} | \\(\\FUN{funcon-name}\\) | . | entity-name | \\FUN{entity-name} | \\(\\FUN{entity-name}\\) | . | syntax-name | \\SYN{syntax-name} | \\(\\SYN{syntax-name}\\) | . | semantics-name | \\SEM{semantics-name} | \\(\\SEM{semantics-name}\\) | . | §2.1 A section | \\textsf{\\S\\SECT{2.1} A section} | \\(\\textsf{\\S\\SECT{2.1} A section}\\) | . Hyperlinks . Variants of the name markup macros indicate that the occurrence of a name is a declaration or a reference. In both PDFs and web pages, each name reference becomes a hyperlink to the declaration of that name. A name should not be declared (in the same namespace) more than once per document. | Plain CBS | CBS-LaTeX | Formatted CBS | . | name | \\FUNDEC{name} | \\(\\FUNDEC{name}\\) | . | name | \\FUNREF{name} | \\(\\FUNREF{name}\\) | . | name | \\FUNHYP{url}{file}{name} | \\(\\FUNHYP{.}{macros}{name}\\) | . Similarly for \\SYN, \\SEM, \\SECT. Variables . The macro for variable names formats its argument in text mode. A Greek letter used as a variable name has to be in math mode. Subscripts should be marked up directly after the variable name, to ensure that they are in the intended sans serif font (and to support italic spacing correction). Any primes and multiplicity are written after the name and subscript. | Plain CBS | CBS-LaTeX | Formatted CBS | . | X' | \\VAR{X}' | \\(\\VAR{X}'\\) | . | X12'' | \\VAR{X}\\SUB{12}'' | \\(\\VAR{X}\\SUB{12}''\\) | . | X+ | \\VAR{X}\\PLUS | \\(\\VAR{X}\\PLUS\\) | . | X? | \\VAR{X}\\QUERY | \\(\\VAR{X}\\QUERY\\) | . | X* | \\VAR{X}\\STAR | \\(\\VAR{X}\\STAR\\) | . | Rho | \\rho or \\VAR{$\\rho$} | \\(\\VAR{$\\rho$}\\) | . ",
    "url": "/cbs-latex/docs/macros.html#names",
    "relUrl": "/docs/macros.html#names"
  },"65": {
    "doc": "Macros",
    "title": "Language specifications",
    "content": "Grammars . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Lexis ... | \\KEY{Lexis} ~ ... | \\(\\KEY{Lexis} ~ \\ldots\\) | . | Syntax ... | \\KEY{Syntax} ~ ... | \\(\\KEY{Syntax} ~ \\ldots\\) | . | ...:... ::= ... | ...:... ::= ... | \\(\\ldots:\\ldots ::= \\ldots\\) | . Syntactic phrase types . | Plain CBS | CBS-LaTeX | Formatted CBS | . | syntax-name | \\SYN{syntax-name} | \\(\\SYN{syntax-name}\\) | . | 'lexeme' | \\LEX{lexeme} | \\(\\LEX{lexeme}\\) | . | P_1 P_2 | P_1 ~ P_2 | \\(P_1 ~ P_2\\) | . | P_1 | P_2 | P_1 \\mid P_2 | \\(P_1 \\mid P_2\\) | . | P+ | P\\PLUS | \\(P\\PLUS\\) | . | P? | P\\QUERY | \\(P\\QUERY\\) | . | P* | P\\STAR | \\(P\\STAR\\) | . | (P) | \\LEFTGROUP P \\RIGHTGROUP | \\(\\LEFTGROUP P \\RIGHTGROUP\\) | . Lexemes . Characters in lexemes are marked up as follows. Those that require macros include all the special characters of \\(\\LaTeX\\), and characters that look different in text and math mode. | Plain CBS | CBS-LaTeX | Formatted CBS | . | '0...9A...Za...z' | \\LEX{0...9A...Za...z} | \\(\\LEX{0...9A...Za...z}\\) | . | '!()*,./:;=?@[]' | \\LEX{!()*,./:;=?@[]} | \\(\\LEX{!()*,./:;=?@[]}\\) | . | '#' | \\LEX{\\HASH} | \\(\\LEX{\\HASH}\\) | . | '$' | \\LEX{\\DOLLAR} | \\(\\LEX{\\DOLLAR}\\) | . | '%' | \\LEX{\\PERCENT} | \\(\\LEX{\\PERCENT}\\) | . | '&amp;' | \\LEX{\\AMPERSAND} | \\(\\LEX{\\AMPERSAND}\\) | . | '\\'' | \\LEX{\\APOSTROPHE} | \\(\\LEX{\\APOSTROPHE}\\) | . | '\\\\' | \\LEX{\\BACKSLASH} | \\(\\LEX{\\BACKSLASH}\\) | . | '^' | \\LEX{\\CARET} | \\(\\LEX{\\CARET}\\) | . | '_' | \\LEX{\\UNDERSCORE} | \\(\\LEX{\\UNDERSCORE}\\) | . | '`' | \\LEX{\\GRAVE} | \\(\\LEX{\\GRAVE}\\) | . | '{' | \\LEX{\\LEFTBRACE} | \\(\\LEX{\\LEFTBRACE}\\) | . | '}' | \\LEX{\\RIGHTBRACE} | \\(\\LEX{\\RIGHTBRACE}\\) | . | '~' | \\LEX{\\TILDE} | \\(\\LEX{\\TILDE}\\) | . Semantic functions . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Semantics s-n[[_:...]] : ... | \\KEY{Semantics} ~ \\SEMDEC{s-n} \\LEFTPHRASE \\_ : ... \\RIGHTPHRASE : ... | \\(\\KEY{Semantics} ~ \\SEM{s-n} \\LEFTPHRASE \\_ : \\nobreak \\ldots \\RIGHTPHRASE : \\ldots\\) | . | Rule ... = ... | \\KEY{Rule} ~ ... = ... | \\(\\KEY{Rule} ~ \\ldots = \\ldots\\) | . | [[...]] | \\LEFTPHRASE ... \\RIGHTPHRASE | \\(\\LEFTPHRASE \\ldots \\RIGHTPHRASE\\) | . | s-n[[...]] | \\SEMREF{s-n} \\LEFTPHRASE ... \\RIGHTPHRASE | \\(\\SEMREF{s-n} \\LEFTPHRASE \\ldots \\RIGHTPHRASE\\) | . ",
    "url": "/cbs-latex/docs/macros.html#language-specifications",
    "relUrl": "/docs/macros.html#language-specifications"
  },"66": {
    "doc": "Macros",
    "title": "Funcon specifications",
    "content": "| Plain CBS | CBS-LaTeX | Formatted CBS | . | Funcon f-n ... : ... | \\KEY{Funcon} ~ \\FUNDEC{f-n} ... : ... | \\(\\KEY{Funcon} ~ \\FUN{f-n} \\ldots : \\ldots\\) | . | Alias f-n1 = f-n2 | \\KEY{Alias} ~ \\FUNDEC{f-n1} = \\FUNREF{f-n2} | \\(\\KEY{Alias} ~ \\FUNDEC{f-n1} = \\FUNREF{f-n2}\\) | . | Type t-n ... | \\KEY{Type} ~ \\FUNDEC{t-n} ... | \\(\\KEY{Type} ~ \\FUNDEC{t-n} \\ldots\\) | . Datatype specifications . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Datatype d-n ::= ... | \\KEY{Datatype} ~ \\FUNDEC{d-n} ::= ... | \\(\\KEY{Datatype} ~ \\FUNDEC{d-n} ::= \\ldots\\) | . | ... | ... | ... \\mid ... | \\(\\ldots \\mid \\ldots\\) | . | c-n | \\FUNDEC{c-n} | \\(\\FUNDEC{c-n}\\) | . | c-n(...) | \\FUNDEC{c-n}(...) | \\(\\FUNDEC{c-n}(\\ldots)\\) | . | { _ : ... } | \\{ ~ _ : ... ~ \\} | \\(\\{ ~ \\_ : \\ldots ~ \\}\\) | . Entity declarations . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Entity ... | \\KEY{Entity} ~ ... | \\(\\KEY{Entity} ~ \\ldots\\) | . | e-n(_:...)|- _ ---&gt; _ | \\FUNDEC{e-n}(\\_:...) \\vdash \\_\\TRANS\\_ | \\(\\FUNDEC{e-n}(\\_ : \\ldots) \\vdash \\_ \\TRANS \\_\\) | . | &lt;_,e-n(_:...)&gt; ---&gt; &lt;_,e-n(_:...)&gt; | \\langle\\_,\\FUNDEC{e-n}(\\_:...)\\rangle \\TRANS \\langle\\_,\\FUN{e-n}(\\_:...)\\rangle | \\(\\langle\\_,\\FUN{e-n}(\\_:\\ldots)\\rangle \\TRANS \\langle\\_,\\FUN{e-n}(\\_:\\ldots)\\rangle\\) | . | _ -- e-n.(_:...) -&gt; _ | \\_ \\xrightarrow{\\FUNDEC{e-n}.(\\_:...)} \\_ | \\(\\_ \\xrightarrow{\\FUN{e-n}.(\\_:\\ldots)} \\_\\) | . The . in the last line above should be !, ?, or omitted. Rules . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Rule ... | \\KEY{Rule} ~ ... | \\(\\KEY{Rule} ~ \\ldots\\) | . | Rule ... ⏎ ... | \\begin{aligned} \\KEY{Rule} ~ &amp; ...\\\\ &amp; ... \\end{aligned} | \\(\\begin{aligned}\\KEY{Rule}~&amp;\\ldots\\\\[-2ex]&amp;\\quad\\ldots\\end{aligned}\\) | . | Rule ... ⏎ ---- ⏎ ... | \\KEY{Rule} ~ \\RULE{...}{...} | \\(\\KEY{Rule} ~ \\RULE{\\ldots}{\\ldots}\\) | . | Otherwise ... | \\KEY{Otherwise} ~ ... | \\(\\KEY{Otherwise} ~ \\ldots\\) | . | Assert ... | \\KEY{Assert} ~ ... | \\(\\KEY{Assert} ~ \\ldots\\) | . Formulae . | Plain CBS | CBS-LaTeX | Formatted CBS | . | ... ~&gt; ... | ... \\leadsto ... | \\(\\ldots \\leadsto \\ldots\\) | . | ... == ... | ... == ... | \\(\\ldots == \\ldots\\) | . | ... =/= ... | ... \\neq ... | \\(\\ldots \\neq \\ldots\\) | . | ... &lt;: ... | ... &lt;: ... | \\(\\ldots &lt;: \\ldots\\) | . | ... ---&gt; ... | ... \\TRANS ... | \\(\\ldots \\TRANS \\ldots\\) | . | e-n(...)|- ...---&gt;... | \\FUN{e-n}(...) \\vdash ...\\TRANS... | \\(\\FUNREF{e-n}(\\ldots) \\vdash \\ldots \\TRANS \\ldots\\) | . | &lt;...,e-n(...)&gt; ---&gt; &lt;...,e-n(...)&gt; | \\langle...,\\FUN{e-n}(...)\\rangle \\TRANS \\langle...,\\FUN{e-n}(...)\\rangle | \\(\\langle\\ldots,\\FUN{e-n}(\\ldots)\\rangle \\TRANS \\langle\\ldots,\\FUN{e-n}(\\ldots)\\rangle\\) | . | ... -- e-n.(...) -&gt; ... | ...\\xrightarrow{\\FUN{e-n}.(...)}... | \\(\\ldots\\xrightarrow{\\FUN{e-n}.(\\ldots)}\\ldots\\) | . The . in the last line above should be !, ?, or omitted. Terms . | Plain CBS | CBS-LaTeX | Formatted CBS | . | ( ) | ( ~ ) | \\(( ~ )\\) | . | '...' | \\ATOM{text} | \\(\\ATOM{text}\\) | . | 42 | 42 | \\(42\\) | . | 2.14 | 2.14 | \\(2.14\\) | . | \"...\" | \\STRING{text} | \\(\\STRING{text}\\) | . | ... : ... | ... : ... | \\(\\ldots : \\ldots\\) | . | ... =&gt; ... | ... \\TO ... | \\(\\ldots \\TO \\ldots\\) | . | ...+ | ...\\PLUS | \\(\\ldots\\PLUS\\) | . | ...? | ...\\QUERY | \\(\\ldots\\QUERY\\) | . | ...* | ...\\STAR | \\(\\ldots\\STAR\\) | . | ... | ... | ... \\mid ... | \\(\\ldots \\mid \\ldots\\) | . | ... &amp; ... | ... \\&amp; ... | \\(\\ldots \\&amp; \\ldots\\) | . | ...^N | ...^{N} | \\(\\ldots^{N}\\) | . | (..., ...) | (..., ...) | \\((\\ldots, \\ldots)\\) | . | [..., ...] | [..., ...] | \\([\\ldots, \\ldots]\\) | . | {..., ...} | \\{..., ...\\} | \\(\\{\\ldots, \\ldots\\}\\) | . | {...|-&gt;..., ...} | \\{... \\mapsto ..., \\cdots\\} | \\(\\{\\ldots \\mapsto \\ldots, \\cdots\\}\\) | . Other specifications . | Plain CBS | CBS-LaTeX | Formatted CBS | . | Auxiliary K ... | \\KEY{Auxiliary K} ~ ... | \\(\\KEY{Auxiliary K} ~ \\ldots\\) | . | Built-in K ... | \\KEY{Built-in K} ~ ... | \\(\\KEY{Built-in K} ~ \\ldots\\) | . | Meta-variables ... | \\KEY{Meta-variables} ~ ... | \\(\\KEY{Meta-variables} ~ \\ldots\\) | . ",
    "url": "/cbs-latex/docs/macros.html#funcon-specifications",
    "relUrl": "/docs/macros.html#funcon-specifications"
  },"67": {
    "doc": "Macros",
    "title": "Alignment",
    "content": "| Plain CBS | CBS-LaTeX | Formatted CBS | . | ... ... | ... \\ ... | \\(\\ldots \\ \\ldots\\) | . | ...   ... | ...\\quad... | \\(\\ldots\\quad\\ldots\\) | . | ...      ... | ...\\qquad... | \\(\\ldots\\qquad\\ldots\\) | . | ..... ⏎ ... | \\begin{aligned} ... ~ &amp; ... \\\\ ~ &amp; ... \\end{aligned} | \\(\\begin{aligned} \\ldots ~ &amp; \\ldots \\\\ ~ &amp; \\ldots \\end{aligned}\\) | . | Generation of marked-up CBS from CBS source text is currently being implemented in Spoofax; when complete, the tool will be made freely available as an Eclipse plugin. &#8617; . | An alternative would be to prefix all macro names with cbs. &#8617; . | The textcomp package is automatically loaded in recent \\(\\LaTeX\\) distributions. &#8617; . | CBS section numbers are also treated as names. &#8617; . | . ",
    "url": "/cbs-latex/docs/macros.html#alignment",
    "relUrl": "/docs/macros.html#alignment"
  },"68": {
    "doc": "Macros",
    "title": "Macros",
    "content": "This page is using \\(\\KaTeX\\). See the same page using MathJax. ",
    "url": "/cbs-latex/docs/macros.html",
    "relUrl": "/docs/macros.html"
  },"69": {
    "doc": "Samples",
    "title": "Samples",
    "content": "The following samples illustrate how plain CBS specifications can be marked up using the CBS-LaTeX macros, and the resulting PDFs and web pages. ",
    "url": "/cbs-latex/docs/samples.html",
    "relUrl": "/docs/samples.html"
  },"70": {
    "doc": "Samples",
    "title": "Funcon specifications",
    "content": "CBS-beta/Funcons-beta/Computations/Normal/Binding: . CBS source | CBS-LaTeX | PDF | Markdown | Web . ",
    "url": "/cbs-latex/docs/samples.html#funcon-specifications",
    "relUrl": "/docs/samples.html#funcon-specifications"
  },"71": {
    "doc": "Samples",
    "title": "Language specifications",
    "content": "CBS-beta/Languages-beta/SIMPLE/SIMPLE-cbs/SIMPLE/SIMPLE-3-Statements: . CBS source | CBS-LaTeX | PDF | Markdown | Web . ",
    "url": "/cbs-latex/docs/samples.html#language-specifications",
    "relUrl": "/docs/samples.html#language-specifications"
  },"72": {
    "doc": "Samples",
    "title": "ASCII tests",
    "content": "The ASCII tests show how various characters used in language grammars are marked up using the CBS-LaTeX macros, and used to produce a PDF and a web page: . CBS source | CBS-LaTeX | PDF | Markdown | Web . ",
    "url": "/cbs-latex/docs/samples.html#ascii-tests",
    "relUrl": "/docs/samples.html#ascii-tests"
  },"73": {
    "doc": "Samples",
    "title": "Production",
    "content": "A literate CBS source file is a Markdown text that includes plain CBS notation in code blocks. Using the kramdown variant of Markdown, the CBS code blocks can be replaced by math blocks with LaTeX markup. The kramdown package can then transform the file completely to LaTeX (to produce a PDF), and to HTML (relying on math engines such as KaTeX or MathJax to render the embedded LaTeX in web browsers). The current implementation of the required transformations uses Spoofax, kramdown, and pdflatex. Production of a PDF and a web page from a literate CBS source file involves the following steps. | A CBS editor in Spoofax (generated from the SDF3 and NaBL2 definitions of CBS) parses all the literate CBS source files in a project,1 analysing and checking the names used in the plain CBS code blocks. | A menu action in the CBS editor (implemented in Stratego) produces kramdown files with CBS-LaTeX markup in math blocks. | The kramdown converter generates LaTeX document bodies from the kramdown files with the command: kramdown -o remove_html_tags,latex FILE.md &gt; FILE.part.tex . | pdflatex produces PDFs from the generated LaTeX source files by inputting them in a document template with the cbs-latex package. The LaTeX definitions of the highlighting colours can be overridden using \\colorlet{...}{...} (the svgnames colours are pre-loaded). | The kramdown converter automatically generates HTML pages from the kramdown files when building a website on GitHub Pages (or locally) with Jekyll. | KaTeX uses JavaScript and CSS in the browser to automatically render LaTeX code in HTML pages. The cbs-katex package defines the CBS-LaTeX macros for use with KaTeX, and needs to be included by the Jekyll layout (as with the source files for this website). The CSS specifications of the highlighting colours can be overridden (the standard HTML colour names can be used). | . | The CBS grammar resembles a so-called island grammar, where the islands are the formal notation, and the water is informal text. Currently, the shores of the islands are marked by comment delimiters /*...*/ instead of the code fences used in Markdown. &#8617; . | . ",
    "url": "/cbs-latex/docs/samples.html#production",
    "relUrl": "/docs/samples.html#production"
  }
}
