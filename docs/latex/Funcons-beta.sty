\ProvidesPackage{Funcons-beta}[2021/08/18 Package declaring hyperlinks for use with cbs-latex]
\RequirePackage{cbs-latex}

\def\FUN@abrupt
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Abrupting}{abrupt}}
\def\FUN@abrupted
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Abrupting}{abrupted}}
\def\FUN@abstraction
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Generic}{abstraction}}
\def\FUN@abstractions
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Generic}{abstractions}}
\def\FUN@accumulate
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{accumulate}}
\def\FUN@alloc
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{alloc}}
\def\FUN@alloc@init
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{alloc-init}}
\def\FUN@allocate@initialised@variable
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{allocate-initialised-variable}}
\def\FUN@allocate@variable
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{allocate-variable}}
\def\FUN@and
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{and}}
\def\FUN@apply
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Functions}{apply}}
\def\FUN@ascii@char
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{ascii-char}}
\def\FUN@ascii@character
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{ascii-character}}
\def\FUN@ascii@characters
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{ascii-characters}}
\def\FUN@ascii@chars
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{ascii-chars}}
\def\FUN@ascii@points
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{ascii-points}}
\def\FUN@assign
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{assign}}
\def\FUN@assigned
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{assigned}}
\def\FUN@atomic
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{atomic}}
\def\FUN@atoms
  {\FUNCBS{Funcons-beta/Computations/Normal}{Generating}{atoms}}
\def\FUN@backslash
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{backslash}}
\def\FUN@backspace
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{backspace}}
\def\FUN@basic@multilingual@plane@characters
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{basic-multilingual-plane-characters}}
\def\FUN@basic@multilingual@plane@points
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{basic-multilingual-plane-points}}
\def\FUN@binary
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{binary}}
\def\FUN@binary@natural
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{binary-natural}}
\def\FUN@binaryONETWOEIGHT
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{binary128}}
\def\FUN@binarySIXFOUR
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{binary64}}
\def\FUN@binaryTHREETWO
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{binary32}}
\def\FUN@bind
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{bind}}
\def\FUN@bind@recursively
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{bind-recursively}}
\def\FUN@bind@to@forward@links
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{bind-to-forward-links}}
\def\FUN@bind@value
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{bind-value}}
\def\FUN@bit@vector
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector}}
\def\FUN@bit@vector@and
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-and}}
\def\FUN@bit@vector@arithmetic@shift@right
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-arithmetic-shift-right}}
\def\FUN@bit@vector@logical@shift@right
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-logical-shift-right}}
\def\FUN@bit@vector@not
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-not}}
\def\FUN@bit@vector@or
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-or}}
\def\FUN@bit@vector@shift@left
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-shift-left}}
\def\FUN@bit@vector@to@integer
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-to-integer}}
\def\FUN@bit@vector@to@natural
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-to-natural}}
\def\FUN@bit@vector@xor
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vector-xor}}
\def\FUN@bit@vectors
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bit-vectors}}
\def\FUN@bits
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bits}}
\def\FUN@bmp@chars
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{bmp-chars}}
\def\FUN@booleans
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{booleans}}
\def\FUN@bools
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{bools}}
\def\FUN@bound
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{bound}}
\def\FUN@bound@directly
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{bound-directly}}
\def\FUN@bound@value
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{bound-value}}
\def\FUN@bounded@integers
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{bounded-integers}}
\def\FUN@bounded@ints
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{bounded-ints}}
\def\FUN@break
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Breaking}{break}}
\def\FUN@breaking
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Breaking}{breaking}}
\def\FUN@broken
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Breaking}{broken}}
\def\FUN@bytes
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{bytes}}
\def\FUN@carriage@return
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{carriage-return}}
\def\FUN@case@match
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{case-match}}
\def\FUN@case@match@loosely
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{case-match-loosely}}
\def\FUN@case@variant@value
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{case-variant-value}}
\def\FUN@cast
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{cast}}
\def\FUN@cast@to@type
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{cast-to-type}}
\def\FUN@catch@else@throw
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Throwing}{catch-else-throw}}
\def\FUN@characters
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{characters}}
\def\FUN@chars
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{chars}}
\def\FUN@check
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{check}}
\def\FUN@check@true
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{check-true}}
\def\FUN@checked
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{checked}}
\def\FUN@choice
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{choice}}
\def\FUN@class
  {\FUNCBS{Funcons-beta/Values/Composite}{Classes}{class}}
\def\FUN@class@feature@map
  {\FUNCBS{Funcons-beta/Values/Composite}{Classes}{class-feature-map}}
\def\FUN@class@instantiator
  {\FUNCBS{Funcons-beta/Values/Composite}{Classes}{class-instantiator}}
\def\FUN@class@name@single@inheritance@feature@map
  {\FUNCBS{Funcons-beta/Values/Composite}{Classes}{class-name-single-inheritance-feature-map}}
\def\FUN@class@name@tree
  {\FUNCBS{Funcons-beta/Values/Composite}{Classes}{class-name-tree}}
\def\FUN@class@superclass@name@sequence
  {\FUNCBS{Funcons-beta/Values/Composite}{Classes}{class-superclass-name-sequence}}
\def\FUN@classes
  {\FUNCBS{Funcons-beta/Values/Composite}{Classes}{classes}}
\def\FUN@closed
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{closed}}
\def\FUN@closure
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Generic}{closure}}
\def\FUN@collateral
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{collateral}}
\def\FUN@compose
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Functions}{compose}}
\def\FUN@computation@types
  {\FUNCBS{Funcons-beta/Computations}{Computation-Types}{computation-types}}
\def\FUN@cons
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{cons}}
\def\FUN@continuation
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{continuation}}
\def\FUN@continuations
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{continuations}}
\def\FUN@continue
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Continuing}{continue}}
\def\FUN@continued
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Continuing}{continued}}
\def\FUN@continuing
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Continuing}{continuing}}
\def\FUN@control
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{control}}
\def\FUN@control@signal
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{control-signal}}
\def\FUN@current@value
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{current-value}}
\def\FUN@curry
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Functions}{curry}}
\def\FUN@datatype@value
  {\FUNCBS{Funcons-beta/Values/Composite}{Datatypes}{datatype-value}}
\def\FUN@datatype@value@elements
  {\FUNCBS{Funcons-beta/Values/Composite}{Datatypes}{datatype-value-elements}}
\def\FUN@datatype@value@id
  {\FUNCBS{Funcons-beta/Values/Composite}{Datatypes}{datatype-value-id}}
\def\FUN@datatype@values
  {\FUNCBS{Funcons-beta/Values/Composite}{Datatypes}{datatype-values}}
\def\FUN@decimal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{decimal}}
\def\FUN@decimal@float
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{decimal-float}}
\def\FUN@decimal@natural
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{decimal-natural}}
\def\FUN@decimalONETWOEIGHT
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{decimal128}}
\def\FUN@decimalSIXFOUR
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{decimal64}}
\def\FUN@delimit@cc
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{delimit-cc}}
\def\FUN@delimit@current@continuation
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{delimit-current-continuation}}
\def\FUN@dereference
  {\FUNCBS{Funcons-beta/Values/Composite}{References}{dereference}}
\def\FUN@directed@graphs
  {\FUNCBS{Funcons-beta/Values/Composite}{Graphs}{directed-graphs}}
\def\FUN@do@while
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{do-while}}
\def\FUN@do@while@true
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{do-while-true}}
\def\FUN@dom
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{dom}}
\def\FUN@double@quote
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{double-quote}}
\def\FUN@drop@first@n
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{drop-first-n}}
\def\FUN@effect
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{effect}}
\def\FUN@element@not@in
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{element-not-in}}
\def\FUN@else
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{else}}
\def\FUN@else@choice
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{else-choice}}
\def\FUN@empty@type
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{empty-type}}
\def\FUN@enact
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Generic}{enact}}
\def\FUN@env
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{env}}
\def\FUN@environment
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{environment}}
\def\FUN@environments
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{environments}}
\def\FUN@envs
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{envs}}
\def\FUN@exclusive@or
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{exclusive-or}}
\def\FUN@fail
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{fail}}
\def\FUN@failed
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{failed}}
\def\FUN@failing
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{failing}}
\def\FUN@false
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{false}}
\def\FUN@finalise@abrupting
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Abrupting}{finalise-abrupting}}
\def\FUN@finalise@breaking
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Breaking}{finalise-breaking}}
\def\FUN@finalise@continuing
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Continuing}{finalise-continuing}}
\def\FUN@finalise@failing
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Failing}{finalise-failing}}
\def\FUN@finalise@returning
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Returning}{finalise-returning}}
\def\FUN@finalise@throwing
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Throwing}{finalise-throwing}}
\def\FUN@finally
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Abrupting}{finally}}
\def\FUN@first
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{first}}
\def\FUN@first@n
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{first-n}}
\def\FUN@float
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float}}
\def\FUN@float@absolute@value
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-absolute-value}}
\def\FUN@float@acos
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-acos}}
\def\FUN@float@acosh
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-acosh}}
\def\FUN@float@add
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-add}}
\def\FUN@float@asin
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-asin}}
\def\FUN@float@asinh
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-asinh}}
\def\FUN@float@atan
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-atan}}
\def\FUN@float@atanh
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-atanh}}
\def\FUN@float@atanTWO
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-atan2}}
\def\FUN@float@ceiling
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-ceiling}}
\def\FUN@float@convert
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-convert}}
\def\FUN@float@cos
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-cos}}
\def\FUN@float@cosh
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-cosh}}
\def\FUN@float@divide
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-divide}}
\def\FUN@float@e
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-e}}
\def\FUN@float@equal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-equal}}
\def\FUN@float@exp
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-exp}}
\def\FUN@float@float@power
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-float-power}}
\def\FUN@float@floor
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-floor}}
\def\FUN@float@formats
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-formats}}
\def\FUN@float@integer@power
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-integer-power}}
\def\FUN@float@is@greater
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-is-greater}}
\def\FUN@float@is@greater@or@equal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-is-greater-or-equal}}
\def\FUN@float@is@less
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-is-less}}
\def\FUN@float@is@less@or@equal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-is-less-or-equal}}
\def\FUN@float@log
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-log}}
\def\FUN@float@logONEZERO
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-log10}}
\def\FUN@float@multiply
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-multiply}}
\def\FUN@float@multiply@add
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-multiply-add}}
\def\FUN@float@negate
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-negate}}
\def\FUN@float@pi
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-pi}}
\def\FUN@float@remainder
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-remainder}}
\def\FUN@float@round@ties@to@even
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-round-ties-to-even}}
\def\FUN@float@round@ties@to@infinity
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-round-ties-to-infinity}}
\def\FUN@float@sin
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-sin}}
\def\FUN@float@sinh
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-sinh}}
\def\FUN@float@sqrt
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-sqrt}}
\def\FUN@float@subtract
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-subtract}}
\def\FUN@float@tan
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-tan}}
\def\FUN@float@tanh
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-tanh}}
\def\FUN@float@truncate
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{float-truncate}}
\def\FUN@floats
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{floats}}
\def\FUN@fold@left
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{fold-left}}
\def\FUN@fold@right
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{fold-right}}
\def\FUN@follow@if@link
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{follow-if-link}}
\def\FUN@follow@link
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{follow-link}}
\def\FUN@force
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Thunks}{force}}
\def\FUN@forest@branch@sequence
  {\FUNCBS{Funcons-beta/Values/Composite}{Trees}{forest-branch-sequence}}
\def\FUN@forest@root@value@sequence
  {\FUNCBS{Funcons-beta/Values/Composite}{Trees}{forest-root-value-sequence}}
\def\FUN@forest@value@sequence
  {\FUNCBS{Funcons-beta/Values/Composite}{Trees}{forest-value-sequence}}
\def\FUN@form@feed
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{form-feed}}
\def\FUN@fresh@atom
  {\FUNCBS{Funcons-beta/Computations/Normal}{Generating}{fresh-atom}}
\def\FUN@fresh@identifier
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{fresh-identifier}}
\def\FUN@fresh@init@link
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{fresh-init-link}}
\def\FUN@fresh@initialised@link
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{fresh-initialised-link}}
\def\FUN@fresh@link
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{fresh-link}}
\def\FUN@from
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{from}}
\def\FUN@function
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Functions}{function}}
\def\FUN@functions
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Functions}{functions}}
\def\FUN@give
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{give}}
\def\FUN@given
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{given}}
\def\FUN@given@value
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{given-value}}
\def\FUN@ground@vals
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{ground-vals}}
\def\FUN@ground@values
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{ground-values}}
\def\FUN@handle@abrupt
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Abrupting}{handle-abrupt}}
\def\FUN@handle@break
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Breaking}{handle-break}}
\def\FUN@handle@continue
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Continuing}{handle-continue}}
\def\FUN@handle@recursively
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Throwing}{handle-recursively}}
\def\FUN@handle@return
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Returning}{handle-return}}
\def\FUN@handle@thrown
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Throwing}{handle-thrown}}
\def\FUN@head
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{head}}
\def\FUN@hexadecimal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{hexadecimal}}
\def\FUN@hexadecimal@natural
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{hexadecimal-natural}}
\def\FUN@hole
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{hole}}
\def\FUN@horizontal@tab
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{horizontal-tab}}
\def\FUN@id@tagged
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{id-tagged}}
\def\FUN@identifier@tagged
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{identifier-tagged}}
\def\FUN@identifiers
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{identifiers}}
\def\FUN@ids
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{ids}}
\def\FUN@if@else
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{if-else}}
\def\FUN@if@true@else
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{if-true-else}}
\def\FUN@implies
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{implies}}
\def\FUN@index
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{index}}
\def\FUN@init
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{init}}
\def\FUN@init@storing
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{init-storing}}
\def\FUN@initialise@binding
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{initialise-binding}}
\def\FUN@initialise@generating
  {\FUNCBS{Funcons-beta/Computations/Normal}{Generating}{initialise-generating}}
\def\FUN@initialise@giving
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{initialise-giving}}
\def\FUN@initialise@linking
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{initialise-linking}}
\def\FUN@initialise@storing
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{initialise-storing}}
\def\FUN@initialise@variable
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{initialise-variable}}
\def\FUN@int@abs
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{int-abs}}
\def\FUN@int@add
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{int-add}}
\def\FUN@int@div
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{int-div}}
\def\FUN@int@mod
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{int-mod}}
\def\FUN@int@mul
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{int-mul}}
\def\FUN@int@neg
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{int-neg}}
\def\FUN@int@pow
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{int-pow}}
\def\FUN@int@sub
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{int-sub}}
\def\FUN@integer@absolute@value
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-absolute-value}}
\def\FUN@integer@add
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-add}}
\def\FUN@integer@divide
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-divide}}
\def\FUN@integer@is@greater
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-is-greater}}
\def\FUN@integer@is@greater@or@equal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-is-greater-or-equal}}
\def\FUN@integer@is@less
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-is-less}}
\def\FUN@integer@is@less@or@equal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-is-less-or-equal}}
\def\FUN@integer@modulo
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-modulo}}
\def\FUN@integer@multiply
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-multiply}}
\def\FUN@integer@negate
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-negate}}
\def\FUN@integer@power
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-power}}
\def\FUN@integer@sequence
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-sequence}}
\def\FUN@integer@subtract
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integer-subtract}}
\def\FUN@integer@to@bit@vector
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{integer-to-bit-vector}}
\def\FUN@integers
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integers}}
\def\FUN@integers@from
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integers-from}}
\def\FUN@integers@up@to
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{integers-up-to}}
\def\FUN@interleave
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{interleave}}
\def\FUN@interleave@filter
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{interleave-filter}}
\def\FUN@interleave@map
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{interleave-map}}
\def\FUN@interleave@repeat
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{interleave-repeat}}
\def\FUN@intersperse
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{intersperse}}
\def\FUN@ints
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{ints}}
\def\FUN@is
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{is}}
\def\FUN@is@cyclic
  {\FUNCBS{Funcons-beta/Values/Composite}{Graphs}{is-cyclic}}
\def\FUN@is@eq
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{is-eq}}
\def\FUN@is@equal
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{is-equal}}
\def\FUN@is@greater
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{is-greater}}
\def\FUN@is@greater@or@equal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{is-greater-or-equal}}
\def\FUN@is@in
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{is-in}}
\def\FUN@is@in@set
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{is-in-set}}
\def\FUN@is@in@signed@bit@vector
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{is-in-signed-bit-vector}}
\def\FUN@is@in@type
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{is-in-type}}
\def\FUN@is@in@unsigned@bit@vector
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{is-in-unsigned-bit-vector}}
\def\FUN@is@less
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{is-less}}
\def\FUN@is@less@or@equal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{is-less-or-equal}}
\def\FUN@is@subclass@name
  {\FUNCBS{Funcons-beta/Values/Composite}{Classes}{is-subclass-name}}
\def\FUN@is@submultiset
  {\FUNCBS{Funcons-beta/Values/Composite}{Multisets}{is-submultiset}}
\def\FUN@is@subset
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{is-subset}}
\def\FUN@is@val
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{is-val}}
\def\FUN@is@value
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{is-value}}
\def\FUN@iso@latin@ONE@characters
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{iso-latin-1-characters}}
\def\FUN@iso@latin@ONE@points
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{iso-latin-1-points}}
\def\FUN@l@to@r
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{l-to-r}}
\def\FUN@latin@ONE@chars
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{latin-1-chars}}
\def\FUN@left@to@right
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{left-to-right}}
\def\FUN@left@to@right@filter
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{left-to-right-filter}}
\def\FUN@left@to@right@map
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{left-to-right-map}}
\def\FUN@left@to@right@repeat
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{left-to-right-repeat}}
\def\FUN@length
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{length}}
\def\FUN@line@feed
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{line-feed}}
\def\FUN@link
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{link}}
\def\FUN@links
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{links}}
\def\FUN@list
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{list}}
\def\FUN@list@append
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{list-append}}
\def\FUN@list@cons
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{list-cons}}
\def\FUN@list@elements
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{list-elements}}
\def\FUN@list@head
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{list-head}}
\def\FUN@list@length
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{list-length}}
\def\FUN@list@nil
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{list-nil}}
\def\FUN@list@tail
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{list-tail}}
\def\FUN@lists
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{lists}}
\def\FUN@locations
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{locations}}
\def\FUN@locs
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{locs}}
\def\FUN@lookup
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{lookup}}
\def\FUN@map
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{map}}
\def\FUN@map@delete
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{map-delete}}
\def\FUN@map@domain
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{map-domain}}
\def\FUN@map@elements
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{map-elements}}
\def\FUN@map@lookup
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{map-lookup}}
\def\FUN@map@override
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{map-override}}
\def\FUN@map@unite
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{map-unite}}
\def\FUN@maps
  {\FUNCBS{Funcons-beta/Values/Composite}{Maps}{maps}}
\def\FUN@match
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{match}}
\def\FUN@match@loosely
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{match-loosely}}
\def\FUN@multiset
  {\FUNCBS{Funcons-beta/Values/Composite}{Multisets}{multiset}}
\def\FUN@multiset@delete
  {\FUNCBS{Funcons-beta/Values/Composite}{Multisets}{multiset-delete}}
\def\FUN@multiset@elements
  {\FUNCBS{Funcons-beta/Values/Composite}{Multisets}{multiset-elements}}
\def\FUN@multiset@insert
  {\FUNCBS{Funcons-beta/Values/Composite}{Multisets}{multiset-insert}}
\def\FUN@multiset@occurrences
  {\FUNCBS{Funcons-beta/Values/Composite}{Multisets}{multiset-occurrences}}
\def\FUN@multisets
  {\FUNCBS{Funcons-beta/Values/Composite}{Multisets}{multisets}}
\def\FUN@n@of
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{n-of}}
\def\FUN@nat@pred
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{nat-pred}}
\def\FUN@nat@succ
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{nat-succ}}
\def\FUN@nats
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{nats}}
\def\FUN@natural@numbers
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{natural-numbers}}
\def\FUN@natural@predecessor
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{natural-predecessor}}
\def\FUN@natural@successor
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{natural-successor}}
\def\FUN@neg@inf
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{neg-inf}}
\def\FUN@neg@ints
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{neg-ints}}
\def\FUN@negative@infinity
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{negative-infinity}}
\def\FUN@negative@integers
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{negative-integers}}
\def\FUN@nil
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{nil}}
\def\FUN@no@given
  {\FUNCBS{Funcons-beta/Computations/Normal}{Giving}{no-given}}
\def\FUN@not
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{not}}
\def\FUN@null
  {\FUNCBS{Funcons-beta/Values/Primitive}{Null}{null}}
\def\FUN@null@type
  {\FUNCBS{Funcons-beta/Values/Primitive}{Null}{null-type}}
\def\FUN@null@value
  {\FUNCBS{Funcons-beta/Values/Primitive}{Null}{null-value}}
\def\FUN@object
  {\FUNCBS{Funcons-beta/Values/Composite}{Objects}{object}}
\def\FUN@object@class@name
  {\FUNCBS{Funcons-beta/Values/Composite}{Objects}{object-class-name}}
\def\FUN@object@feature@map
  {\FUNCBS{Funcons-beta/Values/Composite}{Objects}{object-feature-map}}
\def\FUN@object@identity
  {\FUNCBS{Funcons-beta/Values/Composite}{Objects}{object-identity}}
\def\FUN@object@single@inheritance@feature@map
  {\FUNCBS{Funcons-beta/Values/Composite}{Objects}{object-single-inheritance-feature-map}}
\def\FUN@object@subobject@sequence
  {\FUNCBS{Funcons-beta/Values/Composite}{Objects}{object-subobject-sequence}}
\def\FUN@object@tree
  {\FUNCBS{Funcons-beta/Values/Composite}{Objects}{object-tree}}
\def\FUN@objects
  {\FUNCBS{Funcons-beta/Values/Composite}{Objects}{objects}}
\def\FUN@octal
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{octal}}
\def\FUN@octal@natural
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{octal-natural}}
\def\FUN@octets
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{octets}}
\def\FUN@or
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{or}}
\def\FUN@partial@apply
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Functions}{partial-apply}}
\def\FUN@pattern
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{pattern}}
\def\FUN@pattern@any
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{pattern-any}}
\def\FUN@pattern@bind
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{pattern-bind}}
\def\FUN@pattern@else
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{pattern-else}}
\def\FUN@pattern@type
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{pattern-type}}
\def\FUN@pattern@unite
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{pattern-unite}}
\def\FUN@patterns
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Patterns}{patterns}}
\def\FUN@plug@signal
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{plug-signal}}
\def\FUN@pointer@null
  {\FUNCBS{Funcons-beta/Values/Composite}{References}{pointer-null}}
\def\FUN@pointers
  {\FUNCBS{Funcons-beta/Values/Composite}{References}{pointers}}
\def\FUN@pos@inf
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{pos-inf}}
\def\FUN@pos@ints
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{pos-ints}}
\def\FUN@positive@infinity
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{positive-infinity}}
\def\FUN@positive@integers
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{positive-integers}}
\def\FUN@print
  {\FUNCBS{Funcons-beta/Computations/Normal}{Interacting}{print}}
\def\FUN@qNaN
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{qNaN}}
\def\FUN@quiet@not@a@number
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{quiet-not-a-number}}
\def\FUN@r@to@l
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{r-to-l}}
\def\FUN@re@close
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{re-close}}
\def\FUN@read
  {\FUNCBS{Funcons-beta/Computations/Normal}{Interacting}{read}}
\def\FUN@record
  {\FUNCBS{Funcons-beta/Values/Composite}{Records}{record}}
\def\FUN@record@map
  {\FUNCBS{Funcons-beta/Values/Composite}{Records}{record-map}}
\def\FUN@record@select
  {\FUNCBS{Funcons-beta/Values/Composite}{Records}{record-select}}
\def\FUN@records
  {\FUNCBS{Funcons-beta/Values/Composite}{Records}{records}}
\def\FUN@recursive
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{recursive}}
\def\FUN@recycle
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{recycle}}
\def\FUN@recycle@variables
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{recycle-variables}}
\def\FUN@reference
  {\FUNCBS{Funcons-beta/Values/Composite}{References}{reference}}
\def\FUN@references
  {\FUNCBS{Funcons-beta/Values/Composite}{References}{references}}
\def\FUN@resume@continuation
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Controlling}{resume-continuation}}
\def\FUN@return
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Returning}{return}}
\def\FUN@returned
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Returning}{returned}}
\def\FUN@returning
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Returning}{returning}}
\def\FUN@reverse
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{reverse}}
\def\FUN@right@to@left
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{right-to-left}}
\def\FUN@scope
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{scope}}
\def\FUN@second
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{second}}
\def\FUN@seq
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{seq}}
\def\FUN@sequential
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{sequential}}
\def\FUN@set
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{set}}
\def\FUN@set@difference
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{set-difference}}
\def\FUN@set@elements
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{set-elements}}
\def\FUN@set@forward@links
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{set-forward-links}}
\def\FUN@set@insert
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{set-insert}}
\def\FUN@set@intersect
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{set-intersect}}
\def\FUN@set@link
  {\FUNCBS{Funcons-beta/Computations/Normal}{Linking}{set-link}}
\def\FUN@set@size
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{set-size}}
\def\FUN@set@unite
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{set-unite}}
\def\FUN@sets
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{sets}}
\def\FUN@signal
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{signal}}
\def\FUN@signaling@not@a@number
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{signaling-not-a-number}}
\def\FUN@signed@bit@vector@maximum
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{signed-bit-vector-maximum}}
\def\FUN@signed@bit@vector@minimum
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{signed-bit-vector-minimum}}
\def\FUN@single@branching@sequence
  {\FUNCBS{Funcons-beta/Values/Composite}{Trees}{single-branching-sequence}}
\def\FUN@single@quote
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{single-quote}}
\def\FUN@sNaN
  {\FUNCBS{Funcons-beta/Values/Primitive}{Floats}{sNaN}}
\def\FUN@some@element
  {\FUNCBS{Funcons-beta/Values/Composite}{Sets}{some-element}}
\def\FUN@standard@in
  {\FUNCBS{Funcons-beta/Computations/Normal}{Interacting}{standard-in}}
\def\FUN@standard@out
  {\FUNCBS{Funcons-beta/Computations/Normal}{Interacting}{standard-out}}
\def\FUN@store
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{store}}
\def\FUN@store@clear
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{store-clear}}
\def\FUN@stores
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{stores}}
\def\FUN@string
  {\FUNCBS{Funcons-beta/Values/Composite}{Strings}{string}}
\def\FUN@string@append
  {\FUNCBS{Funcons-beta/Values/Composite}{Strings}{string-append}}
\def\FUN@strings
  {\FUNCBS{Funcons-beta/Values/Composite}{Strings}{strings}}
\def\FUN@structural@assign
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{structural-assign}}
\def\FUN@structural@assigned
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{structural-assigned}}
\def\FUN@stuck
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Abrupting}{stuck}}
\def\FUN@supply
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Functions}{supply}}
\def\FUN@tail
  {\FUNCBS{Funcons-beta/Values/Composite}{Lists}{tail}}
\def\FUN@third
  {\FUNCBS{Funcons-beta/Values/Composite}{Sequences}{third}}
\def\FUN@throw
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Throwing}{throw}}
\def\FUN@throwing
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Throwing}{throwing}}
\def\FUN@thrown
  {\FUNCBS{Funcons-beta/Computations/Abnormal}{Throwing}{thrown}}
\def\FUN@thunk
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Thunks}{thunk}}
\def\FUN@thunks
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Thunks}{thunks}}
\def\FUN@to@string
  {\FUNCBS{Funcons-beta/Values/Composite}{Strings}{to-string}}
\def\FUN@topological@sort
  {\FUNCBS{Funcons-beta/Values/Composite}{Graphs}{topological-sort}}
\def\FUN@tree
  {\FUNCBS{Funcons-beta/Values/Composite}{Trees}{tree}}
\def\FUN@tree@branch@sequence
  {\FUNCBS{Funcons-beta/Values/Composite}{Trees}{tree-branch-sequence}}
\def\FUN@tree@root@value
  {\FUNCBS{Funcons-beta/Values/Composite}{Trees}{tree-root-value}}
\def\FUN@trees
  {\FUNCBS{Funcons-beta/Values/Composite}{Trees}{trees}}
\def\FUN@true
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{true}}
\def\FUN@tuple
  {\FUNCBS{Funcons-beta/Values/Composite}{Tuples}{tuple}}
\def\FUN@tuple@elements
  {\FUNCBS{Funcons-beta/Values/Composite}{Tuples}{tuple-elements}}
\def\FUN@tuple@zip
  {\FUNCBS{Funcons-beta/Values/Composite}{Tuples}{tuple-zip}}
\def\FUN@tuples
  {\FUNCBS{Funcons-beta/Values/Composite}{Tuples}{tuples}}
\def\FUN@types
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{types}}
\def\FUN@un@assign
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{un-assign}}
\def\FUN@unbind
  {\FUNCBS{Funcons-beta/Computations/Normal}{Binding}{unbind}}
\def\FUN@uncurry
  {\FUNCBS{Funcons-beta/Values/Abstraction}{Functions}{uncurry}}
\def\FUN@unicode
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{unicode}}
\def\FUN@unicode@char
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{unicode-char}}
\def\FUN@unicode@character
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{unicode-character}}
\def\FUN@unicode@characters
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{unicode-characters}}
\def\FUN@unicode@chars
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{unicode-chars}}
\def\FUN@unicode@point
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{unicode-point}}
\def\FUN@unicode@points
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{unicode-points}}
\def\FUN@unsigned@bit@vector@maximum
  {\FUNCBS{Funcons-beta/Values/Composite}{Bits}{unsigned-bit-vector-maximum}}
\def\FUN@up@to
  {\FUNCBS{Funcons-beta/Values/Primitive}{Integers}{up-to}}
\def\FUN@use@atom@not@in
  {\FUNCBS{Funcons-beta/Computations/Normal}{Generating}{use-atom-not-in}}
\def\FUN@used@atom@set
  {\FUNCBS{Funcons-beta/Computations/Normal}{Generating}{used-atom-set}}
\def\FUN@utf@EIGHT
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{utf-8}}
\def\FUN@utf@ONESIX
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{utf-16}}
\def\FUN@utf@THREETWO
  {\FUNCBS{Funcons-beta/Values/Primitive}{Characters}{utf-32}}
\def\FUN@vals
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{vals}}
\def\FUN@value@types
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{value-types}}
\def\FUN@values
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{values}}
\def\FUN@var
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{var}}
\def\FUN@variable
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{variable}}
\def\FUN@variables
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{variables}}
\def\FUN@variant
  {\FUNCBS{Funcons-beta/Values/Composite}{Variants}{variant}}
\def\FUN@variant@id
  {\FUNCBS{Funcons-beta/Values/Composite}{Variants}{variant-id}}
\def\FUN@variant@value
  {\FUNCBS{Funcons-beta/Values/Composite}{Variants}{variant-value}}
\def\FUN@variants
  {\FUNCBS{Funcons-beta/Values/Composite}{Variants}{variants}}
\def\FUN@vars
  {\FUNCBS{Funcons-beta/Computations/Normal}{Storing}{vars}}
\def\FUN@vector
  {\FUNCBS{Funcons-beta/Values/Composite}{Vectors}{vector}}
\def\FUN@vector@elements
  {\FUNCBS{Funcons-beta/Values/Composite}{Vectors}{vector-elements}}
\def\FUN@vectors
  {\FUNCBS{Funcons-beta/Values/Composite}{Vectors}{vectors}}
\def\FUN@when
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{when}}
\def\FUN@when@true
  {\FUNCBS{Funcons-beta/Values}{Value-Types}{when-true}}
\def\FUN@while
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{while}}
\def\FUN@while@true
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{while-true}}
\def\FUN@xor
  {\FUNCBS{Funcons-beta/Values/Primitive}{Booleans}{xor}}
\def\FUN@yield
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{yield}}
\def\FUN@yield@on@abrupt
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{yield-on-abrupt}}
\def\FUN@yield@on@value
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{yield-on-value}}
\def\FUN@yielded
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{yielded}}
\def\FUN@yielding
  {\FUNCBS{Funcons-beta/Computations/Normal}{Flowing}{yielding}}
